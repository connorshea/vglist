# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Statistic`.
# Please instead update this file by running `bin/tapioca dsl Statistic`.

class Statistic
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Statistic).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Statistic).void)
      ).returns(::Statistic)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Statistic).void)
      ).returns(::Statistic)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Statistic).void)
      ).returns(::Statistic)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Statistic).void)
      ).returns(::Statistic)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Statistic).void)
      ).returns(::Statistic)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Statistic]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Statistic)) }
    def fifth; end

    sig { returns(::Statistic) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Statistic)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Statistic) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::Statistic).void)
      ).returns(T.nilable(T::Enumerator[::Statistic]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::Statistic]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::Statistic]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Statistic).void)
      ).returns(::Statistic)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Statistic).void)
      ).returns(::Statistic)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Statistic).void)
      ).returns(::Statistic)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Statistic)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Statistic) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Statistic) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Statistic) }
    def first!; end

    sig { returns(T.nilable(::Statistic)) }
    def forty_two; end

    sig { returns(::Statistic) }
    def forty_two!; end

    sig { returns(T.nilable(::Statistic)) }
    def fourth; end

    sig { returns(::Statistic) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Statistic) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Statistic).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Statistic).void)
      ).returns(::Statistic)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Statistic).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Statistic).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Statistic)) }
    def second; end

    sig { returns(::Statistic) }
    def second!; end

    sig { returns(T.nilable(::Statistic)) }
    def second_to_last; end

    sig { returns(::Statistic) }
    def second_to_last!; end

    sig { returns(::Statistic) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Statistic) }
    def take!; end

    sig { returns(T.nilable(::Statistic)) }
    def third; end

    sig { returns(::Statistic) }
    def third!; end

    sig { returns(T.nilable(::Statistic)) }
    def third_to_last; end

    sig { returns(::Statistic) }
    def third_to_last!; end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(::Integer) }
    def banned_users; end

    sig { params(value: ::Integer).returns(::Integer) }
    def banned_users=(value); end

    sig { returns(T::Boolean) }
    def banned_users?; end

    sig { returns(T.nilable(::Integer)) }
    def banned_users_before_last_save; end

    sig { returns(T.untyped) }
    def banned_users_before_type_cast; end

    sig { returns(T::Boolean) }
    def banned_users_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def banned_users_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def banned_users_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def banned_users_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def banned_users_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def banned_users_previous_change; end

    sig { returns(T::Boolean) }
    def banned_users_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def banned_users_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def banned_users_was; end

    sig { void }
    def banned_users_will_change!; end

    sig { returns(::Integer) }
    def companies; end

    sig { params(value: ::Integer).returns(::Integer) }
    def companies=(value); end

    sig { returns(T::Boolean) }
    def companies?; end

    sig { returns(T.nilable(::Integer)) }
    def companies_before_last_save; end

    sig { returns(T.untyped) }
    def companies_before_type_cast; end

    sig { returns(T::Boolean) }
    def companies_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def companies_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def companies_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def companies_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def companies_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def companies_previous_change; end

    sig { returns(T::Boolean) }
    def companies_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def companies_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def companies_was; end

    sig { void }
    def companies_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def company_versions; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def company_versions=(value); end

    sig { returns(T::Boolean) }
    def company_versions?; end

    sig { returns(T.nilable(::Integer)) }
    def company_versions_before_last_save; end

    sig { returns(T.untyped) }
    def company_versions_before_type_cast; end

    sig { returns(T::Boolean) }
    def company_versions_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def company_versions_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def company_versions_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def company_versions_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def company_versions_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def company_versions_previous_change; end

    sig { returns(T::Boolean) }
    def company_versions_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def company_versions_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def company_versions_was; end

    sig { void }
    def company_versions_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def engine_versions; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def engine_versions=(value); end

    sig { returns(T::Boolean) }
    def engine_versions?; end

    sig { returns(T.nilable(::Integer)) }
    def engine_versions_before_last_save; end

    sig { returns(T.untyped) }
    def engine_versions_before_type_cast; end

    sig { returns(T::Boolean) }
    def engine_versions_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def engine_versions_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def engine_versions_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def engine_versions_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def engine_versions_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def engine_versions_previous_change; end

    sig { returns(T::Boolean) }
    def engine_versions_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def engine_versions_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def engine_versions_was; end

    sig { void }
    def engine_versions_will_change!; end

    sig { returns(::Integer) }
    def engines; end

    sig { params(value: ::Integer).returns(::Integer) }
    def engines=(value); end

    sig { returns(T::Boolean) }
    def engines?; end

    sig { returns(T.nilable(::Integer)) }
    def engines_before_last_save; end

    sig { returns(T.untyped) }
    def engines_before_type_cast; end

    sig { returns(T::Boolean) }
    def engines_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def engines_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def engines_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def engines_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def engines_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def engines_previous_change; end

    sig { returns(T::Boolean) }
    def engines_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def engines_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def engines_was; end

    sig { void }
    def engines_will_change!; end

    sig { returns(::Integer) }
    def epic_games_store_ids; end

    sig { params(value: ::Integer).returns(::Integer) }
    def epic_games_store_ids=(value); end

    sig { returns(T::Boolean) }
    def epic_games_store_ids?; end

    sig { returns(T.nilable(::Integer)) }
    def epic_games_store_ids_before_last_save; end

    sig { returns(T.untyped) }
    def epic_games_store_ids_before_type_cast; end

    sig { returns(T::Boolean) }
    def epic_games_store_ids_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def epic_games_store_ids_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def epic_games_store_ids_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def epic_games_store_ids_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def epic_games_store_ids_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def epic_games_store_ids_previous_change; end

    sig { returns(T::Boolean) }
    def epic_games_store_ids_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def epic_games_store_ids_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def epic_games_store_ids_was; end

    sig { void }
    def epic_games_store_ids_will_change!; end

    sig { returns(::Integer) }
    def events; end

    sig { params(value: ::Integer).returns(::Integer) }
    def events=(value); end

    sig { returns(T::Boolean) }
    def events?; end

    sig { returns(T.nilable(::Integer)) }
    def events_before_last_save; end

    sig { returns(T.untyped) }
    def events_before_type_cast; end

    sig { returns(T::Boolean) }
    def events_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def events_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def events_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def events_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def events_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def events_previous_change; end

    sig { returns(T::Boolean) }
    def events_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def events_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def events_was; end

    sig { void }
    def events_will_change!; end

    sig { returns(::Integer) }
    def game_purchases; end

    sig { params(value: ::Integer).returns(::Integer) }
    def game_purchases=(value); end

    sig { returns(T::Boolean) }
    def game_purchases?; end

    sig { returns(T.nilable(::Integer)) }
    def game_purchases_before_last_save; end

    sig { returns(T.untyped) }
    def game_purchases_before_type_cast; end

    sig { returns(T::Boolean) }
    def game_purchases_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def game_purchases_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def game_purchases_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def game_purchases_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def game_purchases_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def game_purchases_previous_change; end

    sig { returns(T::Boolean) }
    def game_purchases_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def game_purchases_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def game_purchases_was; end

    sig { void }
    def game_purchases_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def game_versions; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def game_versions=(value); end

    sig { returns(T::Boolean) }
    def game_versions?; end

    sig { returns(T.nilable(::Integer)) }
    def game_versions_before_last_save; end

    sig { returns(T.untyped) }
    def game_versions_before_type_cast; end

    sig { returns(T::Boolean) }
    def game_versions_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def game_versions_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def game_versions_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def game_versions_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def game_versions_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def game_versions_previous_change; end

    sig { returns(T::Boolean) }
    def game_versions_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def game_versions_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def game_versions_was; end

    sig { void }
    def game_versions_will_change!; end

    sig { returns(::Integer) }
    def games; end

    sig { params(value: ::Integer).returns(::Integer) }
    def games=(value); end

    sig { returns(T::Boolean) }
    def games?; end

    sig { returns(T.nilable(::Integer)) }
    def games_before_last_save; end

    sig { returns(T.untyped) }
    def games_before_type_cast; end

    sig { returns(T::Boolean) }
    def games_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def games_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def games_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def games_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def games_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def games_previous_change; end

    sig { returns(T::Boolean) }
    def games_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def games_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def games_was; end

    sig { void }
    def games_will_change!; end

    sig { returns(::Integer) }
    def games_with_covers; end

    sig { params(value: ::Integer).returns(::Integer) }
    def games_with_covers=(value); end

    sig { returns(T::Boolean) }
    def games_with_covers?; end

    sig { returns(T.nilable(::Integer)) }
    def games_with_covers_before_last_save; end

    sig { returns(T.untyped) }
    def games_with_covers_before_type_cast; end

    sig { returns(T::Boolean) }
    def games_with_covers_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def games_with_covers_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def games_with_covers_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def games_with_covers_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def games_with_covers_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def games_with_covers_previous_change; end

    sig { returns(T::Boolean) }
    def games_with_covers_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def games_with_covers_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def games_with_covers_was; end

    sig { void }
    def games_with_covers_will_change!; end

    sig { returns(::Integer) }
    def games_with_release_dates; end

    sig { params(value: ::Integer).returns(::Integer) }
    def games_with_release_dates=(value); end

    sig { returns(T::Boolean) }
    def games_with_release_dates?; end

    sig { returns(T.nilable(::Integer)) }
    def games_with_release_dates_before_last_save; end

    sig { returns(T.untyped) }
    def games_with_release_dates_before_type_cast; end

    sig { returns(T::Boolean) }
    def games_with_release_dates_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def games_with_release_dates_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def games_with_release_dates_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def games_with_release_dates_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def games_with_release_dates_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def games_with_release_dates_previous_change; end

    sig { returns(T::Boolean) }
    def games_with_release_dates_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def games_with_release_dates_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def games_with_release_dates_was; end

    sig { void }
    def games_with_release_dates_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def genre_versions; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def genre_versions=(value); end

    sig { returns(T::Boolean) }
    def genre_versions?; end

    sig { returns(T.nilable(::Integer)) }
    def genre_versions_before_last_save; end

    sig { returns(T.untyped) }
    def genre_versions_before_type_cast; end

    sig { returns(T::Boolean) }
    def genre_versions_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def genre_versions_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def genre_versions_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def genre_versions_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def genre_versions_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def genre_versions_previous_change; end

    sig { returns(T::Boolean) }
    def genre_versions_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def genre_versions_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def genre_versions_was; end

    sig { void }
    def genre_versions_will_change!; end

    sig { returns(::Integer) }
    def genres; end

    sig { params(value: ::Integer).returns(::Integer) }
    def genres=(value); end

    sig { returns(T::Boolean) }
    def genres?; end

    sig { returns(T.nilable(::Integer)) }
    def genres_before_last_save; end

    sig { returns(T.untyped) }
    def genres_before_type_cast; end

    sig { returns(T::Boolean) }
    def genres_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def genres_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def genres_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def genres_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def genres_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def genres_previous_change; end

    sig { returns(T::Boolean) }
    def genres_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def genres_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def genres_was; end

    sig { void }
    def genres_will_change!; end

    sig { returns(::Integer) }
    def giantbomb_ids; end

    sig { params(value: ::Integer).returns(::Integer) }
    def giantbomb_ids=(value); end

    sig { returns(T::Boolean) }
    def giantbomb_ids?; end

    sig { returns(T.nilable(::Integer)) }
    def giantbomb_ids_before_last_save; end

    sig { returns(T.untyped) }
    def giantbomb_ids_before_type_cast; end

    sig { returns(T::Boolean) }
    def giantbomb_ids_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def giantbomb_ids_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def giantbomb_ids_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def giantbomb_ids_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def giantbomb_ids_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def giantbomb_ids_previous_change; end

    sig { returns(T::Boolean) }
    def giantbomb_ids_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def giantbomb_ids_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def giantbomb_ids_was; end

    sig { void }
    def giantbomb_ids_will_change!; end

    sig { returns(::Integer) }
    def gog_ids; end

    sig { params(value: ::Integer).returns(::Integer) }
    def gog_ids=(value); end

    sig { returns(T::Boolean) }
    def gog_ids?; end

    sig { returns(T.nilable(::Integer)) }
    def gog_ids_before_last_save; end

    sig { returns(T.untyped) }
    def gog_ids_before_type_cast; end

    sig { returns(T::Boolean) }
    def gog_ids_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def gog_ids_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def gog_ids_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def gog_ids_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def gog_ids_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def gog_ids_previous_change; end

    sig { returns(T::Boolean) }
    def gog_ids_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def gog_ids_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def gog_ids_was; end

    sig { void }
    def gog_ids_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def igdb_ids; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def igdb_ids=(value); end

    sig { returns(T::Boolean) }
    def igdb_ids?; end

    sig { returns(T.nilable(::Integer)) }
    def igdb_ids_before_last_save; end

    sig { returns(T.untyped) }
    def igdb_ids_before_type_cast; end

    sig { returns(T::Boolean) }
    def igdb_ids_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def igdb_ids_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def igdb_ids_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def igdb_ids_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def igdb_ids_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def igdb_ids_previous_change; end

    sig { returns(T::Boolean) }
    def igdb_ids_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def igdb_ids_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def igdb_ids_was; end

    sig { void }
    def igdb_ids_will_change!; end

    sig { returns(::Integer) }
    def mobygames_ids; end

    sig { params(value: ::Integer).returns(::Integer) }
    def mobygames_ids=(value); end

    sig { returns(T::Boolean) }
    def mobygames_ids?; end

    sig { returns(T.nilable(::Integer)) }
    def mobygames_ids_before_last_save; end

    sig { returns(T.untyped) }
    def mobygames_ids_before_type_cast; end

    sig { returns(T::Boolean) }
    def mobygames_ids_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def mobygames_ids_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def mobygames_ids_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def mobygames_ids_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def mobygames_ids_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def mobygames_ids_previous_change; end

    sig { returns(T::Boolean) }
    def mobygames_ids_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def mobygames_ids_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def mobygames_ids_was; end

    sig { void }
    def mobygames_ids_will_change!; end

    sig { returns(::Integer) }
    def pcgamingwiki_ids; end

    sig { params(value: ::Integer).returns(::Integer) }
    def pcgamingwiki_ids=(value); end

    sig { returns(T::Boolean) }
    def pcgamingwiki_ids?; end

    sig { returns(T.nilable(::Integer)) }
    def pcgamingwiki_ids_before_last_save; end

    sig { returns(T.untyped) }
    def pcgamingwiki_ids_before_type_cast; end

    sig { returns(T::Boolean) }
    def pcgamingwiki_ids_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def pcgamingwiki_ids_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def pcgamingwiki_ids_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def pcgamingwiki_ids_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def pcgamingwiki_ids_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def pcgamingwiki_ids_previous_change; end

    sig { returns(T::Boolean) }
    def pcgamingwiki_ids_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def pcgamingwiki_ids_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def pcgamingwiki_ids_was; end

    sig { void }
    def pcgamingwiki_ids_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def platform_versions; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def platform_versions=(value); end

    sig { returns(T::Boolean) }
    def platform_versions?; end

    sig { returns(T.nilable(::Integer)) }
    def platform_versions_before_last_save; end

    sig { returns(T.untyped) }
    def platform_versions_before_type_cast; end

    sig { returns(T::Boolean) }
    def platform_versions_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def platform_versions_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def platform_versions_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def platform_versions_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def platform_versions_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def platform_versions_previous_change; end

    sig { returns(T::Boolean) }
    def platform_versions_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def platform_versions_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def platform_versions_was; end

    sig { void }
    def platform_versions_will_change!; end

    sig { returns(::Integer) }
    def platforms; end

    sig { params(value: ::Integer).returns(::Integer) }
    def platforms=(value); end

    sig { returns(T::Boolean) }
    def platforms?; end

    sig { returns(T.nilable(::Integer)) }
    def platforms_before_last_save; end

    sig { returns(T.untyped) }
    def platforms_before_type_cast; end

    sig { returns(T::Boolean) }
    def platforms_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def platforms_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def platforms_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def platforms_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def platforms_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def platforms_previous_change; end

    sig { returns(T::Boolean) }
    def platforms_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def platforms_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def platforms_was; end

    sig { void }
    def platforms_will_change!; end

    sig { returns(::Integer) }
    def relationships; end

    sig { params(value: ::Integer).returns(::Integer) }
    def relationships=(value); end

    sig { returns(T::Boolean) }
    def relationships?; end

    sig { returns(T.nilable(::Integer)) }
    def relationships_before_last_save; end

    sig { returns(T.untyped) }
    def relationships_before_type_cast; end

    sig { returns(T::Boolean) }
    def relationships_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def relationships_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def relationships_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def relationships_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def relationships_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def relationships_previous_change; end

    sig { returns(T::Boolean) }
    def relationships_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def relationships_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def relationships_was; end

    sig { void }
    def relationships_will_change!; end

    sig { void }
    def restore_banned_users!; end

    sig { void }
    def restore_companies!; end

    sig { void }
    def restore_company_versions!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_engine_versions!; end

    sig { void }
    def restore_engines!; end

    sig { void }
    def restore_epic_games_store_ids!; end

    sig { void }
    def restore_events!; end

    sig { void }
    def restore_game_purchases!; end

    sig { void }
    def restore_game_versions!; end

    sig { void }
    def restore_games!; end

    sig { void }
    def restore_games_with_covers!; end

    sig { void }
    def restore_games_with_release_dates!; end

    sig { void }
    def restore_genre_versions!; end

    sig { void }
    def restore_genres!; end

    sig { void }
    def restore_giantbomb_ids!; end

    sig { void }
    def restore_gog_ids!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_igdb_ids!; end

    sig { void }
    def restore_mobygames_ids!; end

    sig { void }
    def restore_pcgamingwiki_ids!; end

    sig { void }
    def restore_platform_versions!; end

    sig { void }
    def restore_platforms!; end

    sig { void }
    def restore_relationships!; end

    sig { void }
    def restore_series!; end

    sig { void }
    def restore_series_versions!; end

    sig { void }
    def restore_steam_app_ids!; end

    sig { void }
    def restore_stores!; end

    sig { void }
    def restore_unmatched_games!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_users!; end

    sig { void }
    def restore_wikidata_ids!; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_banned_users; end

    sig { returns(T::Boolean) }
    def saved_change_to_banned_users?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_companies; end

    sig { returns(T::Boolean) }
    def saved_change_to_companies?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_company_versions; end

    sig { returns(T::Boolean) }
    def saved_change_to_company_versions?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_engine_versions; end

    sig { returns(T::Boolean) }
    def saved_change_to_engine_versions?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_engines; end

    sig { returns(T::Boolean) }
    def saved_change_to_engines?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_epic_games_store_ids; end

    sig { returns(T::Boolean) }
    def saved_change_to_epic_games_store_ids?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_events; end

    sig { returns(T::Boolean) }
    def saved_change_to_events?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_game_purchases; end

    sig { returns(T::Boolean) }
    def saved_change_to_game_purchases?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_game_versions; end

    sig { returns(T::Boolean) }
    def saved_change_to_game_versions?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_games; end

    sig { returns(T::Boolean) }
    def saved_change_to_games?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_games_with_covers; end

    sig { returns(T::Boolean) }
    def saved_change_to_games_with_covers?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_games_with_release_dates; end

    sig { returns(T::Boolean) }
    def saved_change_to_games_with_release_dates?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_genre_versions; end

    sig { returns(T::Boolean) }
    def saved_change_to_genre_versions?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_genres; end

    sig { returns(T::Boolean) }
    def saved_change_to_genres?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_giantbomb_ids; end

    sig { returns(T::Boolean) }
    def saved_change_to_giantbomb_ids?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_gog_ids; end

    sig { returns(T::Boolean) }
    def saved_change_to_gog_ids?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_igdb_ids; end

    sig { returns(T::Boolean) }
    def saved_change_to_igdb_ids?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_mobygames_ids; end

    sig { returns(T::Boolean) }
    def saved_change_to_mobygames_ids?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_pcgamingwiki_ids; end

    sig { returns(T::Boolean) }
    def saved_change_to_pcgamingwiki_ids?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_platform_versions; end

    sig { returns(T::Boolean) }
    def saved_change_to_platform_versions?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_platforms; end

    sig { returns(T::Boolean) }
    def saved_change_to_platforms?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_relationships; end

    sig { returns(T::Boolean) }
    def saved_change_to_relationships?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_series; end

    sig { returns(T::Boolean) }
    def saved_change_to_series?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_series_versions; end

    sig { returns(T::Boolean) }
    def saved_change_to_series_versions?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_steam_app_ids; end

    sig { returns(T::Boolean) }
    def saved_change_to_steam_app_ids?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_stores; end

    sig { returns(T::Boolean) }
    def saved_change_to_stores?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_unmatched_games; end

    sig { returns(T::Boolean) }
    def saved_change_to_unmatched_games?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_users; end

    sig { returns(T::Boolean) }
    def saved_change_to_users?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_wikidata_ids; end

    sig { returns(T::Boolean) }
    def saved_change_to_wikidata_ids?; end

    sig { returns(::Integer) }
    def series; end

    sig { params(value: ::Integer).returns(::Integer) }
    def series=(value); end

    sig { returns(T::Boolean) }
    def series?; end

    sig { returns(T.nilable(::Integer)) }
    def series_before_last_save; end

    sig { returns(T.untyped) }
    def series_before_type_cast; end

    sig { returns(T::Boolean) }
    def series_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def series_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def series_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def series_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def series_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def series_previous_change; end

    sig { returns(T::Boolean) }
    def series_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def series_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def series_versions; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def series_versions=(value); end

    sig { returns(T::Boolean) }
    def series_versions?; end

    sig { returns(T.nilable(::Integer)) }
    def series_versions_before_last_save; end

    sig { returns(T.untyped) }
    def series_versions_before_type_cast; end

    sig { returns(T::Boolean) }
    def series_versions_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def series_versions_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def series_versions_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def series_versions_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def series_versions_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def series_versions_previous_change; end

    sig { returns(T::Boolean) }
    def series_versions_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def series_versions_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def series_versions_was; end

    sig { void }
    def series_versions_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def series_was; end

    sig { void }
    def series_will_change!; end

    sig { returns(::Integer) }
    def steam_app_ids; end

    sig { params(value: ::Integer).returns(::Integer) }
    def steam_app_ids=(value); end

    sig { returns(T::Boolean) }
    def steam_app_ids?; end

    sig { returns(T.nilable(::Integer)) }
    def steam_app_ids_before_last_save; end

    sig { returns(T.untyped) }
    def steam_app_ids_before_type_cast; end

    sig { returns(T::Boolean) }
    def steam_app_ids_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def steam_app_ids_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def steam_app_ids_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def steam_app_ids_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def steam_app_ids_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def steam_app_ids_previous_change; end

    sig { returns(T::Boolean) }
    def steam_app_ids_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def steam_app_ids_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def steam_app_ids_was; end

    sig { void }
    def steam_app_ids_will_change!; end

    sig { returns(::Integer) }
    def stores; end

    sig { params(value: ::Integer).returns(::Integer) }
    def stores=(value); end

    sig { returns(T::Boolean) }
    def stores?; end

    sig { returns(T.nilable(::Integer)) }
    def stores_before_last_save; end

    sig { returns(T.untyped) }
    def stores_before_type_cast; end

    sig { returns(T::Boolean) }
    def stores_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def stores_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def stores_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def stores_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def stores_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def stores_previous_change; end

    sig { returns(T::Boolean) }
    def stores_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def stores_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def stores_was; end

    sig { void }
    def stores_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def unmatched_games; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def unmatched_games=(value); end

    sig { returns(T::Boolean) }
    def unmatched_games?; end

    sig { returns(T.nilable(::Integer)) }
    def unmatched_games_before_last_save; end

    sig { returns(T.untyped) }
    def unmatched_games_before_type_cast; end

    sig { returns(T::Boolean) }
    def unmatched_games_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def unmatched_games_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def unmatched_games_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def unmatched_games_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def unmatched_games_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def unmatched_games_previous_change; end

    sig { returns(T::Boolean) }
    def unmatched_games_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def unmatched_games_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def unmatched_games_was; end

    sig { void }
    def unmatched_games_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(::Integer) }
    def users; end

    sig { params(value: ::Integer).returns(::Integer) }
    def users=(value); end

    sig { returns(T::Boolean) }
    def users?; end

    sig { returns(T.nilable(::Integer)) }
    def users_before_last_save; end

    sig { returns(T.untyped) }
    def users_before_type_cast; end

    sig { returns(T::Boolean) }
    def users_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def users_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def users_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def users_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def users_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def users_previous_change; end

    sig { returns(T::Boolean) }
    def users_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def users_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def users_was; end

    sig { void }
    def users_will_change!; end

    sig { returns(::Integer) }
    def wikidata_ids; end

    sig { params(value: ::Integer).returns(::Integer) }
    def wikidata_ids=(value); end

    sig { returns(T::Boolean) }
    def wikidata_ids?; end

    sig { returns(T.nilable(::Integer)) }
    def wikidata_ids_before_last_save; end

    sig { returns(T.untyped) }
    def wikidata_ids_before_type_cast; end

    sig { returns(T::Boolean) }
    def wikidata_ids_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def wikidata_ids_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def wikidata_ids_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def wikidata_ids_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def wikidata_ids_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def wikidata_ids_previous_change; end

    sig { returns(T::Boolean) }
    def wikidata_ids_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def wikidata_ids_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def wikidata_ids_was; end

    sig { void }
    def wikidata_ids_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_banned_users?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_companies?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_company_versions?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_engine_versions?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_engines?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_epic_games_store_ids?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_events?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_game_purchases?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_game_versions?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_games?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_games_with_covers?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_games_with_release_dates?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_genre_versions?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_genres?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_giantbomb_ids?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_gog_ids?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_igdb_ids?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_mobygames_ids?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_pcgamingwiki_ids?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_platform_versions?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_platforms?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_relationships?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_series?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_series_versions?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_steam_app_ids?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_stores?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_unmatched_games?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_users?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_wikidata_ids?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(num: T.nilable(Integer)).returns(PrivateRelation) }
    def page(num = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Statistic } }

    sig { returns(T::Array[::Statistic]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Statistic } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Statistic } }

    sig do
      params(
        records: T.any(::Statistic, T::Enumerable[T.any(::Statistic, T::Enumerable[::Statistic])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Statistic, T::Enumerable[T.any(::Statistic, T::Enumerable[::Statistic])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Statistic, T::Enumerable[T.any(::Statistic, T::Enumerable[::Statistic])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::Statistic, Integer, String, T::Enumerable[T.any(::Statistic, Integer, String, T::Enumerable[::Statistic])])
      ).returns(T::Array[::Statistic])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::Statistic, Integer, String, T::Enumerable[T.any(::Statistic, Integer, String, T::Enumerable[::Statistic])])
      ).returns(T::Array[::Statistic])
    end
    def destroy(*records); end

    sig { returns(T::Array[::Statistic]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Statistic, T::Enumerable[T.any(::Statistic, T::Enumerable[::Statistic])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Statistic, T::Enumerable[T.any(::Statistic, T::Enumerable[::Statistic])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Statistic, T::Enumerable[T.any(::Statistic, T::Enumerable[::Statistic])])
      ).returns(T::Array[::Statistic])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Statistic]) }
    def target; end

    sig { returns(T::Array[::Statistic]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Statistic } }

    sig { returns(T::Array[::Statistic]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Statistic } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
