# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GamePurchase`.
# Please instead update this file by running `bin/tapioca dsl GamePurchase`.

class GamePurchase
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def completion_statuses; end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::GamePurchase).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::GamePurchase).void)
      ).returns(::GamePurchase)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::GamePurchase).void)
      ).returns(::GamePurchase)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::GamePurchase).void)
      ).returns(::GamePurchase)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::GamePurchase).void)
      ).returns(::GamePurchase)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::GamePurchase).void)
      ).returns(::GamePurchase)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::GamePurchase]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::GamePurchase)) }
    def fifth; end

    sig { returns(::GamePurchase) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::GamePurchase)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::GamePurchase) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::GamePurchase).void)
      ).returns(T.nilable(T::Enumerator[::GamePurchase]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::GamePurchase]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::GamePurchase]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::GamePurchase).void)
      ).returns(::GamePurchase)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::GamePurchase).void)
      ).returns(::GamePurchase)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::GamePurchase).void)
      ).returns(::GamePurchase)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::GamePurchase)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::GamePurchase) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::GamePurchase) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::GamePurchase) }
    def first!; end

    sig { returns(T.nilable(::GamePurchase)) }
    def forty_two; end

    sig { returns(::GamePurchase) }
    def forty_two!; end

    sig { returns(T.nilable(::GamePurchase)) }
    def fourth; end

    sig { returns(::GamePurchase) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::GamePurchase) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::GamePurchase).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::GamePurchase).void)
      ).returns(::GamePurchase)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::GamePurchase).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::GamePurchase).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::GamePurchase)) }
    def second; end

    sig { returns(::GamePurchase) }
    def second!; end

    sig { returns(T.nilable(::GamePurchase)) }
    def second_to_last; end

    sig { returns(::GamePurchase) }
    def second_to_last!; end

    sig { returns(::GamePurchase) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::GamePurchase) }
    def take!; end

    sig { returns(T.nilable(::GamePurchase)) }
    def third; end

    sig { returns(::GamePurchase) }
    def third!; end

    sig { returns(T.nilable(::GamePurchase)) }
    def third_to_last; end

    sig { returns(::GamePurchase) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def completed!; end

    sig { returns(T::Boolean) }
    def completed?; end

    sig { void }
    def dropped!; end

    sig { returns(T::Boolean) }
    def dropped?; end

    sig { void }
    def fully_completed!; end

    sig { returns(T::Boolean) }
    def fully_completed?; end

    sig { void }
    def in_progress!; end

    sig { returns(T::Boolean) }
    def in_progress?; end

    sig { void }
    def not_applicable!; end

    sig { returns(T::Boolean) }
    def not_applicable?; end

    sig { void }
    def paused!; end

    sig { returns(T::Boolean) }
    def paused?; end

    sig { void }
    def unplayed!; end

    sig { returns(T::Boolean) }
    def unplayed?; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::Game) }
    def build_game(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Game) }
    def create_game(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Game) }
    def create_game!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user!(*args, &blk); end

    sig { returns(T.nilable(::Game)) }
    def game; end

    sig { params(value: T.nilable(::Game)).void }
    def game=(value); end

    sig { returns(T::Array[T.untyped]) }
    def game_purchase_event_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def game_purchase_event_ids=(ids); end

    # This method is created by ActiveRecord on the `GamePurchase` class because it declared `has_many :game_purchase_events`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Events::GamePurchaseEvent::PrivateCollectionProxy) }
    def game_purchase_events; end

    sig { params(value: T::Enumerable[::Events::GamePurchaseEvent]).void }
    def game_purchase_events=(value); end

    sig { returns(T::Array[T.untyped]) }
    def game_purchase_platform_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def game_purchase_platform_ids=(ids); end

    # This method is created by ActiveRecord on the `GamePurchase` class because it declared `has_many :game_purchase_platforms`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::GamePurchasePlatform::PrivateCollectionProxy) }
    def game_purchase_platforms; end

    sig { params(value: T::Enumerable[::GamePurchasePlatform]).void }
    def game_purchase_platforms=(value); end

    sig { returns(T::Array[T.untyped]) }
    def game_purchase_store_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def game_purchase_store_ids=(ids); end

    # This method is created by ActiveRecord on the `GamePurchase` class because it declared `has_many :game_purchase_stores`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::GamePurchaseStore::PrivateCollectionProxy) }
    def game_purchase_stores; end

    sig { params(value: T::Enumerable[::GamePurchaseStore]).void }
    def game_purchase_stores=(value); end

    sig { returns(T::Array[T.untyped]) }
    def platform_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def platform_ids=(ids); end

    # This method is created by ActiveRecord on the `GamePurchase` class because it declared `has_many :platforms, through: :game_purchase_platforms`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Platform::PrivateCollectionProxy) }
    def platforms; end

    sig { params(value: T::Enumerable[::Platform]).void }
    def platforms=(value); end

    sig { returns(T.nilable(::Game)) }
    def reload_game; end

    sig { returns(T.nilable(::User)) }
    def reload_user; end

    sig { returns(T::Array[T.untyped]) }
    def store_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def store_ids=(ids); end

    # This method is created by ActiveRecord on the `GamePurchase` class because it declared `has_many :stores, through: :game_purchase_stores`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Store::PrivateCollectionProxy) }
    def stores; end

    sig { params(value: T::Enumerable[::Store]).void }
    def stores=(value); end

    sig { returns(T.nilable(::User)) }
    def user; end

    sig { params(value: T.nilable(::User)).void }
    def user=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def completed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def dropped(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def fully_completed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_progress(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_applicable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_completed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_dropped(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_fully_completed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_in_progress(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_not_applicable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_paused(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_unplayed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def paused(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unplayed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(::String) }
    def comments; end

    sig { params(value: ::String).returns(::String) }
    def comments=(value); end

    sig { returns(T::Boolean) }
    def comments?; end

    sig { returns(T.nilable(::String)) }
    def comments_before_last_save; end

    sig { returns(T.untyped) }
    def comments_before_type_cast; end

    sig { returns(T::Boolean) }
    def comments_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def comments_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def comments_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def comments_changed?; end

    sig { returns(T.nilable(::String)) }
    def comments_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def comments_previous_change; end

    sig { returns(T::Boolean) }
    def comments_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def comments_previously_was; end

    sig { returns(T.nilable(::String)) }
    def comments_was; end

    sig { void }
    def comments_will_change!; end

    sig { returns(T.nilable(::Date)) }
    def completion_date; end

    sig { params(value: T.nilable(::Date)).returns(T.nilable(::Date)) }
    def completion_date=(value); end

    sig { returns(T::Boolean) }
    def completion_date?; end

    sig { returns(T.nilable(::Date)) }
    def completion_date_before_last_save; end

    sig { returns(T.untyped) }
    def completion_date_before_type_cast; end

    sig { returns(T::Boolean) }
    def completion_date_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def completion_date_change; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def completion_date_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def completion_date_changed?; end

    sig { returns(T.nilable(::Date)) }
    def completion_date_in_database; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def completion_date_previous_change; end

    sig { returns(T::Boolean) }
    def completion_date_previously_changed?; end

    sig { returns(T.nilable(::Date)) }
    def completion_date_previously_was; end

    sig { returns(T.nilable(::Date)) }
    def completion_date_was; end

    sig { void }
    def completion_date_will_change!; end

    sig { returns(T.nilable(::String)) }
    def completion_status; end

    sig do
      params(
        value: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T.nilable(T.any(::String, ::Symbol, ::Integer)))
    end
    def completion_status=(value); end

    sig { returns(T::Boolean) }
    def completion_status?; end

    sig { returns(T.nilable(::String)) }
    def completion_status_before_last_save; end

    sig { returns(T.untyped) }
    def completion_status_before_type_cast; end

    sig { returns(T::Boolean) }
    def completion_status_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def completion_status_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def completion_status_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def completion_status_changed?; end

    sig { returns(T.nilable(::String)) }
    def completion_status_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def completion_status_previous_change; end

    sig { returns(T::Boolean) }
    def completion_status_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def completion_status_previously_was; end

    sig { returns(T.nilable(::String)) }
    def completion_status_was; end

    sig { void }
    def completion_status_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(::Integer) }
    def game_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def game_id=(value); end

    sig { returns(T::Boolean) }
    def game_id?; end

    sig { returns(T.nilable(::Integer)) }
    def game_id_before_last_save; end

    sig { returns(T.untyped) }
    def game_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def game_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def game_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def game_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def game_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def game_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def game_id_previous_change; end

    sig { returns(T::Boolean) }
    def game_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def game_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def game_id_was; end

    sig { void }
    def game_id_will_change!; end

    sig { returns(T.nilable(::BigDecimal)) }
    def hours_played; end

    sig { params(value: T.nilable(::BigDecimal)).returns(T.nilable(::BigDecimal)) }
    def hours_played=(value); end

    sig { returns(T::Boolean) }
    def hours_played?; end

    sig { returns(T.nilable(::BigDecimal)) }
    def hours_played_before_last_save; end

    sig { returns(T.untyped) }
    def hours_played_before_type_cast; end

    sig { returns(T::Boolean) }
    def hours_played_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def hours_played_change; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def hours_played_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def hours_played_changed?; end

    sig { returns(T.nilable(::BigDecimal)) }
    def hours_played_in_database; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def hours_played_previous_change; end

    sig { returns(T::Boolean) }
    def hours_played_previously_changed?; end

    sig { returns(T.nilable(::BigDecimal)) }
    def hours_played_previously_was; end

    sig { returns(T.nilable(::BigDecimal)) }
    def hours_played_was; end

    sig { void }
    def hours_played_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def rating; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def rating=(value); end

    sig { returns(T::Boolean) }
    def rating?; end

    sig { returns(T.nilable(::Integer)) }
    def rating_before_last_save; end

    sig { returns(T.untyped) }
    def rating_before_type_cast; end

    sig { returns(T::Boolean) }
    def rating_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def rating_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def rating_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def rating_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def rating_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def rating_previous_change; end

    sig { returns(T::Boolean) }
    def rating_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def rating_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def rating_was; end

    sig { void }
    def rating_will_change!; end

    sig { returns(::Integer) }
    def replay_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def replay_count=(value); end

    sig { returns(T::Boolean) }
    def replay_count?; end

    sig { returns(T.nilable(::Integer)) }
    def replay_count_before_last_save; end

    sig { returns(T.untyped) }
    def replay_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def replay_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def replay_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def replay_count_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def replay_count_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def replay_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def replay_count_previous_change; end

    sig { returns(T::Boolean) }
    def replay_count_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def replay_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def replay_count_was; end

    sig { void }
    def replay_count_will_change!; end

    sig { void }
    def restore_comments!; end

    sig { void }
    def restore_completion_date!; end

    sig { void }
    def restore_completion_status!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_game_id!; end

    sig { void }
    def restore_hours_played!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_rating!; end

    sig { void }
    def restore_replay_count!; end

    sig { void }
    def restore_start_date!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_user_id!; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_comments; end

    sig { returns(T::Boolean) }
    def saved_change_to_comments?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def saved_change_to_completion_date; end

    sig { returns(T::Boolean) }
    def saved_change_to_completion_date?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_completion_status; end

    sig { returns(T::Boolean) }
    def saved_change_to_completion_status?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_game_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_game_id?; end

    sig { returns(T.nilable([T.nilable(::BigDecimal), T.nilable(::BigDecimal)])) }
    def saved_change_to_hours_played; end

    sig { returns(T::Boolean) }
    def saved_change_to_hours_played?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_rating; end

    sig { returns(T::Boolean) }
    def saved_change_to_rating?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_replay_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_replay_count?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def saved_change_to_start_date; end

    sig { returns(T::Boolean) }
    def saved_change_to_start_date?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_user_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_user_id?; end

    sig { returns(T.nilable(::Date)) }
    def start_date; end

    sig { params(value: T.nilable(::Date)).returns(T.nilable(::Date)) }
    def start_date=(value); end

    sig { returns(T::Boolean) }
    def start_date?; end

    sig { returns(T.nilable(::Date)) }
    def start_date_before_last_save; end

    sig { returns(T.untyped) }
    def start_date_before_type_cast; end

    sig { returns(T::Boolean) }
    def start_date_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def start_date_change; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def start_date_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def start_date_changed?; end

    sig { returns(T.nilable(::Date)) }
    def start_date_in_database; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def start_date_previous_change; end

    sig { returns(T::Boolean) }
    def start_date_previously_changed?; end

    sig { returns(T.nilable(::Date)) }
    def start_date_previously_was; end

    sig { returns(T.nilable(::Date)) }
    def start_date_was; end

    sig { void }
    def start_date_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(::Integer) }
    def user_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def user_id=(value); end

    sig { returns(T::Boolean) }
    def user_id?; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_before_last_save; end

    sig { returns(T.untyped) }
    def user_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def user_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def user_id_previous_change; end

    sig { returns(T::Boolean) }
    def user_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_was; end

    sig { void }
    def user_id_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_comments?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_completion_date?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_completion_status?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_game_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_hours_played?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_rating?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_replay_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_start_date?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_user_id?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def completed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def dropped(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def fully_completed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_progress(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_applicable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_completed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_dropped(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_fully_completed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_in_progress(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_not_applicable(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_paused(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_unplayed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(num: T.nilable(Integer)).returns(PrivateRelation) }
    def page(num = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def paused(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unplayed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::GamePurchase } }

    sig { returns(T::Array[::GamePurchase]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::GamePurchase } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::GamePurchase } }

    sig do
      params(
        records: T.any(::GamePurchase, T::Enumerable[T.any(::GamePurchase, T::Enumerable[::GamePurchase])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::GamePurchase, T::Enumerable[T.any(::GamePurchase, T::Enumerable[::GamePurchase])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::GamePurchase, T::Enumerable[T.any(::GamePurchase, T::Enumerable[::GamePurchase])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::GamePurchase, Integer, String, T::Enumerable[T.any(::GamePurchase, Integer, String, T::Enumerable[::GamePurchase])])
      ).returns(T::Array[::GamePurchase])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::GamePurchase, Integer, String, T::Enumerable[T.any(::GamePurchase, Integer, String, T::Enumerable[::GamePurchase])])
      ).returns(T::Array[::GamePurchase])
    end
    def destroy(*records); end

    sig { returns(T::Array[::GamePurchase]) }
    def load_target; end

    sig do
      params(
        records: T.any(::GamePurchase, T::Enumerable[T.any(::GamePurchase, T::Enumerable[::GamePurchase])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::GamePurchase, T::Enumerable[T.any(::GamePurchase, T::Enumerable[::GamePurchase])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::GamePurchase, T::Enumerable[T.any(::GamePurchase, T::Enumerable[::GamePurchase])])
      ).returns(T::Array[::GamePurchase])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::GamePurchase]) }
    def target; end

    sig { returns(T::Array[::GamePurchase]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::GamePurchase } }

    sig { returns(T::Array[::GamePurchase]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::GamePurchase } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
