# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Game`.
# Please instead update this file by running `bin/tapioca dsl Game`.

class Game
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  sig { returns(ActiveStorage::Attached::One) }
  def cover; end

  sig { params(attachable: T.untyped).returns(T.untyped) }
  def cover=(attachable); end

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { params(args: T.untyped).returns(T.untyped) }
    def search(*args); end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Game).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Game).void)).returns(::Game) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Game).void)).returns(::Game) }
    def create(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Game).void)).returns(::Game) }
    def create!(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Game).void)).returns(::Game) }
    def create_or_find_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Game).void)).returns(::Game) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Game]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Game)) }
    def fifth; end

    sig { returns(::Game) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Game)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Game) }
    def find_by!(*args); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Game).void)).returns(::Game) }
    def find_or_create_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Game).void)).returns(::Game) }
    def find_or_create_by!(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Game).void)).returns(::Game) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Game) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Game) }
    def first!; end

    sig { returns(T.nilable(::Game)) }
    def forty_two; end

    sig { returns(::Game) }
    def forty_two!; end

    sig { returns(T.nilable(::Game)) }
    def fourth; end

    sig { returns(::Game) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Game) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Game).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Game).void)).returns(::Game) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Game).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Game).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Game)) }
    def second; end

    sig { returns(::Game) }
    def second!; end

    sig { returns(T.nilable(::Game)) }
    def second_to_last; end

    sig { returns(::Game) }
    def second_to_last!; end

    sig { returns(::Game) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Game) }
    def take!; end

    sig { returns(T.nilable(::Game)) }
    def third; end

    sig { returns(::Game) }
    def third!; end

    sig { returns(T.nilable(::Game)) }
    def third_to_last; end

    sig { returns(::Game) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Attachment) }
    def build_cover_attachment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Blob) }
    def build_cover_blob(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PgSearch::Document) }
    def build_pg_search_document(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Series) }
    def build_series(*args, &blk); end

    sig { returns(T.nilable(::ActiveStorage::Attachment)) }
    def cover_attachment; end

    sig { params(value: T.nilable(::ActiveStorage::Attachment)).void }
    def cover_attachment=(value); end

    sig { returns(T.nilable(::ActiveStorage::Blob)) }
    def cover_blob; end

    sig { params(value: T.nilable(::ActiveStorage::Blob)).void }
    def cover_blob=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Attachment) }
    def create_cover_attachment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Attachment) }
    def create_cover_attachment!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Blob) }
    def create_cover_blob(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Blob) }
    def create_cover_blob!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PgSearch::Document) }
    def create_pg_search_document(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::PgSearch::Document) }
    def create_pg_search_document!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Series) }
    def create_series(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Series) }
    def create_series!(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def developer_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def developer_ids=(ids); end

    sig { returns(::Company::PrivateCollectionProxy) }
    def developers; end

    sig { params(value: T::Enumerable[::Company]).void }
    def developers=(value); end

    sig { returns(T::Array[T.untyped]) }
    def engine_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def engine_ids=(ids); end

    sig { returns(::Engine::PrivateCollectionProxy) }
    def engines; end

    sig { params(value: T::Enumerable[::Engine]).void }
    def engines=(value); end

    sig { returns(T::Array[T.untyped]) }
    def favorite_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def favorite_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def favoriter_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def favoriter_ids=(ids); end

    sig { returns(::User::PrivateCollectionProxy) }
    def favoriters; end

    sig { params(value: T::Enumerable[::User]).void }
    def favoriters=(value); end

    sig { returns(::FavoriteGame::PrivateCollectionProxy) }
    def favorites; end

    sig { params(value: T::Enumerable[::FavoriteGame]).void }
    def favorites=(value); end

    sig { returns(T::Array[T.untyped]) }
    def game_developer_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def game_developer_ids=(ids); end

    sig { returns(::GameDeveloper::PrivateCollectionProxy) }
    def game_developers; end

    sig { params(value: T::Enumerable[::GameDeveloper]).void }
    def game_developers=(value); end

    sig { returns(T::Array[T.untyped]) }
    def game_engine_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def game_engine_ids=(ids); end

    sig { returns(::GameEngine::PrivateCollectionProxy) }
    def game_engines; end

    sig { params(value: T::Enumerable[::GameEngine]).void }
    def game_engines=(value); end

    sig { returns(T::Array[T.untyped]) }
    def game_genre_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def game_genre_ids=(ids); end

    sig { returns(::GameGenre::PrivateCollectionProxy) }
    def game_genres; end

    sig { params(value: T::Enumerable[::GameGenre]).void }
    def game_genres=(value); end

    sig { returns(T::Array[T.untyped]) }
    def game_platform_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def game_platform_ids=(ids); end

    sig { returns(::GamePlatform::PrivateCollectionProxy) }
    def game_platforms; end

    sig { params(value: T::Enumerable[::GamePlatform]).void }
    def game_platforms=(value); end

    sig { returns(T::Array[T.untyped]) }
    def game_publisher_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def game_publisher_ids=(ids); end

    sig { returns(::GamePublisher::PrivateCollectionProxy) }
    def game_publishers; end

    sig { params(value: T::Enumerable[::GamePublisher]).void }
    def game_publishers=(value); end

    sig { returns(T::Array[T.untyped]) }
    def game_purchase_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def game_purchase_ids=(ids); end

    sig { returns(::GamePurchase::PrivateCollectionProxy) }
    def game_purchases; end

    sig { params(value: T::Enumerable[::GamePurchase]).void }
    def game_purchases=(value); end

    sig { returns(T::Array[T.untyped]) }
    def genre_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def genre_ids=(ids); end

    sig { returns(::Genre::PrivateCollectionProxy) }
    def genres; end

    sig { params(value: T::Enumerable[::Genre]).void }
    def genres=(value); end

    sig { returns(T.nilable(::PgSearch::Document)) }
    def pg_search_document; end

    sig { params(value: T.nilable(::PgSearch::Document)).void }
    def pg_search_document=(value); end

    sig { returns(T::Array[T.untyped]) }
    def platform_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def platform_ids=(ids); end

    sig { returns(::Platform::PrivateCollectionProxy) }
    def platforms; end

    sig { params(value: T::Enumerable[::Platform]).void }
    def platforms=(value); end

    sig { returns(T::Array[T.untyped]) }
    def publisher_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def publisher_ids=(ids); end

    sig { returns(::Company::PrivateCollectionProxy) }
    def publishers; end

    sig { params(value: T::Enumerable[::Company]).void }
    def publishers=(value); end

    sig { returns(T::Array[T.untyped]) }
    def purchaser_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def purchaser_ids=(ids); end

    sig { returns(::User::PrivateCollectionProxy) }
    def purchasers; end

    sig { params(value: T::Enumerable[::User]).void }
    def purchasers=(value); end

    sig { returns(T.nilable(::ActiveStorage::Attachment)) }
    def reload_cover_attachment; end

    sig { returns(T.nilable(::ActiveStorage::Blob)) }
    def reload_cover_blob; end

    sig { returns(T.nilable(::PgSearch::Document)) }
    def reload_pg_search_document; end

    sig { returns(T.nilable(::Series)) }
    def reload_series; end

    sig { returns(T.nilable(::Series)) }
    def series; end

    sig { params(value: T.nilable(::Series)).void }
    def series=(value); end

    sig { returns(T::Array[T.untyped]) }
    def steam_app_id_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def steam_app_id_ids=(ids); end

    sig { returns(::SteamAppId::PrivateCollectionProxy) }
    def steam_app_ids; end

    sig { params(value: T::Enumerable[::SteamAppId]).void }
    def steam_app_ids=(value); end

    sig { params(attributes: T.untyped).returns(T.untyped) }
    def steam_app_ids_attributes=(attributes); end

    sig { returns(T::Array[T.untyped]) }
    def version_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def version_ids=(ids); end

    sig { returns(::Versions::GameVersion::PrivateCollectionProxy) }
    def versions; end

    sig { params(value: T::Enumerable[::Versions::GameVersion]).void }
    def versions=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def by_engine(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def by_genre(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def by_year(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def highest_avg_rating(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def least_recently_updated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def most_favorites(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def most_owners(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def newest(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def oldest(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def on_platform(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def recently_released(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def recently_updated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_attached_cover(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::Float)) }
    def avg_rating; end

    sig { params(value: T.nilable(::Float)).returns(T.nilable(::Float)) }
    def avg_rating=(value); end

    sig { returns(T::Boolean) }
    def avg_rating?; end

    sig { returns(T.nilable(::Float)) }
    def avg_rating_before_last_save; end

    sig { returns(T.untyped) }
    def avg_rating_before_type_cast; end

    sig { returns(T::Boolean) }
    def avg_rating_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def avg_rating_change; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def avg_rating_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def avg_rating_changed?; end

    sig { returns(T.nilable(::Float)) }
    def avg_rating_in_database; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def avg_rating_previous_change; end

    sig { returns(T::Boolean) }
    def avg_rating_previously_changed?; end

    sig { returns(T.nilable(::Float)) }
    def avg_rating_previously_was; end

    sig { returns(T.nilable(::Float)) }
    def avg_rating_was; end

    sig { void }
    def avg_rating_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def epic_games_store_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def epic_games_store_id=(value); end

    sig { returns(T::Boolean) }
    def epic_games_store_id?; end

    sig { returns(T.nilable(::String)) }
    def epic_games_store_id_before_last_save; end

    sig { returns(T.untyped) }
    def epic_games_store_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def epic_games_store_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def epic_games_store_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def epic_games_store_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def epic_games_store_id_changed?; end

    sig { returns(T.nilable(::String)) }
    def epic_games_store_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def epic_games_store_id_previous_change; end

    sig { returns(T::Boolean) }
    def epic_games_store_id_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def epic_games_store_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def epic_games_store_id_was; end

    sig { void }
    def epic_games_store_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def giantbomb_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def giantbomb_id=(value); end

    sig { returns(T::Boolean) }
    def giantbomb_id?; end

    sig { returns(T.nilable(::String)) }
    def giantbomb_id_before_last_save; end

    sig { returns(T.untyped) }
    def giantbomb_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def giantbomb_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def giantbomb_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def giantbomb_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def giantbomb_id_changed?; end

    sig { returns(T.nilable(::String)) }
    def giantbomb_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def giantbomb_id_previous_change; end

    sig { returns(T::Boolean) }
    def giantbomb_id_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def giantbomb_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def giantbomb_id_was; end

    sig { void }
    def giantbomb_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def gog_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def gog_id=(value); end

    sig { returns(T::Boolean) }
    def gog_id?; end

    sig { returns(T.nilable(::String)) }
    def gog_id_before_last_save; end

    sig { returns(T.untyped) }
    def gog_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def gog_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def gog_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def gog_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def gog_id_changed?; end

    sig { returns(T.nilable(::String)) }
    def gog_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def gog_id_previous_change; end

    sig { returns(T::Boolean) }
    def gog_id_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def gog_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def gog_id_was; end

    sig { void }
    def gog_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def igdb_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def igdb_id=(value); end

    sig { returns(T::Boolean) }
    def igdb_id?; end

    sig { returns(T.nilable(::String)) }
    def igdb_id_before_last_save; end

    sig { returns(T.untyped) }
    def igdb_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def igdb_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def igdb_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def igdb_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def igdb_id_changed?; end

    sig { returns(T.nilable(::String)) }
    def igdb_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def igdb_id_previous_change; end

    sig { returns(T::Boolean) }
    def igdb_id_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def igdb_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def igdb_id_was; end

    sig { void }
    def igdb_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def mobygames_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def mobygames_id=(value); end

    sig { returns(T::Boolean) }
    def mobygames_id?; end

    sig { returns(T.nilable(::String)) }
    def mobygames_id_before_last_save; end

    sig { returns(T.untyped) }
    def mobygames_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def mobygames_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def mobygames_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def mobygames_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def mobygames_id_changed?; end

    sig { returns(T.nilable(::String)) }
    def mobygames_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def mobygames_id_previous_change; end

    sig { returns(T::Boolean) }
    def mobygames_id_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def mobygames_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def mobygames_id_was; end

    sig { void }
    def mobygames_id_will_change!; end

    sig { returns(::String) }
    def name; end

    sig { params(value: ::String).returns(::String) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.nilable(::String)) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def name_changed?; end

    sig { returns(T.nilable(::String)) }
    def name_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_previous_change; end

    sig { returns(T::Boolean) }
    def name_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { returns(T.nilable(::String)) }
    def pcgamingwiki_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def pcgamingwiki_id=(value); end

    sig { returns(T::Boolean) }
    def pcgamingwiki_id?; end

    sig { returns(T.nilable(::String)) }
    def pcgamingwiki_id_before_last_save; end

    sig { returns(T.untyped) }
    def pcgamingwiki_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def pcgamingwiki_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def pcgamingwiki_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def pcgamingwiki_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def pcgamingwiki_id_changed?; end

    sig { returns(T.nilable(::String)) }
    def pcgamingwiki_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def pcgamingwiki_id_previous_change; end

    sig { returns(T::Boolean) }
    def pcgamingwiki_id_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def pcgamingwiki_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def pcgamingwiki_id_was; end

    sig { void }
    def pcgamingwiki_id_will_change!; end

    sig { returns(T.nilable(::Date)) }
    def release_date; end

    sig { params(value: T.nilable(::Date)).returns(T.nilable(::Date)) }
    def release_date=(value); end

    sig { returns(T::Boolean) }
    def release_date?; end

    sig { returns(T.nilable(::Date)) }
    def release_date_before_last_save; end

    sig { returns(T.untyped) }
    def release_date_before_type_cast; end

    sig { returns(T::Boolean) }
    def release_date_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def release_date_change; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def release_date_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def release_date_changed?; end

    sig { returns(T.nilable(::Date)) }
    def release_date_in_database; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def release_date_previous_change; end

    sig { returns(T::Boolean) }
    def release_date_previously_changed?; end

    sig { returns(T.nilable(::Date)) }
    def release_date_previously_was; end

    sig { returns(T.nilable(::Date)) }
    def release_date_was; end

    sig { void }
    def release_date_will_change!; end

    sig { void }
    def restore_avg_rating!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_epic_games_store_id!; end

    sig { void }
    def restore_giantbomb_id!; end

    sig { void }
    def restore_gog_id!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_igdb_id!; end

    sig { void }
    def restore_mobygames_id!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_pcgamingwiki_id!; end

    sig { void }
    def restore_release_date!; end

    sig { void }
    def restore_series_id!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_wikidata_id!; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def saved_change_to_avg_rating; end

    sig { returns(T::Boolean) }
    def saved_change_to_avg_rating?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_epic_games_store_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_epic_games_store_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_giantbomb_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_giantbomb_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_gog_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_gog_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_igdb_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_igdb_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_mobygames_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_mobygames_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_name?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_pcgamingwiki_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_pcgamingwiki_id?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def saved_change_to_release_date; end

    sig { returns(T::Boolean) }
    def saved_change_to_release_date?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_series_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_series_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_wikidata_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_wikidata_id?; end

    sig { returns(T.nilable(::Integer)) }
    def series_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def series_id=(value); end

    sig { returns(T::Boolean) }
    def series_id?; end

    sig { returns(T.nilable(::Integer)) }
    def series_id_before_last_save; end

    sig { returns(T.untyped) }
    def series_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def series_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def series_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def series_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def series_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def series_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def series_id_previous_change; end

    sig { returns(T::Boolean) }
    def series_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def series_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def series_id_was; end

    sig { void }
    def series_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def wikidata_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def wikidata_id=(value); end

    sig { returns(T::Boolean) }
    def wikidata_id?; end

    sig { returns(T.nilable(::Integer)) }
    def wikidata_id_before_last_save; end

    sig { returns(T.untyped) }
    def wikidata_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def wikidata_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def wikidata_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def wikidata_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def wikidata_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def wikidata_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def wikidata_id_previous_change; end

    sig { returns(T::Boolean) }
    def wikidata_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def wikidata_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def wikidata_id_was; end

    sig { void }
    def wikidata_id_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_avg_rating?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_epic_games_store_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_giantbomb_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_gog_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_igdb_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_mobygames_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_pcgamingwiki_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_release_date?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_series_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_wikidata_id?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def by_engine(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def by_genre(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def by_year(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def highest_avg_rating(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def least_recently_updated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def most_favorites(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def most_owners(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def newest(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def oldest(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def on_platform(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(num: T.nilable(Integer)).returns(PrivateRelation) }
    def page(num = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def recently_released(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def recently_updated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_attached_cover(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Game } }

    sig { returns(T::Array[::Game]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Game } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Game } }

    sig do
      params(
        records: T.any(::Game, T::Enumerable[T.any(::Game, T::Enumerable[::Game])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Game, T::Enumerable[T.any(::Game, T::Enumerable[::Game])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Game, T::Enumerable[T.any(::Game, T::Enumerable[::Game])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::Game, Integer, String, T::Enumerable[T.any(::Game, Integer, String, T::Enumerable[::Game])])
      ).returns(T::Array[::Game])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::Game, Integer, String, T::Enumerable[T.any(::Game, Integer, String, T::Enumerable[::Game])])
      ).returns(T::Array[::Game])
    end
    def destroy(*records); end

    sig { returns(T::Array[::Game]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Game, T::Enumerable[T.any(::Game, T::Enumerable[::Game])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Game, T::Enumerable[T.any(::Game, T::Enumerable[::Game])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Game, T::Enumerable[T.any(::Game, T::Enumerable[::Game])])
      ).returns(T::Array[::Game])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Game]) }
    def target; end

    sig { returns(T::Array[::Game]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Game } }

    sig { returns(T::Array[::Game]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Game } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
