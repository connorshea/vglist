# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sentry-rails` gem.
# Please instead update this file by running `bin/tapioca gem sentry-rails`.

module Sentry
  class << self
    def add_breadcrumb(breadcrumb, **options); end
    def apply_patches(config); end
    def background_worker; end
    def background_worker=(_arg0); end
    def capture_event(event); end
    def capture_exception(exception, **options, &block); end
    def capture_message(message, **options, &block); end
    def clone_hub_to_current_thread; end
    def configuration; end
    def configure_scope(&block); end
    def csp_report_uri; end
    def exception_captured?(exc); end
    def exception_locals_tp; end
    def get_current_client; end
    def get_current_hub; end
    def get_current_scope; end
    def get_main_hub; end
    def init(&block); end
    def initialized?; end
    def integrations; end
    def last_event_id; end
    def logger; end
    def railtie_helpers_paths; end
    def railtie_namespace; end
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end
    def register_integration(name, version); end
    def register_patch(&block); end
    def registered_patches; end
    def sdk_meta; end
    def send_event(*args); end
    def set_context(*args); end
    def set_extras(*args); end
    def set_tags(*args); end
    def set_user(*args); end
    def start_transaction(**options); end
    def sys_command(command); end
    def table_name_prefix; end
    def use_relative_model_naming?; end
    def utc_now; end
    def with_scope(&block); end
  end
end

Sentry::CAPTURED_SIGNATURE = T.let(T.unsafe(nil), Symbol)

class Sentry::Configuration
  include ::Sentry::CustomInspection
  include ::Sentry::LoggingHelper

  def initialize; end

  def app_dirs_pattern; end
  def app_dirs_pattern=(_arg0); end
  def async; end
  def async=(value); end
  def background_worker_threads; end
  def background_worker_threads=(_arg0); end
  def backtrace_cleanup_callback; end
  def backtrace_cleanup_callback=(_arg0); end
  def before_breadcrumb; end
  def before_breadcrumb=(value); end
  def before_send; end
  def before_send=(value); end
  def breadcrumbs_logger; end
  def breadcrumbs_logger=(logger); end
  def capture_exception_frame_locals; end
  def capture_exception_frame_locals=(_arg0); end
  def context_lines; end
  def context_lines=(_arg0); end
  def csp_report_uri; end
  def debug; end
  def debug=(_arg0); end
  def detect_release; end
  def dsn; end
  def dsn=(value); end
  def enabled_environments; end
  def enabled_environments=(_arg0); end
  def enabled_in_current_env?; end
  def environment; end
  def environment=(environment); end
  def error_messages; end
  def errors; end
  def exception_class_allowed?(exc); end
  def exclude_loggers; end
  def exclude_loggers=(_arg0); end
  def excluded_exceptions; end
  def excluded_exceptions=(_arg0); end
  def gem_specs; end
  def inspect_exception_causes_for_exclusion; end
  def inspect_exception_causes_for_exclusion=(_arg0); end
  def inspect_exception_causes_for_exclusion?; end
  def linecache; end
  def linecache=(_arg0); end
  def logger; end
  def logger=(_arg0); end
  def max_breadcrumbs; end
  def max_breadcrumbs=(_arg0); end
  def project_root; end
  def project_root=(_arg0); end
  def propagate_traces; end
  def propagate_traces=(_arg0); end
  def rack_env_whitelist; end
  def rack_env_whitelist=(_arg0); end
  def rails; end
  def release; end
  def release=(_arg0); end
  def sample_allowed?; end
  def sample_rate; end
  def sample_rate=(_arg0); end
  def send_client_reports; end
  def send_client_reports=(_arg0); end
  def send_default_pii; end
  def send_default_pii=(_arg0); end
  def send_modules; end
  def send_modules=(_arg0); end
  def sending_allowed?; end
  def server=(value); end
  def server_name; end
  def server_name=(_arg0); end
  def skip_rake_integration; end
  def skip_rake_integration=(_arg0); end
  def stacktrace_builder; end
  def traces_sample_rate; end
  def traces_sample_rate=(_arg0); end
  def traces_sampler; end
  def traces_sampler=(_arg0); end
  def tracing_enabled?; end
  def transport; end
  def trusted_proxies; end
  def trusted_proxies=(_arg0); end

  private

  def capture_in_environment?; end
  def check_callable!(name, value); end
  def environment_from_env; end
  def excluded_exception?(incoming_exception); end
  def excluded_exception_classes; end
  def get_exception_class(x); end
  def init_dsn(dsn_string); end
  def matches_exception?(excluded_exception_class, incoming_exception); end
  def run_post_initialization_callbacks; end
  def running_on_heroku?; end
  def safe_const_get(x); end
  def server_name_from_env; end
  def valid?; end

  class << self
    def add_post_initialization_callback(&block); end
    def post_initialization_callbacks; end
  end
end

Sentry::Configuration::HEROKU_DYNO_METADATA_MESSAGE = T.let(T.unsafe(nil), String)
Sentry::Configuration::IGNORE_DEFAULT = T.let(T.unsafe(nil), Array)
Sentry::Configuration::LOG_PREFIX = T.let(T.unsafe(nil), String)
Sentry::Configuration::MODULE_SEPARATOR = T.let(T.unsafe(nil), String)
Sentry::Configuration::RACK_ENV_WHITELIST_DEFAULT = T.let(T.unsafe(nil), Array)
Sentry::Configuration::SKIP_INSPECTION_ATTRIBUTES = T.let(T.unsafe(nil), Array)
class Sentry::Engine < ::Rails::Engine; end
Sentry::LOGGER_PROGNAME = T.let(T.unsafe(nil), String)
Sentry::META = T.let(T.unsafe(nil), Hash)

module Sentry::Rails
  extend ::Sentry::Integrable
end

class Sentry::Rails::BacktraceCleaner < ::ActiveSupport::BacktraceCleaner
  def initialize; end
end

Sentry::Rails::BacktraceCleaner::APP_DIRS_PATTERN = T.let(T.unsafe(nil), Regexp)
Sentry::Rails::BacktraceCleaner::RENDER_TEMPLATE_PATTERN = T.let(T.unsafe(nil), Regexp)

class Sentry::Rails::CaptureExceptions < ::Sentry::Rack::CaptureExceptions
  def initialize(app); end

  private

  def capture_exception(exception); end
  def collect_exception(env); end
  def start_transaction(env, scope); end
  def transaction_op; end
end

class Sentry::Rails::Configuration
  def initialize; end

  def report_rescued_exceptions; end
  def report_rescued_exceptions=(_arg0); end
  def skippable_job_adapters; end
  def skippable_job_adapters=(_arg0); end
  def tracing_subscribers; end
  def tracing_subscribers=(_arg0); end
end

Sentry::Rails::IGNORE_DEFAULT = T.let(T.unsafe(nil), Array)

module Sentry::Rails::InstrumentPayloadCleanupHelper
  def cleanup_data(data); end
end

Sentry::Rails::InstrumentPayloadCleanupHelper::IGNORED_DATA_TYPES = T.let(T.unsafe(nil), Array)

class Sentry::Rails::RescuedExceptionInterceptor
  def initialize(app); end

  def call(env); end
  def report_rescued_exceptions?; end
end

module Sentry::Rails::Tracing
  class << self
    def get_current_transaction; end
    def patch_active_support_notifications; end
    def register_subscribers(subscribers); end
    def remove_active_support_notifications_patch; end
    def subscribe_tracing_events; end
    def subscribed_tracing_events; end
    def subscribers; end
    def unsubscribe_tracing_events; end
  end
end

class Sentry::Rails::Tracing::AbstractSubscriber
  class << self
    def record_on_current_span(duration:, **options); end
    def subscribe!; end
    def subscribe_to_event(event_names); end
    def unsubscribe!; end
  end
end

class Sentry::Rails::Tracing::ActionControllerSubscriber < ::Sentry::Rails::Tracing::AbstractSubscriber
  extend ::Sentry::Rails::InstrumentPayloadCleanupHelper

  class << self
    def subscribe!; end
  end
end

Sentry::Rails::Tracing::ActionControllerSubscriber::EVENT_NAMES = T.let(T.unsafe(nil), Array)

class Sentry::Rails::Tracing::ActionViewSubscriber < ::Sentry::Rails::Tracing::AbstractSubscriber
  class << self
    def subscribe!; end
  end
end

Sentry::Rails::Tracing::ActionViewSubscriber::EVENT_NAMES = T.let(T.unsafe(nil), Array)
Sentry::Rails::Tracing::ActionViewSubscriber::SPAN_PREFIX = T.let(T.unsafe(nil), String)

class Sentry::Rails::Tracing::ActiveRecordSubscriber < ::Sentry::Rails::Tracing::AbstractSubscriber
  class << self
    def subscribe!; end
  end
end

Sentry::Rails::Tracing::ActiveRecordSubscriber::EVENT_NAMES = T.let(T.unsafe(nil), Array)
Sentry::Rails::Tracing::ActiveRecordSubscriber::EXCLUDED_EVENTS = T.let(T.unsafe(nil), Array)
Sentry::Rails::Tracing::ActiveRecordSubscriber::SPAN_PREFIX = T.let(T.unsafe(nil), String)

class Sentry::Rails::Tracing::ActiveStorageSubscriber < ::Sentry::Rails::Tracing::AbstractSubscriber
  class << self
    def subscribe!; end
  end
end

Sentry::Rails::Tracing::ActiveStorageSubscriber::EVENT_NAMES = T.let(T.unsafe(nil), Array)
Sentry::Rails::Tracing::START_TIMESTAMP_NAME = T.let(T.unsafe(nil), Symbol)
module Sentry::Rails::Tracing::SentryNotificationExtension; end
Sentry::Rails::VERSION = T.let(T.unsafe(nil), String)

class Sentry::Railtie < ::Rails::Railtie
  def activate_tracing; end
  def configure_project_root; end
  def configure_trusted_proxies; end
  def extend_controller_methods; end
  def inject_breadcrumbs_logger; end
  def override_streaming_reporter; end
  def patch_background_worker; end
  def register_error_subscriber(app); end
  def setup_backtrace_cleanup_callback; end
end

Sentry::SENTRY_TRACE_HEADER_NAME = T.let(T.unsafe(nil), String)

class Sentry::SendEventJob < ::ApplicationJob
  def perform(event, hint = T.unsafe(nil)); end

  class << self
    def log_arguments; end
    def rescue_handlers; end
  end
end

Sentry::THREAD_LOCAL = T.let(T.unsafe(nil), Symbol)
Sentry::VERSION = T.let(T.unsafe(nil), String)
