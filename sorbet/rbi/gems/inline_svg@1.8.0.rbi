# typed: strict

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `inline_svg` gem.
# Please instead update this file by running `bin/tapioca gem inline_svg`.

module InlineSvg
  class << self
    def configuration; end
    def configure; end
    def reset_configuration!; end
  end
end

module InlineSvg::ActionView; end

module InlineSvg::ActionView::Helpers
  def inline_svg(filename, transform_params = T.unsafe(nil)); end
  def inline_svg_pack_tag(filename, transform_params = T.unsafe(nil)); end
  def inline_svg_tag(filename, transform_params = T.unsafe(nil)); end

  private

  def backwards_compatible_html_escape(filename); end
  def configured_asset_file; end
  def extension_hint(filename); end
  def placeholder(filename); end
  def read_svg(filename); end
  def render_inline_svg(filename, transform_params = T.unsafe(nil)); end
  def with_asset_finder(asset_finder); end
end

class InlineSvg::AssetFile
  class << self
    def named(filename); end
  end
end

class InlineSvg::AssetFile::FileNotFound < ::IOError; end
InlineSvg::AssetFile::UNREADABLE_PATH = T.let(T.unsafe(nil), String)

class InlineSvg::CachedAssetFile
  def initialize(paths: T.unsafe(nil), filters: T.unsafe(nil)); end

  def assets; end
  def filters; end
  def named(asset_name); end
  def paths; end

  private

  def key_for_asset(asset_name); end
  def matches_all_filters?(path); end
  def read_assets(acc, paths); end
end

class InlineSvg::Configuration
  def initialize; end

  def add_custom_transformation(options); end
  def asset_file; end
  def asset_file=(custom_asset_file); end
  def asset_finder; end
  def asset_finder=(finder); end
  def custom_transformations; end
  def raise_on_file_not_found=(value); end
  def raise_on_file_not_found?; end
  def svg_not_found_css_class; end
  def svg_not_found_css_class=(css_class); end

  private

  def incompatible_transformation?(klass); end
end

class InlineSvg::Configuration::Invalid < ::ArgumentError; end
class InlineSvg::CustomTransformation < ::InlineSvg::TransformPipeline::Transformations::Transformation; end

class InlineSvg::FindsAssetPaths
  class << self
    def by_filename(filename); end
    def configured_asset_finder; end
  end
end

module InlineSvg::IOResource
  class << self
    def ===(object); end
    def default_for(object); end
    def read(object); end
  end
end

class InlineSvg::IdGenerator
  class << self
    def generate(base, salt, randomness: T.unsafe(nil)); end
  end
end

class InlineSvg::IdGenerator::Randomness
  class << self
    def call; end
  end
end

class InlineSvg::PropshaftAssetFinder
  def initialize(filename); end

  def pathname; end

  class << self
    def find_asset(filename); end
  end
end

class InlineSvg::Railtie < ::Rails::Railtie; end

class InlineSvg::StaticAssetFinder
  def initialize(filename); end

  def pathname; end

  class << self
    def find_asset(filename); end
  end
end

module InlineSvg::TransformPipeline
  class << self
    def generate_html_from(svg_file, transform_params); end
  end
end

module InlineSvg::TransformPipeline::Transformations
  class << self
    def all_default_values; end
    def all_transformations; end
    def built_in_transformations; end
    def custom_transformations; end
    def in_priority_order(transforms); end
    def lookup(transform_params); end
    def magnify(priority = T.unsafe(nil)); end
    def magnify_priorities(transforms); end
    def no_transform; end
    def params_with_defaults(params); end
    def without_empty_values(params); end
  end
end

class InlineSvg::TransformPipeline::Transformations::AriaAttributes < ::InlineSvg::TransformPipeline::Transformations::Transformation
  def element_id_for(base, element); end
  def transform(doc); end
end

class InlineSvg::TransformPipeline::Transformations::AriaHiddenAttribute < ::InlineSvg::TransformPipeline::Transformations::Transformation
  def transform(doc); end
end

class InlineSvg::TransformPipeline::Transformations::ClassAttribute < ::InlineSvg::TransformPipeline::Transformations::Transformation
  def transform(doc); end
end

class InlineSvg::TransformPipeline::Transformations::DataAttributes < ::InlineSvg::TransformPipeline::Transformations::Transformation
  def transform(doc); end

  private

  def dasherize(string); end
  def with_valid_hash_from(hash); end
end

class InlineSvg::TransformPipeline::Transformations::Description < ::InlineSvg::TransformPipeline::Transformations::Transformation
  def transform(doc); end
end

class InlineSvg::TransformPipeline::Transformations::Height < ::InlineSvg::TransformPipeline::Transformations::Transformation
  def transform(doc); end
end

class InlineSvg::TransformPipeline::Transformations::IdAttribute < ::InlineSvg::TransformPipeline::Transformations::Transformation
  def transform(doc); end
end

class InlineSvg::TransformPipeline::Transformations::NoComment < ::InlineSvg::TransformPipeline::Transformations::Transformation
  def transform(doc); end
end

class InlineSvg::TransformPipeline::Transformations::NullTransformation < ::InlineSvg::TransformPipeline::Transformations::Transformation
  def transform(doc); end
end

class InlineSvg::TransformPipeline::Transformations::PreserveAspectRatio < ::InlineSvg::TransformPipeline::Transformations::Transformation
  def transform(doc); end
end

class InlineSvg::TransformPipeline::Transformations::Size < ::InlineSvg::TransformPipeline::Transformations::Transformation
  def height_of(value); end
  def transform(doc); end
  def width_of(value); end
end

class InlineSvg::TransformPipeline::Transformations::StyleAttribute < ::InlineSvg::TransformPipeline::Transformations::Transformation
  def transform(doc); end
end

class InlineSvg::TransformPipeline::Transformations::Title < ::InlineSvg::TransformPipeline::Transformations::Transformation
  def transform(doc); end
end

class InlineSvg::TransformPipeline::Transformations::Transformation
  def initialize(value); end

  def transform(*_arg0); end
  def value; end
  def with_svg(doc); end

  class << self
    def create_with_value(value); end
  end
end

class InlineSvg::TransformPipeline::Transformations::Width < ::InlineSvg::TransformPipeline::Transformations::Transformation
  def transform(doc); end
end

InlineSvg::VERSION = T.let(T.unsafe(nil), String)

class InlineSvg::WebpackAssetFinder
  def initialize(filename); end

  def pathname; end

  private

  def dev_server_asset(file_path); end
  def fetch_from_dev_server(file_path); end

  class << self
    def find_asset(filename); end
  end
end
