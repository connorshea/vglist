# typed: strict

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `inline_svg` gem.
# Please instead update this file by running `bin/tapioca gem inline_svg`.

# Naive fallback asset finder for when sprockets >= 3.0 &&
# config.assets.precompile = false
# Thanks to @ryanswood for the original code:
# https://github.com/jamesmartin/inline_svg/commit/661bbb3bef7d1b4bd6ccd63f5f018305797b9509
module InlineSvg
  class << self
    # Returns the value of attribute configuration.
    def configuration; end

    def configure; end
    def reset_configuration!; end
  end
end

module InlineSvg::ActionView; end

module InlineSvg::ActionView::Helpers
  def inline_svg(filename, transform_params = T.unsafe(nil)); end
  def inline_svg_pack_tag(filename, transform_params = T.unsafe(nil)); end
  def inline_svg_tag(filename, transform_params = T.unsafe(nil)); end

  private

  def backwards_compatible_html_escape(filename); end
  def configured_asset_file; end
  def extension_hint(filename); end
  def placeholder(filename); end
  def read_svg(filename); end
  def render_inline_svg(filename, transform_params = T.unsafe(nil)); end
  def with_asset_finder(asset_finder); end
end

class InlineSvg::AssetFile
  class << self
    def named(filename); end
  end
end

class InlineSvg::AssetFile::FileNotFound < ::IOError; end
InlineSvg::AssetFile::UNREADABLE_PATH = T.let(T.unsafe(nil), String)

class InlineSvg::CachedAssetFile
  # For each of the given paths, recursively reads each asset and stores its
  # contents alongside the full path to the asset.
  #
  # paths   - One or more String representing directories on disk to search
  #           for asset files. Note: paths are searched recursively.
  # filters - One or more Strings/Regexps to match assets against. Only
  #           assets matching all filters will be cached and available to load.
  #           Note: Specifying no filters will cache every file found in
  #           paths.
  #
  # @return [CachedAssetFile] a new instance of CachedAssetFile
  def initialize(paths: T.unsafe(nil), filters: T.unsafe(nil)); end

  # Returns the value of attribute assets.
  def assets; end

  # Returns the value of attribute filters.
  def filters; end

  # Public: Finds the named asset and returns the contents as a string.
  #
  # asset_name  - A string representing the name of the asset to load
  #
  # Returns: A String or raises InlineSvg::AssetFile::FileNotFound error
  def named(asset_name); end

  # Returns the value of attribute paths.
  def paths; end

  private

  # Internal: Finds the key for a given asset name (using a Regex). In the
  # event of an ambiguous asset_name matching multiple assets, this method
  # ranks the matches by their full file path, choosing the shortest (most
  # exact) match over all others.
  #
  # Returns a String representing the key for the named asset or nil if there
  # is no match.
  def key_for_asset(asset_name); end

  # @return [Boolean]
  def matches_all_filters?(path); end

  # Internal: Recursively descends through current_paths reading each file it
  # finds and adding them to the accumulator if the fullpath of the file
  # matches all configured filters.
  #
  # acc     - Hash representing the accumulated assets keyed by full path
  # paths   - Pathname representing the current node in the directory
  #           structure to consider
  #
  # Returns a Hash containing the contents of each asset, keyed by fullpath
  # to the asset.
  def read_assets(acc, paths); end
end

class InlineSvg::Configuration
  # @return [Configuration] a new instance of Configuration
  def initialize; end

  def add_custom_transformation(options); end

  # Returns the value of attribute asset_file.
  def asset_file; end

  def asset_file=(custom_asset_file); end

  # Returns the value of attribute asset_finder.
  def asset_finder; end

  def asset_finder=(finder); end

  # Returns the value of attribute custom_transformations.
  def custom_transformations; end

  def raise_on_file_not_found=(value); end

  # @return [Boolean]
  def raise_on_file_not_found?; end

  # Returns the value of attribute svg_not_found_css_class.
  def svg_not_found_css_class; end

  def svg_not_found_css_class=(css_class); end

  private

  # @return [Boolean]
  def incompatible_transformation?(klass); end
end

class InlineSvg::Configuration::Invalid < ::ArgumentError; end
class InlineSvg::CustomTransformation < ::InlineSvg::TransformPipeline::Transformations::Transformation; end

class InlineSvg::FindsAssetPaths
  class << self
    def by_filename(filename); end
    def configured_asset_finder; end
  end
end

module InlineSvg::IOResource
  class << self
    def ===(object); end
    def default_for(object); end
    def read(object); end
  end
end

class InlineSvg::IdGenerator
  class << self
    def generate(base, salt, randomness: T.unsafe(nil)); end
  end
end

class InlineSvg::IdGenerator::Randomness
  class << self
    def call; end
  end
end

class InlineSvg::PropshaftAssetFinder
  # @return [PropshaftAssetFinder] a new instance of PropshaftAssetFinder
  def initialize(filename); end

  def pathname; end

  class << self
    def find_asset(filename); end
  end
end

class InlineSvg::Railtie < ::Rails::Railtie; end

class InlineSvg::StaticAssetFinder
  # @return [StaticAssetFinder] a new instance of StaticAssetFinder
  def initialize(filename); end

  def pathname; end

  class << self
    def find_asset(filename); end
  end
end

module InlineSvg::TransformPipeline
  class << self
    def generate_html_from(svg_file, transform_params); end
  end
end

module InlineSvg::TransformPipeline::Transformations
  class << self
    def all_default_values; end
    def all_transformations; end

    # Transformations are run in priority order, lowest number first:
    def built_in_transformations; end

    def custom_transformations; end
    def in_priority_order(transforms); end
    def lookup(transform_params); end
    def magnify(priority = T.unsafe(nil)); end
    def magnify_priorities(transforms); end
    def no_transform; end
    def params_with_defaults(params); end
    def without_empty_values(params); end
  end
end

class InlineSvg::TransformPipeline::Transformations::AriaAttributes < ::InlineSvg::TransformPipeline::Transformations::Transformation
  def element_id_for(base, element); end
  def transform(doc); end
end

class InlineSvg::TransformPipeline::Transformations::AriaHiddenAttribute < ::InlineSvg::TransformPipeline::Transformations::Transformation
  def transform(doc); end
end

class InlineSvg::TransformPipeline::Transformations::ClassAttribute < ::InlineSvg::TransformPipeline::Transformations::Transformation
  def transform(doc); end
end

class InlineSvg::TransformPipeline::Transformations::DataAttributes < ::InlineSvg::TransformPipeline::Transformations::Transformation
  def transform(doc); end

  private

  def dasherize(string); end
  def with_valid_hash_from(hash); end
end

class InlineSvg::TransformPipeline::Transformations::Description < ::InlineSvg::TransformPipeline::Transformations::Transformation
  def transform(doc); end
end

class InlineSvg::TransformPipeline::Transformations::Height < ::InlineSvg::TransformPipeline::Transformations::Transformation
  def transform(doc); end
end

class InlineSvg::TransformPipeline::Transformations::IdAttribute < ::InlineSvg::TransformPipeline::Transformations::Transformation
  def transform(doc); end
end

class InlineSvg::TransformPipeline::Transformations::NoComment < ::InlineSvg::TransformPipeline::Transformations::Transformation
  def transform(doc); end
end

class InlineSvg::TransformPipeline::Transformations::NullTransformation < ::InlineSvg::TransformPipeline::Transformations::Transformation
  def transform(doc); end
end

class InlineSvg::TransformPipeline::Transformations::PreserveAspectRatio < ::InlineSvg::TransformPipeline::Transformations::Transformation
  def transform(doc); end
end

class InlineSvg::TransformPipeline::Transformations::Size < ::InlineSvg::TransformPipeline::Transformations::Transformation
  def height_of(value); end
  def transform(doc); end
  def width_of(value); end
end

class InlineSvg::TransformPipeline::Transformations::StyleAttribute < ::InlineSvg::TransformPipeline::Transformations::Transformation
  def transform(doc); end
end

class InlineSvg::TransformPipeline::Transformations::Title < ::InlineSvg::TransformPipeline::Transformations::Transformation
  def transform(doc); end
end

class InlineSvg::TransformPipeline::Transformations::Transformation
  # @return [Transformation] a new instance of Transformation
  def initialize(value); end

  def transform(*_arg0); end

  # Returns the value of attribute value.
  def value; end

  # Parses a document and yields the contained SVG nodeset to the given block
  # if it exists.
  #
  # Returns a Nokogiri::XML::Document.
  #
  # @yield [svg]
  def with_svg(doc); end

  class << self
    def create_with_value(value); end
  end
end

class InlineSvg::TransformPipeline::Transformations::Width < ::InlineSvg::TransformPipeline::Transformations::Transformation
  def transform(doc); end
end

InlineSvg::VERSION = T.let(T.unsafe(nil), String)

class InlineSvg::WebpackAssetFinder
  # @return [WebpackAssetFinder] a new instance of WebpackAssetFinder
  def initialize(filename); end

  def pathname; end

  private

  def dev_server_asset(file_path); end
  def fetch_from_dev_server(file_path); end

  class << self
    def find_asset(filename); end
  end
end
