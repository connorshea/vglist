# typed: strict

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `pundit-matchers` gem.
# Please instead update this file by running `bin/tapioca gem pundit-matchers`.

# @api public
module Pundit
  include ::Pundit::Authorization

  class << self
    # Retrieves the policy for the given record, initializing it with the
    # record and user and finally throwing an error if the user is not
    # authorized to perform the given action.
    #
    # @api public
    # @param user [Object] the user that initiated the action
    # @param possibly_namespaced_record [Object, Array] the object we're checking permissions of
    # @param query [Symbol, String] the predicate method to check on the policy (e.g. `:show?`)
    # @param cache [#[], #[]=] a Hash-like object to cache the found policy instance in
    # @param policy_class [Class] the policy class we want to force use of
    # @raise [NotAuthorizedError] if the given query method returned false
    # @return [Object] Always returns the passed object record
    def authorize(user, possibly_namespaced_record, query, policy_class: T.unsafe(nil), cache: T.unsafe(nil)); end

    # @api public
    # @private
    def included(base); end

    # Retrieves the policy for the given record.
    #
    # @api public
    # @param user [Object] the user that initiated the action
    # @param record [Object] the object we're retrieving the policy for
    # @raise [InvalidConstructorError] if the policy constructor called incorrectly
    # @return [Object, nil] instance of policy class with query methods
    # @see https://github.com/varvet/pundit#policies
    def policy(user, record); end

    # Retrieves the policy for the given record.
    #
    # @api public
    # @param user [Object] the user that initiated the action
    # @param record [Object] the object we're retrieving the policy for
    # @raise [NotDefinedError] if the policy cannot be found
    # @raise [InvalidConstructorError] if the policy constructor called incorrectly
    # @return [Object] instance of policy class with query methods
    # @see https://github.com/varvet/pundit#policies
    def policy!(user, record); end

    # Retrieves the policy scope for the given record.
    #
    # @api public
    # @param user [Object] the user that initiated the action
    # @param scope [Object] the object we're retrieving the policy scope for
    # @raise [InvalidConstructorError] if the policy constructor called incorrectly
    # @return [Scope{#resolve}, nil] instance of scope class which can resolve to a scope
    # @see https://github.com/varvet/pundit#scopes
    def policy_scope(user, scope); end

    # Retrieves the policy scope for the given record.
    #
    # @api public
    # @param user [Object] the user that initiated the action
    # @param scope [Object] the object we're retrieving the policy scope for
    # @raise [NotDefinedError] if the policy scope cannot be found
    # @raise [InvalidConstructorError] if the policy constructor called incorrectly
    # @return [Scope{#resolve}] instance of scope class which can resolve to a scope
    # @see https://github.com/varvet/pundit#scopes
    def policy_scope!(user, scope); end

    private

    # @api public
    def pundit_model(record); end
  end
end

# @api public
module Pundit::Matchers
  class << self
    # @api public
    def configuration; end

    # @api public
    # @yield [configuration]
    def configure; end
  end
end

# @api public
class Pundit::Matchers::Configuration
  # @api public
  # @return [Configuration] a new instance of Configuration
  def initialize; end

  # @api public
  def user_alias; end

  # @api public
  def user_alias=(_arg0); end
end

# @api public
Pundit::SUFFIX = T.let(T.unsafe(nil), String)

Pundit::VERSION = T.let(T.unsafe(nil), String)
