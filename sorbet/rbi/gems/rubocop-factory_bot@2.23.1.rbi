# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rubocop-factory_bot` gem.
# Please instead update this file by running `bin/tapioca gem rubocop-factory_bot`.

module RuboCop; end
module RuboCop::Cop; end
module RuboCop::Cop::FactoryBot; end

# Use a consistent style to define associations.
#
# @example EnforcedStyle: implicit (default)
#   # bad
#   factory :post do
#   association :user
#   end
#
#   # good
#   factory :post do
#   user
#   end
# @example EnforcedStyle: explicit
#   # bad
#   factory :post do
#   user
#   end
#
#   # good
#   factory :post do
#   association :user
#   end
#
#   # good (NonImplicitAssociationMethodNames: ['email'])
#   sequence :email do |n|
#   "person#{n}@example.com"
#   end
#
#   factory :user do
#   email
#   end
class RuboCop::Cop::FactoryBot::AssociationStyle < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::ConfigurableEnforcedStyle
  extend ::RuboCop::Cop::AutoCorrector

  def explicit_association?(param0 = T.unsafe(nil)); end
  def factory_option_matcher(param0 = T.unsafe(nil)); end
  def implicit_association?(param0 = T.unsafe(nil)); end
  def on_send(node); end
  def trait_names_from_explicit(param0 = T.unsafe(nil)); end

  private

  def autocorrect(corrector, node); end
  def autocorrect_to_explicit_style(corrector, node); end
  def autocorrect_to_implicit_style(corrector, node); end

  # @return [Boolean]
  def bad?(node); end

  def bad_associations_in(node); end
  def children_of_factory_block(node); end
  def factory_names_from_explicit(node); end

  # @return [Boolean]
  def non_implicit_association_method_name?(method_name); end

  def non_implicit_association_method_names; end
  def options_for_autocorrect_to_implicit_style(node); end
  def options_from_explicit(node); end
end

RuboCop::Cop::FactoryBot::AssociationStyle::DEFAULT_NON_IMPLICIT_ASSOCIATION_METHOD_NAMES = T.let(T.unsafe(nil), Array)
RuboCop::Cop::FactoryBot::AssociationStyle::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Always declare attribute values as blocks.
#
# @example
#   # bad
#   kind [:active, :rejected].sample
#
#   # good
#   kind { [:active, :rejected].sample }
#
#   # bad
#   closed_at 1.day.from_now
#
#   # good
#   closed_at { 1.day.from_now }
#
#   # bad
#   count 1
#
#   # good
#   count { 1 }
class RuboCop::Cop::FactoryBot::AttributeDefinedStatically < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  def association?(param0 = T.unsafe(nil)); end
  def factory_attributes(param0 = T.unsafe(nil)); end
  def on_block(node); end
  def value_matcher(param0 = T.unsafe(nil)); end

  private

  # @return [Boolean]
  def attribute_defining_method?(method_name); end

  def autocorrect(corrector, node); end
  def autocorrect_replacing_parens(corrector, node); end
  def autocorrect_without_parens(corrector, node); end
  def braces(node); end

  # @return [Boolean]
  def offensive_receiver?(receiver, node); end

  # @return [Boolean]
  def proc?(attribute); end

  # @return [Boolean]
  def receiver_matches_first_block_argument?(receiver, node); end

  # @return [Boolean]
  def reserved_method?(method_name); end

  # @return [Boolean]
  def value_hash_without_braces?(node); end
end

RuboCop::Cop::FactoryBot::AttributeDefinedStatically::MSG = T.let(T.unsafe(nil), String)

# Handles `ExplicitOnly` configuration parameters.
module RuboCop::Cop::FactoryBot::ConfigurableExplicitOnly
  include ::RuboCop::FactoryBot::Language

  # @return [Boolean]
  def explicit_only?; end

  # @return [Boolean]
  def factory_call?(node); end
end

# Use a consistent style for parentheses in factory_bot calls.
#
# @example `EnforcedStyle: require_parentheses` (default)
#
#   # bad
#   create :user
#   build :login
#
#   # good
#   create(:user)
#   build(:login)
# @example `EnforcedStyle: omit_parentheses`
#
#   # bad
#   create(:user)
#   build(:login)
#
#   # good
#   create :user
#   build :login
#
#   # also good
#   # when method name and first argument are not on same line
#   create(
#   :user
#   )
#   build(
#   :user,
#   name: 'foo'
#   )
# @example `ExplicitOnly: false` (default)
#
#   # bad - with `EnforcedStyle: require_parentheses`
#   FactoryBot.create :user
#   build :user
#
#   # good - with `EnforcedStyle: require_parentheses`
#   FactoryBot.create(:user)
#   build(:user)
# @example `ExplicitOnly: true`
#
#   # bad - with `EnforcedStyle: require_parentheses`
#   FactoryBot.create :user
#   FactoryBot.build :user
#
#   # good - with `EnforcedStyle: require_parentheses`
#   FactoryBot.create(:user)
#   FactoryBot.build(:user)
#   create :user
#   build :user
class RuboCop::Cop::FactoryBot::ConsistentParenthesesStyle < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::ConfigurableEnforcedStyle
  include ::RuboCop::FactoryBot::Language
  include ::RuboCop::Cop::FactoryBot::ConfigurableExplicitOnly
  extend ::RuboCop::Cop::AutoCorrector

  def factory_call(param0 = T.unsafe(nil)); end
  def on_send(node); end

  private

  # @return [Boolean]
  def ambiguous_without_parentheses?(node); end

  def register_offense(node); end
  def register_offense_with_parentheses(node); end
  def register_offense_without_parentheses(node); end
  def remove_parentheses(corrector, node); end

  class << self
    def autocorrect_incompatible_with; end
  end
end

RuboCop::Cop::FactoryBot::ConsistentParenthesesStyle::AMBIGUOUS_TYPES = T.let(T.unsafe(nil), Array)
RuboCop::Cop::FactoryBot::ConsistentParenthesesStyle::FACTORY_CALLS = T.let(T.unsafe(nil), Set)
RuboCop::Cop::FactoryBot::ConsistentParenthesesStyle::MSG_OMIT_PARENS = T.let(T.unsafe(nil), String)
RuboCop::Cop::FactoryBot::ConsistentParenthesesStyle::MSG_REQUIRE_PARENS = T.let(T.unsafe(nil), String)
RuboCop::Cop::FactoryBot::ConsistentParenthesesStyle::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Set)

# Checks for create_list usage.
#
# This cop can be configured using the `EnforcedStyle` option
#
# @example `EnforcedStyle: create_list` (default)
#   # bad
#   3.times { create :user }
#   3.times.map { create :user }
#   [create(:user), create(:user), create(:user)]
#   Array.new(3) { create :user }
#
#   # good
#   create_list :user, 3
#
#   # bad
#   3.times { create :user, age: 18 }
#
#   # good - index is used to alter the created models attributes
#   3.times { |n| create :user, age: n }
#
#   # good - contains a method call, may return different values
#   3.times { create :user, age: rand }
# @example `EnforcedStyle: n_times`
#   # bad
#   create_list :user, 3
#   [create(:user), create(:user), create(:user)]
#
#   # good
#   3.times.map { create :user }
# @example `ExplicitOnly: false` (default)
#
#   # bad - with `EnforcedStyle: create_list`
#   3.times { FactoryBot.create :user }
#   3.times { create :user }
#
#   # good - with `EnforcedStyle: create_list`
#   FactoryBot.create_list :user, 3
#   create_list :user, 3
# @example `ExplicitOnly: true`
#
#   # bad - with `EnforcedStyle: create_list`
#   3.times { FactoryBot.create :user }
#
#   # good - with `EnforcedStyle: create_list`
#   FactoryBot.create_list :user, 3
#   create_list :user, 3
#   3.times { create :user }
class RuboCop::Cop::FactoryBot::CreateList < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::ConfigurableEnforcedStyle
  include ::RuboCop::FactoryBot::Language
  include ::RuboCop::Cop::FactoryBot::ConfigurableExplicitOnly
  extend ::RuboCop::Cop::AutoCorrector

  def arguments_include_method_call?(param0 = T.unsafe(nil)); end
  def array_new?(param0 = T.unsafe(nil)); end
  def block_with_arg_and_used?(param0 = T.unsafe(nil)); end
  def factory_call(param0 = T.unsafe(nil)); end
  def factory_calls_in_array?(param0); end
  def factory_list_call(param0 = T.unsafe(nil)); end
  def n_times?(param0 = T.unsafe(nil)); end
  def n_times_map?(param0 = T.unsafe(nil)); end
  def on_array(node); end
  def on_block(node); end
  def on_send(node); end
  def repetition_block?(param0 = T.unsafe(nil)); end

  private

  # For ease of modification, it is replaced with the `n_times` style,
  # but if it is not appropriate for the configured style,
  # it will be replaced in the subsequent autocorrection.
  def autocorrect_same_factory_calls_in_array(corrector, node); end

  # @return [Boolean]
  def contains_only_factory?(node); end

  def preferred_message_for_array(node); end

  # @return [Boolean]
  def same_factory_calls_in_array?(node); end
end

# :nodoc
module RuboCop::Cop::FactoryBot::CreateList::Corrector
  private

  def build_options_string(options); end
  def format_method_call(node, method, arguments); end
  def format_receiver(receiver); end
end

class RuboCop::Cop::FactoryBot::CreateList::CreateListCorrector
  include ::RuboCop::Cop::FactoryBot::CreateList::Corrector

  # @return [CreateListCorrector] a new instance of CreateListCorrector
  def initialize(node); end

  def call(corrector); end

  private

  def build_arguments(node, count); end
  def call_replacement(node); end
  def call_with_block_replacement(node); end
  def count_from(node); end
  def format_block(node); end
  def format_multiline_block(node); end
  def format_singleline_block(node); end

  # Returns the value of attribute node.
  def node; end
end

RuboCop::Cop::FactoryBot::CreateList::MSG_CREATE_LIST = T.let(T.unsafe(nil), String)
RuboCop::Cop::FactoryBot::CreateList::MSG_N_TIMES = T.let(T.unsafe(nil), String)
RuboCop::Cop::FactoryBot::CreateList::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# :nodoc
class RuboCop::Cop::FactoryBot::CreateList::TimesCorrector
  include ::RuboCop::Cop::FactoryBot::CreateList::Corrector

  # @return [TimesCorrector] a new instance of TimesCorrector
  def initialize(node); end

  def call(corrector); end

  private

  def factory_call_block_source; end
  def generate_n_times_block(node); end

  # Returns the value of attribute node.
  def node; end
end

# Use definition in factory association instead of hard coding a strategy.
#
# @example
#   # bad - only works for one strategy
#   factory :foo do
#   profile { create(:profile) }
#   end
#
#   # good - implicit
#   factory :foo do
#   profile
#   end
#
#   # good - explicit
#   factory :foo do
#   association :profile
#   end
#
#   # good - inline
#   factory :foo do
#   profile { association :profile }
#   end
class RuboCop::Cop::FactoryBot::FactoryAssociationWithStrategy < ::RuboCop::Cop::Base
  def factory_declaration(param0 = T.unsafe(nil)); end
  def factory_strategy_association(param0 = T.unsafe(nil)); end
  def on_block(node); end
end

RuboCop::Cop::FactoryBot::FactoryAssociationWithStrategy::HARDCODED = T.let(T.unsafe(nil), Set)
RuboCop::Cop::FactoryBot::FactoryAssociationWithStrategy::MSG = T.let(T.unsafe(nil), String)

# Use string value when setting the class attribute explicitly.
#
# This cop would promote faster tests by lazy-loading of
# application files. Also, this could help you suppress potential bugs
# in combination with external libraries by avoiding a preload of
# application files from the factory files.
#
# @example
#   # bad
#   factory :foo, class: Foo do
#   end
#
#   # good
#   factory :foo, class: 'Foo' do
#   end
class RuboCop::Cop::FactoryBot::FactoryClassName < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  def class_name(param0 = T.unsafe(nil)); end
  def on_send(node); end

  private

  # @return [Boolean]
  def allowed?(const_name); end
end

RuboCop::Cop::FactoryBot::FactoryClassName::ALLOWED_CONSTANTS = T.let(T.unsafe(nil), Array)
RuboCop::Cop::FactoryBot::FactoryClassName::MSG = T.let(T.unsafe(nil), String)
RuboCop::Cop::FactoryBot::FactoryClassName::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Checks for name style for argument of FactoryBot::Syntax::Methods.
#
# @example EnforcedStyle: symbol (default)
#   # bad
#   create('user')
#   build "user", username: "NAME"
#
#   # good
#   create(:user)
#   build :user, username: "NAME"
# @example EnforcedStyle: string
#   # bad
#   create(:user)
#   build :user, username: "NAME"
#
#   # good
#   create('user')
#   build "user", username: "NAME"
# @example `ExplicitOnly: false` (default)
#
#   # bad - with `EnforcedStyle: symbol`
#   FactoryBot.create('user')
#   create('user')
#
#   # good - with `EnforcedStyle: symbol`
#   FactoryBot.create(:user)
#   create(:user)
# @example `ExplicitOnly: true`
#
#   # bad - with `EnforcedStyle: symbol`
#   FactoryBot.create(:user)
#   FactoryBot.build "user", username: "NAME"
#
#   # good - with `EnforcedStyle: symbol`
#   FactoryBot.create('user')
#   FactoryBot.build "user", username: "NAME"
#   FactoryBot.create(:user)
#   create(:user)
class RuboCop::Cop::FactoryBot::FactoryNameStyle < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::ConfigurableEnforcedStyle
  include ::RuboCop::FactoryBot::Language
  include ::RuboCop::Cop::FactoryBot::ConfigurableExplicitOnly
  extend ::RuboCop::Cop::AutoCorrector

  def factory_call(param0 = T.unsafe(nil)); end
  def on_send(node); end

  private

  # @return [Boolean]
  def offense_for_string_style?(name); end

  # @return [Boolean]
  def offense_for_symbol_style?(name); end

  def register_offense(name, prefer); end
end

RuboCop::Cop::FactoryBot::FactoryNameStyle::FACTORY_CALLS = T.let(T.unsafe(nil), Set)
RuboCop::Cop::FactoryBot::FactoryNameStyle::MSG = T.let(T.unsafe(nil), String)
RuboCop::Cop::FactoryBot::FactoryNameStyle::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Set)

# Checks for redundant `factory` option.
#
# @example
#   # bad
#   association :user, factory: :user
#
#   # good
#   association :user
class RuboCop::Cop::FactoryBot::RedundantFactoryOption < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  def association_with_a_factory_option(param0 = T.unsafe(nil)); end
  def on_send(node); end

  private

  def autocorrect(corrector, node); end
end

RuboCop::Cop::FactoryBot::RedundantFactoryOption::MSG = T.let(T.unsafe(nil), String)
RuboCop::Cop::FactoryBot::RedundantFactoryOption::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Use shorthands from `FactoryBot::Syntax::Methods` in your specs.
#
# @example
#   # bad
#   FactoryBot.create(:bar)
#   FactoryBot.build(:bar)
#   FactoryBot.attributes_for(:bar)
#
#   # good
#   create(:bar)
#   build(:bar)
#   attributes_for(:bar)
class RuboCop::Cop::FactoryBot::SyntaxMethods < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::RangeHelp
  include ::RuboCop::FactoryBot::Language
  extend ::RuboCop::Cop::AutoCorrector

  def on_send(node); end
  def spec_group?(param0 = T.unsafe(nil)); end

  private

  def crime_scene(node); end

  # @return [Boolean]
  def example_group_root?(node); end

  # @return [Boolean]
  def example_group_root_with_siblings?(node); end

  # @return [Boolean]
  def inside_example_group?(node); end

  def offense(node); end
end

RuboCop::Cop::FactoryBot::SyntaxMethods::MSG = T.let(T.unsafe(nil), String)
RuboCop::Cop::FactoryBot::SyntaxMethods::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Set)

# RuboCop factory_bot project namespace
module RuboCop::FactoryBot
  class << self
    def attribute_defining_methods; end
    def reserved_methods; end
  end
end

RuboCop::FactoryBot::ATTRIBUTE_DEFINING_METHODS = T.let(T.unsafe(nil), Array)
RuboCop::FactoryBot::DEFINITION_PROXY_METHODS = T.let(T.unsafe(nil), Array)

# Contains node matchers for common factory_bot DSL.
module RuboCop::FactoryBot::Language
  extend ::RuboCop::AST::NodePattern::Macros

  def factory_bot?(param0 = T.unsafe(nil)); end
end

RuboCop::FactoryBot::Language::METHODS = T.let(T.unsafe(nil), Set)
RuboCop::FactoryBot::RESERVED_METHODS = T.let(T.unsafe(nil), Array)
RuboCop::FactoryBot::UNPROXIED_METHODS = T.let(T.unsafe(nil), Array)
