# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `graphql` gem.
# Please instead update this file by running `bin/tapioca gem graphql`.

module Base64Bp
  extend ::Base64

  private

  def urlsafe_decode64(str); end
  def urlsafe_encode64(bin, padding:); end

  class << self
    def urlsafe_decode64(str); end
    def urlsafe_encode64(bin, padding:); end
  end
end

module GraphQL
  class << self
    def default_parser; end
    def default_parser=(_arg0); end
    def parse(graphql_string, tracer: T.unsafe(nil)); end
    def parse_file(filename); end
    def parse_with_racc(string, filename: T.unsafe(nil), tracer: T.unsafe(nil)); end
    def scan(graphql_string); end
    def scan_with_ragel(graphql_string); end
  end
end

module GraphQL::Analysis; end

module GraphQL::Analysis::AST
  private

  def analysis_errors(results); end
  def analyze_multiplex(multiplex, analyzers); end
  def analyze_query(query, analyzers, multiplex_analyzers: T.unsafe(nil)); end

  class << self
    def analysis_errors(results); end
    def analyze_multiplex(multiplex, analyzers); end
    def analyze_query(query, analyzers, multiplex_analyzers: T.unsafe(nil)); end
  end
end

class GraphQL::Analysis::AST::Analyzer
  def initialize(subject); end

  def analyze?; end
  def on_enter_abstract_node(node, parent, visitor); end
  def on_enter_argument(node, parent, visitor); end
  def on_enter_directive(node, parent, visitor); end
  def on_enter_document(node, parent, visitor); end
  def on_enter_enum(node, parent, visitor); end
  def on_enter_field(node, parent, visitor); end
  def on_enter_fragment_spread(node, parent, visitor); end
  def on_enter_inline_fragment(node, parent, visitor); end
  def on_enter_input_object(node, parent, visitor); end
  def on_enter_list_type(node, parent, visitor); end
  def on_enter_non_null_type(node, parent, visitor); end
  def on_enter_null_value(node, parent, visitor); end
  def on_enter_operation_definition(node, parent, visitor); end
  def on_enter_type_name(node, parent, visitor); end
  def on_enter_variable_definition(node, parent, visitor); end
  def on_enter_variable_identifier(node, parent, visitor); end
  def on_leave_abstract_node(node, parent, visitor); end
  def on_leave_argument(node, parent, visitor); end
  def on_leave_directive(node, parent, visitor); end
  def on_leave_document(node, parent, visitor); end
  def on_leave_enum(node, parent, visitor); end
  def on_leave_field(node, parent, visitor); end
  def on_leave_fragment_spread(node, parent, visitor); end
  def on_leave_inline_fragment(node, parent, visitor); end
  def on_leave_input_object(node, parent, visitor); end
  def on_leave_list_type(node, parent, visitor); end
  def on_leave_non_null_type(node, parent, visitor); end
  def on_leave_null_value(node, parent, visitor); end
  def on_leave_operation_definition(node, parent, visitor); end
  def on_leave_type_name(node, parent, visitor); end
  def on_leave_variable_definition(node, parent, visitor); end
  def on_leave_variable_identifier(node, parent, visitor); end
  def result; end

  protected

  def multiplex; end
  def query; end
  def subject; end

  class << self
    private

    def build_visitor_hooks(member_name); end
  end
end

class GraphQL::Analysis::AST::FieldUsage < ::GraphQL::Analysis::AST::Analyzer
  def initialize(query); end

  def on_leave_field(node, parent, visitor); end
  def result; end

  private

  def extract_deprecated_arguments(argument_values); end
end

class GraphQL::Analysis::AST::MaxQueryComplexity < ::GraphQL::Analysis::AST::QueryComplexity
  def result; end
end

class GraphQL::Analysis::AST::MaxQueryDepth < ::GraphQL::Analysis::AST::QueryDepth
  def result; end
end

class GraphQL::Analysis::AST::QueryComplexity < ::GraphQL::Analysis::AST::Analyzer
  def initialize(query); end

  def on_enter_field(node, parent, visitor); end
  def on_leave_field(node, parent, visitor); end
  def result; end

  private

  def applies_to?(query, left_scope, right_scope); end
  def field_complexity(scoped_type_complexity, max_complexity:, child_complexity: T.unsafe(nil)); end
  def max_possible_complexity; end
  def merged_max_complexity(query, children_for_scope); end
  def merged_max_complexity_for_scopes(query, scoped_children_hashes); end
end

class GraphQL::Analysis::AST::QueryComplexity::ScopedTypeComplexity
  def initialize(parent_type, field_definition, query, response_path); end

  def field_definition; end
  def nodes; end
  def own_complexity(child_complexity); end
  def query; end
  def response_path; end
  def scoped_children; end
  def terminal?; end
end

GraphQL::Analysis::AST::QueryComplexity::ScopedTypeComplexity::HASH_CHILDREN = T.let(T.unsafe(nil), Proc)

class GraphQL::Analysis::AST::QueryDepth < ::GraphQL::Analysis::AST::Analyzer
  def initialize(query); end

  def on_enter_field(node, parent, visitor); end
  def on_leave_field(node, parent, visitor); end
  def result; end
end

class GraphQL::Analysis::AST::Visitor < ::GraphQL::Language::Visitor
  def initialize(query:, analyzers:); end

  def argument_definition; end
  def arguments_for(ast_node, field_definition); end
  def directive_definition; end
  def field_definition; end
  def object_types; end
  def on_abstract_node(node, parent); end
  def on_argument(node, parent); end
  def on_directive(node, parent); end
  def on_field(node, parent); end
  def on_fragment_definition(node, parent); end
  def on_fragment_spread(node, parent); end
  def on_inline_fragment(node, parent); end
  def on_operation_definition(node, parent); end
  def parent_type_definition; end
  def previous_argument_definition; end
  def previous_field_definition; end
  def query; end
  def rescued_errors; end
  def response_path; end
  def skipping?; end
  def type_definition; end
  def visit; end
  def visiting_fragment_definition?; end

  private

  def call_analyzers(method, node, parent); end
  def enter_fragment_spread_inline(fragment_spread); end
  def leave_fragment_spread_inline(_fragment_spread); end
  def on_fragment_with_type(node); end
  def skip?(ast_node); end
end

class GraphQL::AnalysisError < ::GraphQL::ExecutionError; end

class GraphQL::Backtrace
  include ::Enumerable
  extend ::Forwardable

  def initialize(context, value: T.unsafe(nil)); end

  def [](*args, &block); end
  def each(*args, &block); end
  def inspect; end
  def to_a; end
  def to_s; end

  class << self
    def use(schema_defn); end
  end
end

class GraphQL::Backtrace::Frame
  def initialize(path:, query:, ast_node:, object:, field:, arguments:, parent_frame:); end

  def arguments; end
  def ast_node; end
  def field; end
  def object; end
  def parent_frame; end
  def path; end
  def query; end
end

module GraphQL::Backtrace::InspectResult
  private

  def inspect_result(obj); end
  def inspect_truncated(obj); end

  class << self
    def inspect_result(obj); end
    def inspect_truncated(obj); end
  end
end

class GraphQL::Backtrace::Table
  def initialize(context, value:); end

  def to_backtrace; end
  def to_table; end

  private

  def build_rows(context_entry, rows:, top: T.unsafe(nil)); end
  def render_table(rows); end
  def rows; end
  def value_at(runtime, path); end
end

GraphQL::Backtrace::Table::HEADERS = T.let(T.unsafe(nil), Array)
GraphQL::Backtrace::Table::MAX_COL_WIDTH = T.let(T.unsafe(nil), Integer)
GraphQL::Backtrace::Table::MIN_COL_WIDTH = T.let(T.unsafe(nil), Integer)

class GraphQL::Backtrace::TracedError < ::GraphQL::Error
  def initialize(err, current_ctx); end

  def context; end
  def graphql_backtrace; end
end

GraphQL::Backtrace::TracedError::CAUSE_BACKTRACE_PREVIEW_LENGTH = T.let(T.unsafe(nil), Integer)
GraphQL::Backtrace::TracedError::MESSAGE_TEMPLATE = T.let(T.unsafe(nil), String)

module GraphQL::Backtrace::Tracer
  private

  def trace(key, metadata); end

  class << self
    def trace(key, metadata); end
  end
end

class GraphQL::CoercionError < ::GraphQL::Error
  def initialize(message, extensions: T.unsafe(nil)); end

  def extensions; end
  def extensions=(_arg0); end
end

class GraphQL::Dataloader
  def initialize(nonblocking: T.unsafe(nil)); end

  def append_job(&job); end
  def join_queues(previous_queue, next_queue); end
  def nonblocking?; end
  def run; end
  def run_isolated; end
  def with(source_class, *batch_args, **batch_kwargs); end
  def yield; end

  private

  def create_source_fiber; end
  def resume(fiber); end
  def spawn_fiber; end

  class << self
    def default_nonblocking; end
    def default_nonblocking=(_arg0); end
    def use(schema, nonblocking: T.unsafe(nil)); end
    def with_dataloading(&block); end
  end
end

class GraphQL::Dataloader::AsyncDataloader < ::GraphQL::Dataloader; end

class GraphQL::Dataloader::NullDataloader < ::GraphQL::Dataloader
  def append_job; end
  def run; end
  def run_isolated; end
  def yield; end
end

class GraphQL::Dataloader::Request
  def initialize(source, key); end

  def load; end
end

class GraphQL::Dataloader::RequestAll < ::GraphQL::Dataloader::Request
  def initialize(source, keys); end

  def load; end
end

class GraphQL::Dataloader::Source
  def dataloader; end
  def fetch(keys); end
  def load(key); end
  def load_all(keys); end
  def pending?; end
  def pending_keys; end
  def request(key); end
  def request_all(keys); end
  def run_pending_keys; end
  def setup(dataloader); end
  def sync; end

  private

  def result_for(key); end

  class << self
    def batch_key_for(*batch_args, **batch_kwargs); end
  end
end

class GraphQL::DateEncodingError < ::GraphQL::RuntimeTypeError
  def initialize(value); end

  def date_value; end
end

module GraphQL::Deprecation
  class << self
    def warn(message); end
  end
end

module GraphQL::Dig
  def dig(own_key, *rest_keys); end
end

class GraphQL::Error < ::StandardError; end
module GraphQL::Execution; end

module GraphQL::Execution::DirectiveChecks
  private

  def include?(directive_ast_nodes, query); end

  class << self
    def include?(directive_ast_nodes, query); end
  end
end

GraphQL::Execution::DirectiveChecks::INCLUDE = T.let(T.unsafe(nil), String)
GraphQL::Execution::DirectiveChecks::SKIP = T.let(T.unsafe(nil), String)

class GraphQL::Execution::Errors
  def initialize(schema); end

  def each_rescue; end
  def find_handler_for(error_class); end
  def rescue_from(error_class, error_handler); end
  def with_error_handling(ctx); end
end

GraphQL::Execution::Errors::NEW_HANDLER_HASH = T.let(T.unsafe(nil), Proc)

module GraphQL::Execution::Instrumentation
  class << self
    def apply_instrumenters(multiplex); end

    private

    def call_after_hooks(instrumenters, object, after_hook_name, ex); end
    def call_hooks(instrumenters, object, before_hook_name, after_hook_name); end
    def each_query_call_hooks(instrumenters, queries, i = T.unsafe(nil)); end
  end
end

class GraphQL::Execution::Interpreter
  def evaluate(query); end
  def sync_lazies(query: T.unsafe(nil), multiplex: T.unsafe(nil)); end

  class << self
    def begin_multiplex(multiplex); end
    def begin_query(query, multiplex); end
    def finish_multiplex(_results, multiplex); end
    def finish_query(query, _multiplex); end
  end
end

class GraphQL::Execution::Interpreter::ArgumentValue
  def initialize(definition:, value:, default_used:); end

  def default_used?; end
  def definition; end
  def value; end
end

class GraphQL::Execution::Interpreter::Arguments
  include ::GraphQL::Dig
  extend ::Forwardable

  def initialize(argument_values:, keyword_arguments: T.unsafe(nil)); end

  def [](*args, &block); end
  def argument_values; end
  def each(*args, &block); end
  def each_value(*args, &block); end
  def empty?; end
  def fetch(*args, &block); end
  def inspect; end
  def key?(*args, &block); end
  def keys(*args, &block); end
  def keyword_arguments; end
  def merge_extras(extra_args); end
  def size(*args, &block); end
  def to_h(*args, &block); end
  def values(*args, &block); end
end

GraphQL::Execution::Interpreter::Arguments::EMPTY = T.let(T.unsafe(nil), GraphQL::Execution::Interpreter::Arguments)
GraphQL::Execution::Interpreter::Arguments::NO_ARGS = T.let(T.unsafe(nil), Hash)

class GraphQL::Execution::Interpreter::ArgumentsCache
  def initialize(query); end

  def dataload_for(ast_node, argument_owner, parent_object, &block); end
  def fetch(ast_node, argument_owner, parent_object); end

  class << self
    def prepare_args_hash(query, ast_arg_or_hash_or_value); end
  end
end

GraphQL::Execution::Interpreter::ArgumentsCache::NO_ARGUMENTS = T.let(T.unsafe(nil), Hash)
GraphQL::Execution::Interpreter::ArgumentsCache::NO_VALUE_GIVEN = T.let(T.unsafe(nil), Object)

class GraphQL::Execution::Interpreter::ExecutionErrors
  def initialize(ctx, ast_node, path); end

  def add(err_or_msg); end
end

class GraphQL::Execution::Interpreter::ListResultFailedError < ::GraphQL::Error
  def initialize(value:, path:, field:); end
end

class GraphQL::Execution::Interpreter::RawValue
  def initialize(obj = T.unsafe(nil)); end

  def resolve; end
end

module GraphQL::Execution::Interpreter::Resolve
  class << self
    def resolve(results, dataloader); end
    def resolve_all(results, dataloader); end
  end
end

class GraphQL::Execution::Interpreter::Runtime
  def initialize(query:); end

  def after_lazy(lazy_obj, owner:, field:, path:, owner_object:, arguments:, ast_node:, result:, result_name:, eager: T.unsafe(nil), trace: T.unsafe(nil), &block); end
  def arguments(graphql_object, arg_owner, ast_node); end
  def authorized_new(type, value, context); end
  def call_method_on_directives(method_name, object, directives, &block); end
  def context; end
  def continue_field(path, value, owner_type, field, current_type, ast_node, next_selections, is_non_null, owner_object, arguments, result_name, selection_result); end
  def continue_value(path, value, parent_type, field, is_non_null, ast_node, result_name, selection_result); end
  def dead_result?(selection_result); end
  def deep_merge_selection_result(from_result, into_result); end
  def delete_interpreter_context(key); end
  def directives_include?(node, graphql_object, parent_type); end
  def evaluate_selection(path, result_name, field_ast_nodes_or_ast_node, owner_object, owner_type, is_eager_field, selections_result, parent_object); end
  def evaluate_selection_with_args(arguments, field_defn, next_path, ast_node, field_ast_nodes, owner_type, object, is_eager_field, result_name, selection_result, parent_object); end
  def evaluate_selections(path, owner_object, owner_type, is_eager_selection, gathered_selections, selections_result, target_result, parent_object); end
  def final_result; end
  def gather_selections(owner_object, owner_type, selections, selections_to_run = T.unsafe(nil), selections_by_name = T.unsafe(nil)); end
  def inspect; end
  def lazy?(object); end
  def progress_path; end
  def query; end
  def resolve_list_item(inner_value, inner_type, next_path, ast_node, field, owner_object, arguments, this_idx, response_list, next_selections, owner_type); end
  def resolve_type(type, value, path); end
  def run_directive(method_name, object, directives, idx, &block); end
  def run_eager; end
  def schema; end
  def set_all_interpreter_context(object, field, arguments, path); end
  def set_graphql_dead(selection_result); end
  def set_interpreter_context(key, value); end
  def set_result(selection_result, result_name, value); end
  def tap_or_each(obj_or_array); end
end

module GraphQL::Execution::Interpreter::Runtime::GraphQLResult
  def initialize(result_name, parent_result); end

  def graphql_dead; end
  def graphql_dead=(_arg0); end
  def graphql_non_null_field_names; end
  def graphql_non_null_field_names=(_arg0); end
  def graphql_non_null_list_items; end
  def graphql_non_null_list_items=(_arg0); end
  def graphql_parent; end
  def graphql_result_data; end
  def graphql_result_data=(_arg0); end
  def graphql_result_name; end
end

class GraphQL::Execution::Interpreter::Runtime::GraphQLResultArray
  include ::GraphQL::Execution::Interpreter::Runtime::GraphQLResult

  def initialize(_result_name, _parent_result); end

  def []=(idx, value); end
  def graphql_skip_at(index); end
  def values; end
end

class GraphQL::Execution::Interpreter::Runtime::GraphQLResultHash
  include ::GraphQL::Execution::Interpreter::Runtime::GraphQLResult

  def initialize(_result_name, _parent_result); end

  def [](k); end
  def []=(key, value); end
  def delete(key); end
  def each; end
  def graphql_merged_into; end
  def graphql_merged_into=(_arg0); end
  def key?(k); end
  def values; end
end

class GraphQL::Execution::Interpreter::Runtime::GraphQLSelectionSet < ::Hash
  def graphql_directives; end
  def graphql_directives=(_arg0); end
end

GraphQL::Execution::Interpreter::Runtime::HALT = T.let(T.unsafe(nil), Object)
GraphQL::Execution::Interpreter::Runtime::NO_ARGS = T.let(T.unsafe(nil), Hash)

class GraphQL::Execution::Lazy
  def initialize(path: T.unsafe(nil), field: T.unsafe(nil), &get_value_func); end

  def field; end
  def path; end
  def then; end
  def value; end

  class << self
    def all(lazies); end
    def resolve(val); end
  end
end

class GraphQL::Execution::Lazy::LazyMethodMap
  def initialize(use_concurrent: T.unsafe(nil)); end

  def each; end
  def get(value); end
  def set(lazy_class, lazy_value_method); end

  protected

  def storage; end

  private

  def find_superclass_method(value_class); end
  def initialize_copy(other); end
end

class GraphQL::Execution::Lazy::LazyMethodMap::ConcurrentishMap
  extend ::Forwardable

  def initialize; end

  def []=(key, value); end
  def compute_if_absent(key); end
  def each_pair(*args, &block); end
  def size(*args, &block); end

  protected

  def copy_storage; end

  private

  def initialize_copy(other); end
end

GraphQL::Execution::Lazy::NullResult = T.let(T.unsafe(nil), GraphQL::Execution::Lazy)

module GraphQL::Execution::Lazy::Resolve
  class << self
    def deep_sync(val); end
    def each_lazy(acc, value); end
    def resolve(value); end
    def resolve_in_place(value); end
  end
end

module GraphQL::Execution::Lazy::Resolve::NullAccumulator
  class << self
    def <<(item); end
    def empty?; end
  end
end

class GraphQL::Execution::Lookahead
  def initialize(query:, ast_nodes:, field: T.unsafe(nil), root_type: T.unsafe(nil), owner_type: T.unsafe(nil)); end

  def arguments; end
  def ast_nodes; end
  def field; end
  def inspect; end
  def name; end
  def owner_type; end
  def selected?; end
  def selection(field_name, selected_type: T.unsafe(nil), arguments: T.unsafe(nil)); end
  def selections(arguments: T.unsafe(nil)); end
  def selects?(field_name, arguments: T.unsafe(nil)); end

  private

  def arguments_match?(arguments, field_defn, field_node); end
  def find_selected_nodes(node, field_name, field_defn, arguments:, matches:); end
  def find_selections(subselections_by_type, selections_on_type, selected_type, ast_selections, arguments); end
  def normalize_keyword(keyword); end
  def normalize_name(name); end
  def skipped_by_directive?(ast_selection); end
end

GraphQL::Execution::Lookahead::NULL_LOOKAHEAD = T.let(T.unsafe(nil), GraphQL::Execution::Lookahead::NullLookahead)

class GraphQL::Execution::Lookahead::NullLookahead < ::GraphQL::Execution::Lookahead
  def initialize; end

  def inspect; end
  def selected?; end
  def selection(*_arg0); end
  def selections(*_arg0); end
  def selects?(*_arg0); end
end

class GraphQL::Execution::Multiplex
  include ::GraphQL::Tracing::Traceable

  def initialize(schema:, queries:, context:, max_complexity:); end

  def context; end
  def dataloader; end
  def max_complexity; end
  def queries; end
  def schema; end

  class << self
    def begin_query(results, idx, query, multiplex); end
    def run_all(schema, query_options, context: T.unsafe(nil), max_complexity: T.unsafe(nil)); end

    private

    def finish_query(data_result, query, multiplex); end
  end
end

GraphQL::Execution::Multiplex::NO_OPERATION = T.let(T.unsafe(nil), Hash)
GraphQL::Execution::SKIP = T.let(T.unsafe(nil), GraphQL::Execution::Skip)
class GraphQL::Execution::Skip < ::GraphQL::Error; end

class GraphQL::ExecutionError < ::GraphQL::Error
  def initialize(message, ast_node: T.unsafe(nil), options: T.unsafe(nil), extensions: T.unsafe(nil)); end

  def ast_node; end
  def ast_node=(_arg0); end
  def extensions; end
  def extensions=(_arg0); end
  def options; end
  def options=(_arg0); end
  def path; end
  def path=(_arg0); end
  def to_h; end
end

class GraphQL::Filter
  def initialize(only: T.unsafe(nil), except: T.unsafe(nil)); end

  def call(member, ctx); end
  def merge(only: T.unsafe(nil), except: T.unsafe(nil)); end
end

class GraphQL::Filter::MergedExcept < ::GraphQL::Filter::MergedOnly
  def call(member, ctx); end
end

class GraphQL::Filter::MergedOnly
  def initialize(first, second); end

  def call(member, ctx); end

  class << self
    def build(onlies); end
  end
end

class GraphQL::IntegerDecodingError < ::GraphQL::RuntimeTypeError
  def initialize(value); end

  def integer_value; end
end

class GraphQL::IntegerEncodingError < ::GraphQL::RuntimeTypeError
  def initialize(value, context:); end

  def field; end
  def integer_value; end
  def path; end
end

module GraphQL::Introspection
  class << self
    def query(include_deprecated_args: T.unsafe(nil), include_schema_description: T.unsafe(nil), include_is_repeatable: T.unsafe(nil), include_specified_by_url: T.unsafe(nil)); end
  end
end

class GraphQL::Introspection::BaseObject < ::GraphQL::Schema::Object
  class << self
    def field(*args, **kwargs, &block); end
  end
end

class GraphQL::Introspection::DirectiveLocationEnum < ::GraphQL::Schema::Enum; end
class GraphQL::Introspection::DirectiveLocationEnum::UnresolvedValueError < ::GraphQL::Schema::Enum::UnresolvedValueError; end

class GraphQL::Introspection::DirectiveType < ::GraphQL::Introspection::BaseObject
  def args(include_deprecated:); end
end

class GraphQL::Introspection::DynamicFields < ::GraphQL::Introspection::BaseObject
  def __typename; end
end

class GraphQL::Introspection::EntryPoints < ::GraphQL::Introspection::BaseObject
  def __schema; end
  def __type(name:); end
end

class GraphQL::Introspection::EnumValueType < ::GraphQL::Introspection::BaseObject
  def is_deprecated; end
  def name; end
end

class GraphQL::Introspection::FieldType < ::GraphQL::Introspection::BaseObject
  def args(include_deprecated:); end
  def is_deprecated; end
end

GraphQL::Introspection::INTROSPECTION_QUERY = T.let(T.unsafe(nil), String)

class GraphQL::Introspection::InputValueType < ::GraphQL::Introspection::BaseObject
  def default_value; end
  def is_deprecated; end

  private

  def serialize_default_value(value, type); end
end

class GraphQL::Introspection::SchemaType < ::GraphQL::Introspection::BaseObject
  def directives; end
  def mutation_type; end
  def query_type; end
  def schema_description; end
  def subscription_type; end
  def types; end

  private

  def permitted_root_type(op_type); end
end

class GraphQL::Introspection::TypeKindEnum < ::GraphQL::Schema::Enum; end
class GraphQL::Introspection::TypeKindEnum::UnresolvedValueError < ::GraphQL::Schema::Enum::UnresolvedValueError; end

class GraphQL::Introspection::TypeType < ::GraphQL::Introspection::BaseObject
  def enum_values(include_deprecated:); end
  def fields(include_deprecated:); end
  def input_fields(include_deprecated:); end
  def interfaces; end
  def kind; end
  def of_type; end
  def possible_types; end
  def specified_by_url; end
end

class GraphQL::InvalidNameError < ::GraphQL::ExecutionError
  def initialize(name, valid_regex); end

  def name; end
  def valid_regex; end
end

class GraphQL::InvalidNullError < ::GraphQL::RuntimeTypeError
  def initialize(parent_type, field, value); end

  def field; end
  def parent_error?; end
  def parent_type; end
  def to_h; end
  def value; end

  class << self
    def inspect; end
    def parent_class; end
    def parent_class=(_arg0); end
    def subclass_for(parent_class); end
  end
end

class GraphQL::InvariantError < ::GraphQL::Error
  def initialize(message); end
end

module GraphQL::Language
  class << self
    def serialize(value); end
  end
end

module GraphQL::Language::BlockString
  class << self
    def break_line(line, length); end
    def print(str, indent: T.unsafe(nil)); end
    def trim_whitespace(str); end
  end
end

class GraphQL::Language::Cache
  def initialize(path); end

  def fetch(filename); end
end

GraphQL::Language::Cache::DIGEST = T.let(T.unsafe(nil), Digest::SHA256)

module GraphQL::Language::DefinitionSlice
  extend ::GraphQL::Language::DefinitionSlice

  def slice(document, name); end
end

class GraphQL::Language::DefinitionSlice::DependencyVisitor < ::GraphQL::Language::Visitor
  def initialize(doc, definitions, names); end

  def on_fragment_spread(node, parent); end

  class << self
    def find_definition_dependencies(definitions, name, names); end
  end
end

class GraphQL::Language::DocumentFromSchemaDefinition
  def initialize(schema, context: T.unsafe(nil), only: T.unsafe(nil), except: T.unsafe(nil), include_introspection_types: T.unsafe(nil), include_built_in_directives: T.unsafe(nil), include_built_in_scalars: T.unsafe(nil), always_include_schema: T.unsafe(nil)); end

  def build_argument_node(argument); end
  def build_argument_nodes(arguments); end
  def build_default_value(default_value, type); end
  def build_definition_nodes; end
  def build_directive_location_node(location); end
  def build_directive_location_nodes(locations); end
  def build_directive_node(directive); end
  def build_directive_nodes(directives); end
  def build_enum_type_node(enum_type); end
  def build_enum_value_node(enum_value); end
  def build_field_node(field); end
  def build_field_nodes(fields); end
  def build_input_object_node(input_object); end
  def build_interface_type_node(interface_type); end
  def build_object_type_node(object_type); end
  def build_scalar_type_node(scalar_type); end
  def build_schema_node; end
  def build_type_definition_node(type); end
  def build_type_definition_nodes(types); end
  def build_type_name_node(type); end
  def build_union_type_node(union_type); end
  def document; end

  private

  def always_include_schema; end
  def ast_directives(member); end
  def definition_directives(member); end
  def directives(member); end
  def include_built_in_directives; end
  def include_built_in_scalars; end
  def include_introspection_types; end
  def include_schema_node?; end
  def schema; end
  def schema_respects_root_name_conventions?(schema); end
  def warden; end
end

module GraphQL::Language::Generation
  extend ::GraphQL::Language::Generation

  def generate(node, indent: T.unsafe(nil), printer: T.unsafe(nil)); end
end

module GraphQL::Language::Lexer
  class << self
    def emit(token_name, ts, te, meta, token_value = T.unsafe(nil)); end
    def emit_string(ts, te, meta, block:); end
    def graphql_lexer_en_main; end
    def graphql_lexer_en_main=(_arg0); end
    def graphql_lexer_en_str; end
    def graphql_lexer_en_str=(_arg0); end
    def graphql_lexer_error; end
    def graphql_lexer_error=(_arg0); end
    def graphql_lexer_first_final; end
    def graphql_lexer_first_final=(_arg0); end
    def graphql_lexer_start; end
    def graphql_lexer_start=(_arg0); end
    def record_comment(ts, te, meta); end
    def replace_escaped_characters_in_place(raw_string); end
    def run_lexer(query_string); end
    def tokenize(query_string); end

    private

    def _graphql_lexer_char_class; end
    def _graphql_lexer_char_class=(_arg0); end
    def _graphql_lexer_cond_actions; end
    def _graphql_lexer_cond_actions=(_arg0); end
    def _graphql_lexer_cond_targs; end
    def _graphql_lexer_cond_targs=(_arg0); end
    def _graphql_lexer_eof_trans; end
    def _graphql_lexer_eof_trans=(_arg0); end
    def _graphql_lexer_from_state_actions; end
    def _graphql_lexer_from_state_actions=(_arg0); end
    def _graphql_lexer_index_defaults; end
    def _graphql_lexer_index_defaults=(_arg0); end
    def _graphql_lexer_index_offsets; end
    def _graphql_lexer_index_offsets=(_arg0); end
    def _graphql_lexer_indicies; end
    def _graphql_lexer_indicies=(_arg0); end
    def _graphql_lexer_nfa_offsets; end
    def _graphql_lexer_nfa_offsets=(_arg0); end
    def _graphql_lexer_nfa_pop_trans; end
    def _graphql_lexer_nfa_pop_trans=(_arg0); end
    def _graphql_lexer_nfa_push_actions; end
    def _graphql_lexer_nfa_push_actions=(_arg0); end
    def _graphql_lexer_nfa_targs; end
    def _graphql_lexer_nfa_targs=(_arg0); end
    def _graphql_lexer_to_state_actions; end
    def _graphql_lexer_to_state_actions=(_arg0); end
    def _graphql_lexer_trans_cond_spaces; end
    def _graphql_lexer_trans_cond_spaces=(_arg0); end
    def _graphql_lexer_trans_keys; end
    def _graphql_lexer_trans_keys=(_arg0); end
  end
end

GraphQL::Language::Lexer::ESCAPES = T.let(T.unsafe(nil), Regexp)
GraphQL::Language::Lexer::ESCAPES_REPLACE = T.let(T.unsafe(nil), Hash)
GraphQL::Language::Lexer::PACK_DIRECTIVE = T.let(T.unsafe(nil), String)
GraphQL::Language::Lexer::UTF_8 = T.let(T.unsafe(nil), Regexp)
GraphQL::Language::Lexer::UTF_8_ENCODING = T.let(T.unsafe(nil), String)
GraphQL::Language::Lexer::UTF_8_REPLACE = T.let(T.unsafe(nil), Proc)
GraphQL::Language::Lexer::VALID_STRING = T.let(T.unsafe(nil), Regexp)
module GraphQL::Language::Nodes; end

class GraphQL::Language::Nodes::AbstractNode
  def initialize(options = T.unsafe(nil)); end

  def ==(other); end
  def children; end
  def children_method_name; end
  def col; end
  def delete_child(previous_child); end
  def filename; end
  def line; end
  def merge(new_options); end
  def position; end
  def replace_child(previous_child, new_child); end
  def scalars; end
  def to_query_string(printer: T.unsafe(nil)); end

  protected

  def merge!(new_options); end

  private

  def initialize_copy(other); end

  class << self
    def inherited(child_class); end

    private

    def children_methods(children_of_type); end
    def generate_initialize_node; end
    def scalar_methods(*method_names); end
  end
end

module GraphQL::Language::Nodes::AbstractNode::DefinitionNode
  def initialize(options = T.unsafe(nil)); end

  def definition_line; end
end

GraphQL::Language::Nodes::AbstractNode::NO_CHILDREN = T.let(T.unsafe(nil), Array)

class GraphQL::Language::Nodes::Argument < ::GraphQL::Language::Nodes::AbstractNode
  def children; end
  def initialize_node(name: T.unsafe(nil), value: T.unsafe(nil)); end
  def name; end
  def scalars; end
  def value; end
  def visit_method; end

  class << self
    def children_method_name; end
    def children_method_name=(_arg0); end
  end
end

class GraphQL::Language::Nodes::Directive < ::GraphQL::Language::Nodes::AbstractNode
  def arguments; end
  def children; end
  def initialize_node(name: T.unsafe(nil), arguments: T.unsafe(nil)); end
  def merge_argument(node_opts); end
  def name; end
  def scalars; end
  def visit_method; end

  class << self
    def children_method_name; end
    def children_method_name=(_arg0); end
  end
end

class GraphQL::Language::Nodes::DirectiveDefinition < ::GraphQL::Language::Nodes::AbstractNode
  include ::GraphQL::Language::Nodes::AbstractNode::DefinitionNode

  def arguments; end
  def children; end
  def description; end
  def initialize_node(name: T.unsafe(nil), repeatable: T.unsafe(nil), description: T.unsafe(nil), locations: T.unsafe(nil), arguments: T.unsafe(nil)); end
  def locations; end
  def merge_argument(node_opts); end
  def merge_location(node_opts); end
  def name; end
  def repeatable; end
  def scalars; end
  def visit_method; end

  class << self
    def children_method_name; end
    def children_method_name=(_arg0); end
  end
end

class GraphQL::Language::Nodes::DirectiveLocation < ::GraphQL::Language::Nodes::NameOnlyNode
  def visit_method; end

  class << self
    def children_method_name; end
    def children_method_name=(_arg0); end
  end
end

class GraphQL::Language::Nodes::Document < ::GraphQL::Language::Nodes::AbstractNode
  def children; end
  def definitions; end
  def initialize_node(definitions: T.unsafe(nil)); end
  def slice_definition(name); end
  def visit_method; end

  class << self
    def children_method_name; end
    def children_method_name=(_arg0); end
  end
end

class GraphQL::Language::Nodes::Enum < ::GraphQL::Language::Nodes::NameOnlyNode
  def visit_method; end

  class << self
    def children_method_name; end
    def children_method_name=(_arg0); end
  end
end

class GraphQL::Language::Nodes::EnumTypeDefinition < ::GraphQL::Language::Nodes::AbstractNode
  include ::GraphQL::Language::Nodes::AbstractNode::DefinitionNode

  def children; end
  def description; end
  def directives; end
  def initialize_node(name: T.unsafe(nil), description: T.unsafe(nil), directives: T.unsafe(nil), values: T.unsafe(nil)); end
  def merge_directive(node_opts); end
  def merge_value(node_opts); end
  def name; end
  def scalars; end
  def values; end
  def visit_method; end

  class << self
    def children_method_name; end
    def children_method_name=(_arg0); end
  end
end

class GraphQL::Language::Nodes::EnumTypeExtension < ::GraphQL::Language::Nodes::AbstractNode
  def children; end
  def directives; end
  def initialize_node(name: T.unsafe(nil), directives: T.unsafe(nil), values: T.unsafe(nil)); end
  def merge_directive(node_opts); end
  def merge_value(node_opts); end
  def name; end
  def scalars; end
  def values; end
  def visit_method; end

  class << self
    def children_method_name; end
    def children_method_name=(_arg0); end
  end
end

class GraphQL::Language::Nodes::EnumValueDefinition < ::GraphQL::Language::Nodes::AbstractNode
  include ::GraphQL::Language::Nodes::AbstractNode::DefinitionNode

  def children; end
  def description; end
  def directives; end
  def initialize_node(name: T.unsafe(nil), description: T.unsafe(nil), directives: T.unsafe(nil)); end
  def merge_directive(node_opts); end
  def name; end
  def scalars; end
  def visit_method; end

  class << self
    def children_method_name; end
    def children_method_name=(_arg0); end
  end
end

class GraphQL::Language::Nodes::Field < ::GraphQL::Language::Nodes::AbstractNode
  def alias; end
  def arguments; end
  def children; end
  def directives; end
  def initialize_node(attributes); end
  def merge_argument(node_opts); end
  def merge_directive(node_opts); end
  def merge_selection(node_opts); end
  def name; end
  def scalars; end
  def selections; end
  def visit_method; end

  class << self
    def children_method_name; end
    def children_method_name=(_arg0); end
  end
end

GraphQL::Language::Nodes::Field::NONE = T.let(T.unsafe(nil), Array)

class GraphQL::Language::Nodes::FieldDefinition < ::GraphQL::Language::Nodes::AbstractNode
  include ::GraphQL::Language::Nodes::AbstractNode::DefinitionNode

  def arguments; end
  def children; end
  def description; end
  def directives; end
  def fields; end
  def initialize_node(name: T.unsafe(nil), type: T.unsafe(nil), description: T.unsafe(nil), directives: T.unsafe(nil), arguments: T.unsafe(nil)); end
  def merge(new_options); end
  def merge_argument(node_opts); end
  def merge_directive(node_opts); end
  def name; end
  def scalars; end
  def type; end
  def visit_method; end

  class << self
    def children_method_name; end
    def children_method_name=(_arg0); end
  end
end

class GraphQL::Language::Nodes::FragmentDefinition < ::GraphQL::Language::Nodes::AbstractNode
  def children; end
  def directives; end
  def initialize_node(name: T.unsafe(nil), type: T.unsafe(nil), directives: T.unsafe(nil), selections: T.unsafe(nil)); end
  def merge_directive(node_opts); end
  def merge_selection(node_opts); end
  def name; end
  def scalars; end
  def selections; end
  def type; end
  def visit_method; end

  class << self
    def children_method_name; end
    def children_method_name=(_arg0); end
  end
end

class GraphQL::Language::Nodes::FragmentSpread < ::GraphQL::Language::Nodes::AbstractNode
  def children; end
  def directives; end
  def initialize_node(name: T.unsafe(nil), directives: T.unsafe(nil)); end
  def merge_directive(node_opts); end
  def name; end
  def scalars; end
  def visit_method; end

  class << self
    def children_method_name; end
    def children_method_name=(_arg0); end
  end
end

class GraphQL::Language::Nodes::InlineFragment < ::GraphQL::Language::Nodes::AbstractNode
  def children; end
  def directives; end
  def initialize_node(type: T.unsafe(nil), selections: T.unsafe(nil), directives: T.unsafe(nil)); end
  def merge_directive(node_opts); end
  def merge_selection(node_opts); end
  def scalars; end
  def selections; end
  def type; end
  def visit_method; end

  class << self
    def children_method_name; end
    def children_method_name=(_arg0); end
  end
end

class GraphQL::Language::Nodes::InputObject < ::GraphQL::Language::Nodes::AbstractNode
  def arguments; end
  def children; end
  def initialize_node(arguments: T.unsafe(nil)); end
  def merge_argument(node_opts); end
  def to_h(options = T.unsafe(nil)); end
  def visit_method; end

  private

  def serialize_value_for_hash(value); end

  class << self
    def children_method_name; end
    def children_method_name=(_arg0); end
  end
end

class GraphQL::Language::Nodes::InputObjectTypeDefinition < ::GraphQL::Language::Nodes::AbstractNode
  include ::GraphQL::Language::Nodes::AbstractNode::DefinitionNode

  def children; end
  def description; end
  def directives; end
  def fields; end
  def initialize_node(name: T.unsafe(nil), description: T.unsafe(nil), directives: T.unsafe(nil), fields: T.unsafe(nil)); end
  def merge_directive(node_opts); end
  def merge_field(node_opts); end
  def name; end
  def scalars; end
  def visit_method; end

  class << self
    def children_method_name; end
    def children_method_name=(_arg0); end
  end
end

class GraphQL::Language::Nodes::InputObjectTypeExtension < ::GraphQL::Language::Nodes::AbstractNode
  def children; end
  def directives; end
  def fields; end
  def initialize_node(name: T.unsafe(nil), directives: T.unsafe(nil), fields: T.unsafe(nil)); end
  def merge_directive(node_opts); end
  def merge_field(node_opts); end
  def name; end
  def scalars; end
  def visit_method; end

  class << self
    def children_method_name; end
    def children_method_name=(_arg0); end
  end
end

class GraphQL::Language::Nodes::InputValueDefinition < ::GraphQL::Language::Nodes::AbstractNode
  include ::GraphQL::Language::Nodes::AbstractNode::DefinitionNode

  def children; end
  def default_value; end
  def description; end
  def directives; end
  def initialize_node(name: T.unsafe(nil), type: T.unsafe(nil), default_value: T.unsafe(nil), description: T.unsafe(nil), directives: T.unsafe(nil)); end
  def merge_directive(node_opts); end
  def name; end
  def scalars; end
  def type; end
  def visit_method; end

  class << self
    def children_method_name; end
    def children_method_name=(_arg0); end
  end
end

class GraphQL::Language::Nodes::InterfaceTypeDefinition < ::GraphQL::Language::Nodes::AbstractNode
  include ::GraphQL::Language::Nodes::AbstractNode::DefinitionNode

  def children; end
  def description; end
  def directives; end
  def fields; end
  def initialize_node(name: T.unsafe(nil), description: T.unsafe(nil), interfaces: T.unsafe(nil), directives: T.unsafe(nil), fields: T.unsafe(nil)); end
  def interfaces; end
  def merge_directive(node_opts); end
  def merge_field(node_opts); end
  def merge_interface(node_opts); end
  def name; end
  def scalars; end
  def visit_method; end

  class << self
    def children_method_name; end
    def children_method_name=(_arg0); end
  end
end

class GraphQL::Language::Nodes::InterfaceTypeExtension < ::GraphQL::Language::Nodes::AbstractNode
  def children; end
  def directives; end
  def fields; end
  def initialize_node(name: T.unsafe(nil), interfaces: T.unsafe(nil), directives: T.unsafe(nil), fields: T.unsafe(nil)); end
  def interfaces; end
  def merge_directive(node_opts); end
  def merge_field(node_opts); end
  def merge_interface(node_opts); end
  def name; end
  def scalars; end
  def visit_method; end

  class << self
    def children_method_name; end
    def children_method_name=(_arg0); end
  end
end

class GraphQL::Language::Nodes::ListType < ::GraphQL::Language::Nodes::WrapperType
  def visit_method; end

  class << self
    def children_method_name; end
    def children_method_name=(_arg0); end
  end
end

class GraphQL::Language::Nodes::NameOnlyNode < ::GraphQL::Language::Nodes::AbstractNode
  def initialize_node(name: T.unsafe(nil)); end
  def name; end
  def scalars; end
  def visit_method; end

  class << self
    def children_method_name; end
    def children_method_name=(_arg0); end
  end
end

class GraphQL::Language::Nodes::NonNullType < ::GraphQL::Language::Nodes::WrapperType
  def visit_method; end

  class << self
    def children_method_name; end
    def children_method_name=(_arg0); end
  end
end

class GraphQL::Language::Nodes::NullValue < ::GraphQL::Language::Nodes::NameOnlyNode
  def visit_method; end

  class << self
    def children_method_name; end
    def children_method_name=(_arg0); end
  end
end

class GraphQL::Language::Nodes::ObjectTypeDefinition < ::GraphQL::Language::Nodes::AbstractNode
  include ::GraphQL::Language::Nodes::AbstractNode::DefinitionNode

  def children; end
  def description; end
  def directives; end
  def fields; end
  def initialize_node(name: T.unsafe(nil), interfaces: T.unsafe(nil), description: T.unsafe(nil), directives: T.unsafe(nil), fields: T.unsafe(nil)); end
  def interfaces; end
  def merge_directive(node_opts); end
  def merge_field(node_opts); end
  def name; end
  def scalars; end
  def visit_method; end

  class << self
    def children_method_name; end
    def children_method_name=(_arg0); end
  end
end

class GraphQL::Language::Nodes::ObjectTypeExtension < ::GraphQL::Language::Nodes::AbstractNode
  def children; end
  def directives; end
  def fields; end
  def initialize_node(name: T.unsafe(nil), interfaces: T.unsafe(nil), directives: T.unsafe(nil), fields: T.unsafe(nil)); end
  def interfaces; end
  def merge_directive(node_opts); end
  def merge_field(node_opts); end
  def name; end
  def scalars; end
  def visit_method; end

  class << self
    def children_method_name; end
    def children_method_name=(_arg0); end
  end
end

class GraphQL::Language::Nodes::OperationDefinition < ::GraphQL::Language::Nodes::AbstractNode
  def children; end
  def directives; end
  def initialize_node(operation_type: T.unsafe(nil), name: T.unsafe(nil), variables: T.unsafe(nil), selections: T.unsafe(nil), directives: T.unsafe(nil)); end
  def merge_directive(node_opts); end
  def merge_selection(node_opts); end
  def merge_variable(node_opts); end
  def name; end
  def operation_type; end
  def scalars; end
  def selections; end
  def variables; end
  def visit_method; end

  class << self
    def children_method_name; end
    def children_method_name=(_arg0); end
  end
end

class GraphQL::Language::Nodes::ScalarTypeDefinition < ::GraphQL::Language::Nodes::AbstractNode
  include ::GraphQL::Language::Nodes::AbstractNode::DefinitionNode

  def children; end
  def description; end
  def directives; end
  def initialize_node(name: T.unsafe(nil), description: T.unsafe(nil), directives: T.unsafe(nil)); end
  def merge_directive(node_opts); end
  def name; end
  def scalars; end
  def visit_method; end

  class << self
    def children_method_name; end
    def children_method_name=(_arg0); end
  end
end

class GraphQL::Language::Nodes::ScalarTypeExtension < ::GraphQL::Language::Nodes::AbstractNode
  def children; end
  def directives; end
  def initialize_node(name: T.unsafe(nil), directives: T.unsafe(nil)); end
  def merge_directive(node_opts); end
  def name; end
  def scalars; end
  def visit_method; end

  class << self
    def children_method_name; end
    def children_method_name=(_arg0); end
  end
end

class GraphQL::Language::Nodes::SchemaDefinition < ::GraphQL::Language::Nodes::AbstractNode
  include ::GraphQL::Language::Nodes::AbstractNode::DefinitionNode

  def children; end
  def directives; end
  def initialize_node(query: T.unsafe(nil), mutation: T.unsafe(nil), subscription: T.unsafe(nil), directives: T.unsafe(nil)); end
  def merge_directive(node_opts); end
  def mutation; end
  def query; end
  def scalars; end
  def subscription; end
  def visit_method; end

  class << self
    def children_method_name; end
    def children_method_name=(_arg0); end
  end
end

class GraphQL::Language::Nodes::SchemaExtension < ::GraphQL::Language::Nodes::AbstractNode
  def children; end
  def directives; end
  def initialize_node(query: T.unsafe(nil), mutation: T.unsafe(nil), subscription: T.unsafe(nil), directives: T.unsafe(nil)); end
  def merge_directive(node_opts); end
  def mutation; end
  def query; end
  def scalars; end
  def subscription; end
  def visit_method; end

  class << self
    def children_method_name; end
    def children_method_name=(_arg0); end
  end
end

class GraphQL::Language::Nodes::TypeName < ::GraphQL::Language::Nodes::NameOnlyNode
  def visit_method; end

  class << self
    def children_method_name; end
    def children_method_name=(_arg0); end
  end
end

class GraphQL::Language::Nodes::UnionTypeDefinition < ::GraphQL::Language::Nodes::AbstractNode
  include ::GraphQL::Language::Nodes::AbstractNode::DefinitionNode

  def children; end
  def description; end
  def directives; end
  def initialize_node(name: T.unsafe(nil), types: T.unsafe(nil), description: T.unsafe(nil), directives: T.unsafe(nil)); end
  def merge_directive(node_opts); end
  def name; end
  def scalars; end
  def types; end
  def visit_method; end

  class << self
    def children_method_name; end
    def children_method_name=(_arg0); end
  end
end

class GraphQL::Language::Nodes::UnionTypeExtension < ::GraphQL::Language::Nodes::AbstractNode
  def children; end
  def directives; end
  def initialize_node(name: T.unsafe(nil), types: T.unsafe(nil), directives: T.unsafe(nil)); end
  def merge_directive(node_opts); end
  def name; end
  def scalars; end
  def types; end
  def visit_method; end

  class << self
    def children_method_name; end
    def children_method_name=(_arg0); end
  end
end

class GraphQL::Language::Nodes::VariableDefinition < ::GraphQL::Language::Nodes::AbstractNode
  def default_value; end
  def initialize_node(name: T.unsafe(nil), type: T.unsafe(nil), default_value: T.unsafe(nil)); end
  def name; end
  def scalars; end
  def type; end
  def visit_method; end

  class << self
    def children_method_name; end
    def children_method_name=(_arg0); end
  end
end

class GraphQL::Language::Nodes::VariableIdentifier < ::GraphQL::Language::Nodes::NameOnlyNode
  def visit_method; end

  class << self
    def children_method_name; end
    def children_method_name=(_arg0); end
  end
end

class GraphQL::Language::Nodes::WrapperType < ::GraphQL::Language::Nodes::AbstractNode
  def initialize_node(of_type: T.unsafe(nil)); end
  def of_type; end
  def scalars; end
  def visit_method; end

  class << self
    def children_method_name; end
    def children_method_name=(_arg0); end
  end
end

class GraphQL::Language::Parser < ::Racc::Parser
  def initialize(query_string, filename:, tracer: T.unsafe(nil)); end

  def _reduce_10(val, _values, result); end
  def _reduce_100(val, _values, result); end
  def _reduce_102(val, _values, result); end
  def _reduce_103(val, _values, result); end
  def _reduce_104(val, _values, result); end
  def _reduce_105(val, _values, result); end
  def _reduce_106(val, _values, result); end
  def _reduce_107(val, _values, result); end
  def _reduce_108(val, _values, result); end
  def _reduce_109(val, _values, result); end
  def _reduce_11(val, _values, result); end
  def _reduce_114(val, _values, result); end
  def _reduce_116(val, _values, result); end
  def _reduce_117(val, _values, result); end
  def _reduce_12(val, _values, result); end
  def _reduce_126(val, _values, result); end
  def _reduce_127(val, _values, result); end
  def _reduce_134(val, _values, result); end
  def _reduce_135(val, _values, result); end
  def _reduce_136(val, _values, result); end
  def _reduce_137(val, _values, result); end
  def _reduce_138(val, _values, result); end
  def _reduce_139(val, _values, result); end
  def _reduce_140(val, _values, result); end
  def _reduce_141(val, _values, result); end
  def _reduce_142(val, _values, result); end
  def _reduce_143(val, _values, result); end
  def _reduce_144(val, _values, result); end
  def _reduce_145(val, _values, result); end
  def _reduce_146(val, _values, result); end
  def _reduce_147(val, _values, result); end
  def _reduce_151(val, _values, result); end
  def _reduce_152(val, _values, result); end
  def _reduce_153(val, _values, result); end
  def _reduce_155(val, _values, result); end
  def _reduce_156(val, _values, result); end
  def _reduce_157(val, _values, result); end
  def _reduce_158(val, _values, result); end
  def _reduce_159(val, _values, result); end
  def _reduce_16(val, _values, result); end
  def _reduce_160(val, _values, result); end
  def _reduce_161(val, _values, result); end
  def _reduce_162(val, _values, result); end
  def _reduce_163(val, _values, result); end
  def _reduce_164(val, _values, result); end
  def _reduce_165(val, _values, result); end
  def _reduce_166(val, _values, result); end
  def _reduce_167(val, _values, result); end
  def _reduce_168(val, _values, result); end
  def _reduce_169(val, _values, result); end
  def _reduce_170(val, _values, result); end
  def _reduce_171(val, _values, result); end
  def _reduce_172(val, _values, result); end
  def _reduce_173(val, _values, result); end
  def _reduce_174(val, _values, result); end
  def _reduce_175(val, _values, result); end
  def _reduce_176(val, _values, result); end
  def _reduce_177(val, _values, result); end
  def _reduce_18(val, _values, result); end
  def _reduce_180(val, _values, result); end
  def _reduce_181(val, _values, result); end
  def _reduce_19(val, _values, result); end
  def _reduce_2(val, _values, result); end
  def _reduce_20(val, _values, result); end
  def _reduce_21(val, _values, result); end
  def _reduce_22(val, _values, result); end
  def _reduce_23(val, _values, result); end
  def _reduce_24(val, _values, result); end
  def _reduce_25(val, _values, result); end
  def _reduce_26(val, _values, result); end
  def _reduce_27(val, _values, result); end
  def _reduce_28(val, _values, result); end
  def _reduce_29(val, _values, result); end
  def _reduce_3(val, _values, result); end
  def _reduce_30(val, _values, result); end
  def _reduce_31(val, _values, result); end
  def _reduce_32(val, _values, result); end
  def _reduce_33(val, _values, result); end
  def _reduce_37(val, _values, result); end
  def _reduce_38(val, _values, result); end
  def _reduce_4(val, _values, result); end
  def _reduce_63(val, _values, result); end
  def _reduce_64(val, _values, result); end
  def _reduce_65(val, _values, result); end
  def _reduce_66(val, _values, result); end
  def _reduce_67(val, _values, result); end
  def _reduce_68(val, _values, result); end
  def _reduce_69(val, _values, result); end
  def _reduce_70(val, _values, result); end
  def _reduce_71(val, _values, result); end
  def _reduce_72(val, _values, result); end
  def _reduce_73(val, _values, result); end
  def _reduce_74(val, _values, result); end
  def _reduce_75(val, _values, result); end
  def _reduce_83(val, _values, result); end
  def _reduce_84(val, _values, result); end
  def _reduce_85(val, _values, result); end
  def _reduce_86(val, _values, result); end
  def _reduce_87(val, _values, result); end
  def _reduce_88(val, _values, result); end
  def _reduce_89(val, _values, result); end
  def _reduce_90(val, _values, result); end
  def _reduce_91(val, _values, result); end
  def _reduce_92(val, _values, result); end
  def _reduce_93(val, _values, result); end
  def _reduce_94(val, _values, result); end
  def _reduce_95(val, _values, result); end
  def _reduce_96(val, _values, result); end
  def _reduce_97(val, _values, result); end
  def _reduce_98(val, _values, result); end
  def _reduce_99(val, _values, result); end
  def _reduce_none(val, _values, result); end
  def parse_document; end

  private

  def get_description(token); end
  def make_node(node_name, assigns); end
  def next_token; end
  def on_error(parser_token_id, lexer_token, vstack); end

  class << self
    def cache; end
    def cache=(_arg0); end
    def parse(query_string, filename: T.unsafe(nil), tracer: T.unsafe(nil)); end
    def parse_file(filename, tracer: T.unsafe(nil)); end
  end
end

GraphQL::Language::Parser::EMPTY_ARRAY = T.let(T.unsafe(nil), Array)
GraphQL::Language::Parser::Racc_arg = T.let(T.unsafe(nil), Array)
GraphQL::Language::Parser::Racc_token_to_s_table = T.let(T.unsafe(nil), Array)

class GraphQL::Language::Printer
  def print(node, indent: T.unsafe(nil)); end

  protected

  def print_argument(argument); end
  def print_arguments(arguments, indent: T.unsafe(nil)); end
  def print_description(node, indent: T.unsafe(nil), first_in_block: T.unsafe(nil)); end
  def print_directive(directive); end
  def print_directive_definition(directive); end
  def print_directives(directives); end
  def print_document(document); end
  def print_enum(enum); end
  def print_enum_type_definition(enum_type); end
  def print_enum_value_definition(enum_value); end
  def print_field(field, indent: T.unsafe(nil)); end
  def print_field_definition(field); end
  def print_field_definitions(fields); end
  def print_fragment_definition(fragment_def, indent: T.unsafe(nil)); end
  def print_fragment_spread(fragment_spread, indent: T.unsafe(nil)); end
  def print_implements(type); end
  def print_inline_fragment(inline_fragment, indent: T.unsafe(nil)); end
  def print_input_object(input_object); end
  def print_input_object_type_definition(input_object_type); end
  def print_input_value_definition(input_value); end
  def print_interface_type_definition(interface_type); end
  def print_list_type(list_type); end
  def print_node(node, indent: T.unsafe(nil)); end
  def print_non_null_type(non_null_type); end
  def print_null_value; end
  def print_object_type_definition(object_type); end
  def print_operation_definition(operation_definition, indent: T.unsafe(nil)); end
  def print_scalar_type_definition(scalar_type); end
  def print_schema_definition(schema); end
  def print_selections(selections, indent: T.unsafe(nil)); end
  def print_type_name(type_name); end
  def print_union_type_definition(union_type); end
  def print_variable_definition(variable_definition); end
  def print_variable_identifier(variable_identifier); end

  private

  def node; end
end

class GraphQL::Language::SanitizedPrinter < ::GraphQL::Language::Printer
  def initialize(query, inline_variables: T.unsafe(nil)); end

  def coerce_argument_value_to_list?(type, value); end
  def print_argument(argument); end
  def print_directive(directive); end
  def print_field(field, indent: T.unsafe(nil)); end
  def print_fragment_definition(fragment_def, indent: T.unsafe(nil)); end
  def print_inline_fragment(inline_fragment, indent: T.unsafe(nil)); end
  def print_node(node, indent: T.unsafe(nil)); end
  def print_operation_definition(operation_definition, indent: T.unsafe(nil)); end
  def print_variable_identifier(variable_id); end
  def redact_argument_value?(argument, value); end
  def redacted_argument_value(argument); end
  def sanitized_query_string; end

  private

  def query; end
  def value_to_ast(value, type); end
end

GraphQL::Language::SanitizedPrinter::REDACTED = T.let(T.unsafe(nil), String)

class GraphQL::Language::Token
  def initialize(name, value, line, col, prev_token); end

  def col; end
  def inspect; end
  def line; end
  def line_and_column; end
  def name; end
  def prev_token; end
  def to_f; end
  def to_i; end
  def to_s; end
  def value; end
end

class GraphQL::Language::Visitor
  def initialize(document); end

  def [](node_class); end
  def on_abstract_node(node, parent); end
  def on_argument(node, parent); end
  def on_directive(node, parent); end
  def on_directive_definition(node, parent); end
  def on_directive_location(node, parent); end
  def on_document(node, parent); end
  def on_enum(node, parent); end
  def on_enum_type_definition(node, parent); end
  def on_enum_type_extension(node, parent); end
  def on_enum_value_definition(node, parent); end
  def on_field(node, parent); end
  def on_field_definition(node, parent); end
  def on_fragment_definition(node, parent); end
  def on_fragment_spread(node, parent); end
  def on_inline_fragment(node, parent); end
  def on_input_object(node, parent); end
  def on_input_object_type_definition(node, parent); end
  def on_input_object_type_extension(node, parent); end
  def on_input_value_definition(node, parent); end
  def on_interface_type_definition(node, parent); end
  def on_interface_type_extension(node, parent); end
  def on_list_type(node, parent); end
  def on_non_null_type(node, parent); end
  def on_null_value(node, parent); end
  def on_object_type_definition(node, parent); end
  def on_object_type_extension(node, parent); end
  def on_operation_definition(node, parent); end
  def on_scalar_type_definition(node, parent); end
  def on_scalar_type_extension(node, parent); end
  def on_schema_definition(node, parent); end
  def on_schema_extension(node, parent); end
  def on_type_name(node, parent); end
  def on_union_type_definition(node, parent); end
  def on_union_type_extension(node, parent); end
  def on_variable_definition(node, parent); end
  def on_variable_identifier(node, parent); end
  def result; end
  def visit; end
  def visit_node(node, parent); end

  private

  def begin_visit(node, parent); end
  def end_visit(node, parent); end
  def on_node_with_modifications(node, parent); end

  class << self
    def apply_hooks(hooks, node, parent); end
    def make_visit_method(node_method); end
  end
end

GraphQL::Language::Visitor::DELETE_NODE = T.let(T.unsafe(nil), GraphQL::Language::Visitor::DeleteNode)
class GraphQL::Language::Visitor::DeleteNode; end

class GraphQL::Language::Visitor::NodeVisitor
  def initialize; end

  def <<(hook); end
  def enter; end
  def leave; end
end

GraphQL::Language::Visitor::SKIP = T.let(T.unsafe(nil), Symbol)

class GraphQL::LoadApplicationObjectFailedError < ::GraphQL::ExecutionError
  def initialize(argument:, id:, object:); end

  def argument; end
  def id; end
  def object; end
end

class GraphQL::NameValidator
  class << self
    def validate!(name); end
  end
end

GraphQL::NameValidator::VALID_NAME_REGEX = T.let(T.unsafe(nil), Regexp)
module GraphQL::Pagination; end

class GraphQL::Pagination::ActiveRecordRelationConnection < ::GraphQL::Pagination::RelationConnection
  private

  def already_loaded?(relation); end
  def null_relation(relation); end
  def relation_count(relation); end
  def relation_larger_than(relation, initial_offset, size); end
  def relation_limit(relation); end
  def relation_offset(relation); end
  def set_limit(nodes, limit); end
  def set_offset(nodes, offset); end
end

class GraphQL::Pagination::ArrayConnection < ::GraphQL::Pagination::Connection
  def cursor_for(item); end
  def has_next_page; end
  def has_previous_page; end
  def nodes; end

  private

  def index_from_cursor(cursor); end
  def load_nodes; end
end

class GraphQL::Pagination::Connection
  def initialize(items, parent: T.unsafe(nil), field: T.unsafe(nil), context: T.unsafe(nil), first: T.unsafe(nil), after: T.unsafe(nil), max_page_size: T.unsafe(nil), last: T.unsafe(nil), before: T.unsafe(nil), edge_class: T.unsafe(nil), arguments: T.unsafe(nil)); end

  def after; end
  def after_value; end
  def after_value=(_arg0); end
  def arguments; end
  def arguments=(_arg0); end
  def before; end
  def before_value; end
  def before_value=(_arg0); end
  def context; end
  def context=(_arg0); end
  def cursor_for(item); end
  def edge_class; end
  def edge_class=(_arg0); end
  def edge_nodes; end
  def edges; end
  def end_cursor; end
  def field; end
  def field=(_arg0); end
  def first; end
  def first=(_arg0); end
  def first_value; end
  def first_value=(_arg0); end
  def has_max_page_size_override?; end
  def has_next_page; end
  def has_previous_page; end
  def items; end
  def last; end
  def last=(_arg0); end
  def last_value; end
  def last_value=(_arg0); end
  def max_page_size; end
  def max_page_size=(new_value); end
  def nodes; end
  def page_info; end
  def parent; end
  def parent=(_arg0); end
  def range_add_edge(item); end
  def start_cursor; end

  private

  def decode(cursor); end
  def encode(cursor); end
  def limit_pagination_argument(argument, max_page_size); end
end

class GraphQL::Pagination::Connection::Edge
  def initialize(node, connection); end

  def cursor; end
  def node; end
  def parent; end
end

class GraphQL::Pagination::Connection::PaginationImplementationMissingError < ::GraphQL::Error; end

class GraphQL::Pagination::Connections
  def initialize(schema:); end

  def add(nodes_class, implementation); end
  def all_wrappers; end
  def delete(nodes_class); end
  def edge_class_for_field(field); end
  def wrap(field, parent, items, arguments, context); end
  def wrapper_for(items, wrappers: T.unsafe(nil)); end

  protected

  def wrappers; end

  private

  def add_default; end
end

class GraphQL::Pagination::Connections::ImplementationMissingError < ::GraphQL::Error; end

class GraphQL::Pagination::MongoidRelationConnection < ::GraphQL::Pagination::RelationConnection
  def null_relation(relation); end
  def relation_count(relation); end
  def relation_limit(relation); end
  def relation_offset(relation); end
end

class GraphQL::Pagination::RelationConnection < ::GraphQL::Pagination::Connection
  def cursor_for(item); end
  def has_next_page; end
  def has_previous_page; end
  def nodes; end

  private

  def after_offset; end
  def before_offset; end
  def calculate_sliced_nodes_parameters; end
  def limited_nodes; end
  def load_nodes; end
  def null_relation(relation); end
  def offset_from_cursor(cursor); end
  def relation_count(relation); end
  def relation_larger_than(relation, _initial_offset, size); end
  def relation_limit(relation); end
  def relation_offset(relation); end
  def set_limit(relation, limit_value); end
  def set_offset(relation, offset_value); end
  def sliced_nodes; end
end

class GraphQL::Pagination::SequelDatasetConnection < ::GraphQL::Pagination::RelationConnection
  private

  def null_relation(relation); end
  def relation_count(relation); end
  def relation_limit(relation); end
  def relation_offset(relation); end
end

class GraphQL::ParseError < ::GraphQL::Error
  def initialize(message, line, col, query, filename: T.unsafe(nil)); end

  def col; end
  def line; end
  def query; end
  def to_h; end
end

class GraphQL::Query
  include ::GraphQL::Tracing::Traceable
  extend ::Forwardable

  def initialize(schema, query_string = T.unsafe(nil), query: T.unsafe(nil), document: T.unsafe(nil), context: T.unsafe(nil), variables: T.unsafe(nil), validate: T.unsafe(nil), subscription_topic: T.unsafe(nil), operation_name: T.unsafe(nil), root_value: T.unsafe(nil), max_depth: T.unsafe(nil), max_complexity: T.unsafe(nil), except: T.unsafe(nil), only: T.unsafe(nil), warden: T.unsafe(nil)); end

  def analysis_errors; end
  def analysis_errors=(_arg0); end
  def analyzers(*args, &block); end
  def arguments_cache; end
  def arguments_for(ast_node, definition, parent_object: T.unsafe(nil)); end
  def ast_analyzers(*args, &block); end
  def context; end
  def document; end
  def executed?; end
  def fingerprint; end
  def fragments; end
  def get_field(*args, &block); end
  def get_type(*args, &block); end
  def inspect; end
  def interpreter?; end
  def lookahead; end
  def max_complexity(*args, &block); end
  def max_depth(*args, &block); end
  def merge_filters(only: T.unsafe(nil), except: T.unsafe(nil)); end
  def multiplex; end
  def multiplex=(_arg0); end
  def mutation?; end
  def operation_fingerprint; end
  def operation_name; end
  def operation_name=(_arg0); end
  def operations; end
  def possible_types(*args, &block); end
  def provided_variables; end
  def query?; end
  def query_string; end
  def query_string=(_arg0); end
  def resolve_type(abstract_type, value = T.unsafe(nil)); end
  def result; end
  def result_values; end
  def result_values=(result_hash); end
  def root_type_for_operation(*args, &block); end
  def root_value; end
  def root_value=(_arg0); end
  def sanitized_query_string(inline_variables: T.unsafe(nil)); end
  def schema; end
  def selected_operation; end
  def selected_operation_name; end
  def static_errors; end
  def subscription?; end
  def subscription_topic; end
  def subscription_update?; end
  def tracers; end
  def valid?; end
  def validate; end
  def validate=(_arg0); end
  def validation_errors(*args, &block); end
  def validation_pipeline; end
  def variables; end
  def variables_fingerprint; end
  def warden; end
  def with_error_handling; end

  private

  def find_operation(operations, operation_name); end
  def prepare_ast; end
  def with_prepared_ast; end
end

class GraphQL::Query::Context
  include ::GraphQL::Query::Context::SharedMethods
  extend ::Forwardable

  def initialize(query:, values:, object:, schema: T.unsafe(nil)); end

  def [](key); end
  def []=(key, value); end
  def dataloader; end
  def delete(key); end
  def dig(key, *other_keys); end
  def errors; end
  def fetch(key, default = T.unsafe(nil)); end
  def inspect; end
  def interpreter=(_arg0); end
  def interpreter?(*args, &block); end
  def key?(key); end
  def namespace(ns); end
  def namespace?(ns); end
  def path; end
  def query; end
  def response_extensions; end
  def schema; end
  def scoped_context; end
  def scoped_merge!(hash); end
  def scoped_set!(key, value); end
  def to_h; end
  def to_hash; end
  def trace(*args, &block); end
  def value=(_arg0); end
  def warden; end
  def warden=(_arg0); end
end

class GraphQL::Query::Context::ExecutionErrors
  def initialize(ctx); end

  def >>(err_or_msg); end
  def add(err_or_msg); end
  def push(err_or_msg); end
end

class GraphQL::Query::Context::ScopedContext
  def initialize(query_context); end

  def [](key); end
  def current_path; end
  def dig(key, *other_keys); end
  def key?(key); end
  def merge!(hash); end
  def merged_context; end

  private

  def each_present_path_ctx; end
end

module GraphQL::Query::Context::SharedMethods
  def add_error(error); end
  def backtrace; end
  def execution_errors; end
  def skip; end
end

GraphQL::Query::Context::UNSPECIFIED_FETCH_DEFAULT = T.let(T.unsafe(nil), Object)

module GraphQL::Query::Fingerprint
  class << self
    def generate(input_str); end
  end
end

class GraphQL::Query::InputValidationResult
  def initialize(valid: T.unsafe(nil), problems: T.unsafe(nil)); end

  def add_problem(explanation, path = T.unsafe(nil), extensions: T.unsafe(nil), message: T.unsafe(nil)); end
  def merge_result!(path, inner_result); end
  def problems; end
  def problems=(_arg0); end
  def valid?; end

  class << self
    def from_problem(explanation, path = T.unsafe(nil), extensions: T.unsafe(nil), message: T.unsafe(nil)); end
  end
end

GraphQL::Query::InputValidationResult::VALID = T.let(T.unsafe(nil), GraphQL::Query::InputValidationResult)

class GraphQL::Query::NullContext
  def initialize; end

  def [](key); end
  def dataloader; end
  def interpreter?; end
  def query; end
  def schema; end
  def warden; end

  class << self
    def [](key); end
    def dataloader(*args, &block); end
    def instance; end
    def interpreter?(*args, &block); end
    def query(*args, &block); end
    def schema(*args, &block); end
    def warden(*args, &block); end
  end
end

class GraphQL::Query::NullContext::NullQuery
  def with_error_handling; end
end

class GraphQL::Query::NullContext::NullSchema < ::GraphQL::Schema; end

class GraphQL::Query::NullContext::NullWarden < ::GraphQL::Schema::Warden
  def visible_argument?(arg, ctx); end
  def visible_enum_value?(ev, ctx); end
  def visible_field?(field, ctx); end
  def visible_type?(type, ctx); end
  def visible_type_membership?(tm, ctx); end
end

class GraphQL::Query::OperationNameMissingError < ::GraphQL::ExecutionError
  def initialize(name); end
end

class GraphQL::Query::Result
  extend ::Forwardable

  def initialize(query:, values:); end

  def ==(other); end
  def [](*args, &block); end
  def as_json(*args, &block); end
  def context(*args, &block); end
  def inspect; end
  def keys(*args, &block); end
  def method_missing(method_name, *args, &block); end
  def mutation?(*args, &block); end
  def query; end
  def query?(*args, &block); end
  def subscription?(*args, &block); end
  def to_h; end
  def to_json(*args, &block); end
  def values(*args, &block); end

  private

  def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end
end

class GraphQL::Query::ValidationPipeline
  def initialize(query:, parse_error:, operation_name_error:, max_depth:, max_complexity:); end

  def analyzers; end
  def max_complexity; end
  def max_depth; end
  def valid?; end
  def validation_errors; end

  private

  def build_analyzers(schema, max_depth, max_complexity); end
  def ensure_has_validated; end
end

class GraphQL::Query::VariableValidationError < ::GraphQL::ExecutionError
  def initialize(variable_ast, type, value, validation_result); end

  def to_h; end
  def validation_result; end
  def validation_result=(_arg0); end
  def value; end
  def value=(_arg0); end

  private

  def problem_fields; end
end

class GraphQL::Query::Variables
  extend ::Forwardable

  def initialize(ctx, ast_variables, provided_variables); end

  def [](*args, &block); end
  def context; end
  def errors; end
  def fetch(*args, &block); end
  def key?(*args, &block); end
  def length(*args, &block); end
  def to_h(*args, &block); end

  private

  def deep_stringify(val); end
end

class GraphQL::Railtie < ::Rails::Railtie; end
module GraphQL::Relay; end

class GraphQL::Relay::RangeAdd
  def initialize(collection:, item:, parent: T.unsafe(nil), context: T.unsafe(nil), edge_class: T.unsafe(nil)); end

  def connection; end
  def edge; end
  def parent; end
end

class GraphQL::RequiredImplementationMissingError < ::GraphQL::Error; end
module GraphQL::Ruby2Keywords; end
class GraphQL::RuntimeTypeError < ::GraphQL::Error; end

class GraphQL::Schema
  extend ::GraphQL::Schema::Member::HasAstNode
  extend ::GraphQL::Schema::FindInheritedValue
  extend ::GraphQL::Schema::FindInheritedValue::EmptyObjects

  class << self
    def accessible?(member, ctx); end
    def add_subscription_extension_if_necessary; end
    def after_any_lazies(maybe_lazies); end
    def after_lazy(value, &block); end
    def analysis_engine; end
    def analysis_engine=(_arg0); end
    def as_json(only: T.unsafe(nil), except: T.unsafe(nil), context: T.unsafe(nil)); end
    def connections; end
    def connections=(_arg0); end
    def context_class(new_context_class = T.unsafe(nil)); end
    def cursor_encoder(new_encoder = T.unsafe(nil)); end
    def dataloader_class; end
    def dataloader_class=(_arg0); end
    def default_analysis_engine; end
    def default_directives; end
    def default_execution_strategy; end
    def default_filter; end
    def default_mask(new_mask = T.unsafe(nil)); end
    def default_max_page_size(new_default_max_page_size = T.unsafe(nil)); end
    def deprecated_graphql_definition; end
    def description(new_description = T.unsafe(nil)); end
    def directive(new_directive); end
    def directives(*new_directives); end
    def disable_introspection_entry_points; end
    def disable_introspection_entry_points?; end
    def disable_schema_introspection_entry_point; end
    def disable_schema_introspection_entry_point?; end
    def disable_type_introspection_entry_point; end
    def disable_type_introspection_entry_point?; end
    def error_bubbling(new_error_bubbling = T.unsafe(nil)); end
    def error_bubbling=(_arg0); end
    def error_handler; end
    def execute(query_str = T.unsafe(nil), **kwargs); end
    def find(path); end
    def from_definition(definition_or_path, default_resolve: T.unsafe(nil), parser: T.unsafe(nil), using: T.unsafe(nil)); end
    def from_introspection(introspection_result); end
    def get_field(type_or_name, field_name, context = T.unsafe(nil)); end
    def get_fields(type, context = T.unsafe(nil)); end
    def get_type(type_name, context = T.unsafe(nil)); end
    def id_from_object(object, type, ctx); end
    def inaccessible_fields(error); end
    def inherited(child_class); end
    def instrument(instrument_step, instrumenter, options = T.unsafe(nil)); end
    def instrumenters; end
    def interpreter=(_arg0); end
    def interpreter?; end
    def introspection(new_introspection_namespace = T.unsafe(nil)); end
    def introspection_system; end
    def lazy?(obj); end
    def lazy_method_name(obj); end
    def lazy_resolve(lazy_class, value_method); end
    def max_complexity(max_complexity = T.unsafe(nil)); end
    def max_complexity=(_arg0); end
    def max_depth(new_max_depth = T.unsafe(nil)); end
    def max_depth=(_arg0); end
    def multiplex(queries, **kwargs); end
    def multiplex_analyzer(new_analyzer); end
    def multiplex_analyzers; end
    def mutation(new_mutation_object = T.unsafe(nil)); end
    def mutation_execution_strategy(new_mutation_execution_strategy = T.unsafe(nil)); end
    def new_connections?; end
    def object_from_id(node_id, ctx); end
    def orphan_types(*new_orphan_types); end
    def parse_error(parse_err, ctx); end
    def plugins; end
    def possible_types(type = T.unsafe(nil), context = T.unsafe(nil)); end
    def query(new_query_object = T.unsafe(nil)); end
    def query_analyzer(new_analyzer); end
    def query_analyzers; end
    def query_execution_strategy(new_query_execution_strategy = T.unsafe(nil)); end
    def query_stack_error(query, err); end
    def references_to(to_type = T.unsafe(nil), from: T.unsafe(nil)); end
    def rescue_from(*err_classes, &handler_block); end
    def resolve_type(type, obj, ctx); end
    def root_type_for_operation(operation); end
    def root_types; end
    def sanitized_printer(new_sanitized_printer = T.unsafe(nil)); end
    def static_validator; end
    def subscription(new_subscription_object = T.unsafe(nil)); end
    def subscription_execution_strategy(new_subscription_execution_strategy = T.unsafe(nil)); end
    def subscriptions; end
    def subscriptions=(_arg0); end
    def sync_lazy(value); end
    def to_definition(only: T.unsafe(nil), except: T.unsafe(nil), context: T.unsafe(nil)); end
    def to_document; end
    def to_json(**args); end
    def tracer(new_tracer); end
    def tracers; end
    def type_error(type_error, ctx); end
    def type_from_ast(ast_node, context: T.unsafe(nil)); end
    def types(context = T.unsafe(nil)); end
    def unauthorized_field(unauthorized_error); end
    def unauthorized_object(unauthorized_error); end
    def union_memberships(type = T.unsafe(nil)); end
    def use(plugin, **kwargs); end
    def using_ast_analysis?; end
    def validate(string_or_document, rules: T.unsafe(nil), context: T.unsafe(nil)); end
    def validate_max_errors(new_validate_max_errors = T.unsafe(nil)); end
    def validate_max_errors=(_arg0); end
    def validate_timeout(new_validate_timeout = T.unsafe(nil)); end
    def validate_timeout=(_arg0); end
    def visible?(member, ctx); end

    private

    def add_type_and_traverse(t, root:); end
    def lazy_methods; end
    def non_introspection_types; end
    def own_directives; end
    def own_instrumenters; end
    def own_multiplex_analyzers; end
    def own_orphan_types; end
    def own_plugins; end
    def own_possible_types; end
    def own_query_analyzers; end
    def own_tracers; end
    def own_types; end
    def own_union_memberships; end
  end
end

class GraphQL::Schema::Addition
  def initialize(schema:, own_types:, new_types:); end

  def arguments_with_default_values; end
  def directives; end
  def possible_types; end
  def references; end
  def types; end
  def union_memberships; end

  private

  def add_directives_from(owner); end
  def add_type(type, owner:, late_types:, path:); end
  def add_type_and_traverse(new_types); end
  def get_local_type(name); end
  def get_type(name); end
  def references_to(thing, from:); end
  def update_type_owner(owner, type); end
end

class GraphQL::Schema::Argument
  include ::GraphQL::Schema::Member::HasPath
  include ::GraphQL::Schema::Member::HasAstNode
  include ::GraphQL::Schema::Member::HasDirectives
  include ::GraphQL::Schema::Member::HasDeprecationReason
  include ::GraphQL::Schema::FindInheritedValue::EmptyObjects
  include ::GraphQL::Schema::Member::HasValidators

  def initialize(arg_name = T.unsafe(nil), type_expr = T.unsafe(nil), desc = T.unsafe(nil), owner:, required: T.unsafe(nil), type: T.unsafe(nil), name: T.unsafe(nil), loads: T.unsafe(nil), description: T.unsafe(nil), ast_node: T.unsafe(nil), default_value: T.unsafe(nil), as: T.unsafe(nil), from_resolver: T.unsafe(nil), camelize: T.unsafe(nil), prepare: T.unsafe(nil), validates: T.unsafe(nil), directives: T.unsafe(nil), deprecation_reason: T.unsafe(nil), replace_null_with_default: T.unsafe(nil), &definition_block); end

  def accessible?(context); end
  def authorized?(obj, value, ctx); end
  def authorized_as_type?(obj, value, ctx, as_type:); end
  def coerce_into_values(parent_object, values, context, argument_values); end
  def default_value; end
  def default_value?; end
  def deprecation_reason(text = T.unsafe(nil)); end
  def deprecation_reason=(new_reason); end
  def description(text = T.unsafe(nil)); end
  def description=(_arg0); end
  def from_resolver?; end
  def graphql_name; end
  def inspect; end
  def keyword; end
  def load_and_authorize_value(load_method_owner, coerced_value, context); end
  def loads; end
  def name; end
  def owner; end
  def prepare; end
  def prepare_value(obj, value, context: T.unsafe(nil)); end
  def replace_null_with_default?; end
  def statically_coercible?; end
  def type; end
  def type=(new_type); end
  def validate_default_value; end
  def visible?(context); end

  private

  def validate_deprecated_or_optional(null:, deprecation_reason:); end
  def validate_input_type(input_type); end
end

class GraphQL::Schema::Argument::InvalidDefaultValueError < ::GraphQL::Error
  def initialize(argument); end
end

GraphQL::Schema::Argument::NO_DEFAULT = T.let(T.unsafe(nil), Symbol)
GraphQL::Schema::BUILT_IN_TYPES = T.let(T.unsafe(nil), Hash)

module GraphQL::Schema::Base64Encoder
  class << self
    def decode(encoded_text, nonce: T.unsafe(nil)); end
    def encode(unencoded_text, nonce: T.unsafe(nil)); end
  end
end

module GraphQL::Schema::BuildFromDefinition
  class << self
    def from_definition(definition_string, parser: T.unsafe(nil), **kwargs); end
    def from_definition_path(definition_path, parser: T.unsafe(nil), **kwargs); end
    def from_document(document, default_resolve:, using: T.unsafe(nil), relay: T.unsafe(nil)); end
  end
end

module GraphQL::Schema::BuildFromDefinition::Builder
  extend ::GraphQL::Schema::BuildFromDefinition::Builder

  def args_to_kwargs(arg_owner, node); end
  def build(document, default_resolve:, relay:, using: T.unsafe(nil)); end
  def build_arguments(type_class, arguments, type_resolver); end
  def build_default_value(default_value); end
  def build_definition_from_node(definition, type_resolver, default_resolve); end
  def build_deprecation_reason(directives); end
  def build_directive(directive_definition, type_resolver); end
  def build_directives(definition, ast_node, type_resolver); end
  def build_enum_type(enum_type_definition, type_resolver); end
  def build_fields(owner, field_definitions, type_resolver, default_resolve:); end
  def build_input_object_type(input_object_type_definition, type_resolver); end
  def build_interface_type(interface_type_definition, type_resolver); end
  def build_object_type(object_type_definition, type_resolver); end
  def build_resolve_type(lookup_hash, directives, missing_type_handler); end
  def build_scalar_type(scalar_type_definition, type_resolver, default_resolve:); end
  def build_scalar_type_coerce_method(scalar_class, method_name, default_definition_resolve); end
  def build_union_type(union_type_definition, type_resolver); end
  def prepare_directives(ast_node, type_resolver); end
  def replace_late_bound_types_with_built_in(types); end
  def resolve_type_name(type); end
end

GraphQL::Schema::BuildFromDefinition::Builder::NO_DEFAULT_VALUE = T.let(T.unsafe(nil), Hash)
GraphQL::Schema::BuildFromDefinition::Builder::NullResolveType = T.let(T.unsafe(nil), Proc)

class GraphQL::Schema::BuildFromDefinition::ResolveMap
  def initialize(user_resolve_hash); end

  def call(type, field, obj, args, ctx); end
  def coerce_input(type, value, ctx); end
  def coerce_result(type, value, ctx); end
end

class GraphQL::Schema::BuildFromDefinition::ResolveMap::DefaultResolve
  def initialize(field_map, field_name); end

  def call(obj, args, ctx); end
end

module GraphQL::Schema::BuildFromDefinition::ResolveMap::NullScalarCoerce
  class << self
    def call(val, _ctx); end
  end
end

class GraphQL::Schema::Directive < ::GraphQL::Schema::Member
  include ::GraphQL::Schema::Member::HasArguments::ArgumentObjectLoader
  extend ::GraphQL::Schema::Member::HasArguments
  extend ::GraphQL::Schema::Member::HasArguments::ArgumentClassAccessor

  def initialize(owner, **arguments); end

  def arguments; end
  def graphql_name; end
  def owner; end

  private

  def assert_has_location(location); end
  def assert_valid_owner; end

  class << self
    def default_directive(new_default_directive = T.unsafe(nil)); end
    def default_directive?; end
    def default_graphql_name; end
    def include?(_object, arguments, context); end
    def locations(*new_locations); end
    def on_field?; end
    def on_fragment?; end
    def on_operation?; end
    def path; end
    def repeatable(new_value); end
    def repeatable?; end
    def resolve(object, arguments, context); end
    def resolve_each(object, arguments, context); end
    def static_include?(_arguments, _context); end
  end
end

GraphQL::Schema::Directive::ARGUMENT_DEFINITION = T.let(T.unsafe(nil), Symbol)
GraphQL::Schema::Directive::DEFAULT_DEPRECATION_REASON = T.let(T.unsafe(nil), String)

class GraphQL::Schema::Directive::Deprecated < ::GraphQL::Schema::Directive
  class << self
    def load_reason(value, _context = T.unsafe(nil)); end
  end
end

GraphQL::Schema::Directive::ENUM = T.let(T.unsafe(nil), Symbol)
GraphQL::Schema::Directive::ENUM_VALUE = T.let(T.unsafe(nil), Symbol)
GraphQL::Schema::Directive::FIELD = T.let(T.unsafe(nil), Symbol)
GraphQL::Schema::Directive::FIELD_DEFINITION = T.let(T.unsafe(nil), Symbol)
GraphQL::Schema::Directive::FRAGMENT_DEFINITION = T.let(T.unsafe(nil), Symbol)
GraphQL::Schema::Directive::FRAGMENT_SPREAD = T.let(T.unsafe(nil), Symbol)

class GraphQL::Schema::Directive::Feature < ::GraphQL::Schema::Directive
  class << self
    def enabled?(flag_name, object, context); end
    def include?(object, arguments, context); end
    def load_flag(value, _context = T.unsafe(nil)); end
  end
end

class GraphQL::Schema::Directive::Flagged < ::GraphQL::Schema::Directive
  def initialize(target, **options); end

  class << self
    def load_by(value, _context = T.unsafe(nil)); end
  end
end

module GraphQL::Schema::Directive::Flagged::VisibleByFlag
  def visible?(context); end

  class << self
    def included(schema_class); end
  end
end

GraphQL::Schema::Directive::INLINE_FRAGMENT = T.let(T.unsafe(nil), Symbol)
GraphQL::Schema::Directive::INPUT_FIELD_DEFINITION = T.let(T.unsafe(nil), Symbol)
GraphQL::Schema::Directive::INPUT_OBJECT = T.let(T.unsafe(nil), Symbol)
GraphQL::Schema::Directive::INTERFACE = T.let(T.unsafe(nil), Symbol)

class GraphQL::Schema::Directive::Include < ::GraphQL::Schema::Directive
  class << self
    def load_if(value, _context = T.unsafe(nil)); end
    def static_include?(args, ctx); end
  end
end

GraphQL::Schema::Directive::LOCATIONS = T.let(T.unsafe(nil), Array)
GraphQL::Schema::Directive::LOCATION_DESCRIPTIONS = T.let(T.unsafe(nil), Hash)
GraphQL::Schema::Directive::MUTATION = T.let(T.unsafe(nil), Symbol)
GraphQL::Schema::Directive::OBJECT = T.let(T.unsafe(nil), Symbol)
GraphQL::Schema::Directive::QUERY = T.let(T.unsafe(nil), Symbol)
GraphQL::Schema::Directive::SCALAR = T.let(T.unsafe(nil), Symbol)
GraphQL::Schema::Directive::SCHEMA = T.let(T.unsafe(nil), Symbol)
GraphQL::Schema::Directive::SUBSCRIPTION = T.let(T.unsafe(nil), Symbol)

class GraphQL::Schema::Directive::Skip < ::GraphQL::Schema::Directive
  class << self
    def load_if(value, _context = T.unsafe(nil)); end
    def static_include?(args, ctx); end
  end
end

class GraphQL::Schema::Directive::Transform < ::GraphQL::Schema::Directive
  class << self
    def load_by(value, _context = T.unsafe(nil)); end
    def resolve(object, arguments, context); end
  end
end

GraphQL::Schema::Directive::Transform::TRANSFORMS = T.let(T.unsafe(nil), Array)
GraphQL::Schema::Directive::UNION = T.let(T.unsafe(nil), Symbol)
GraphQL::Schema::Directive::VARIABLE_DEFINITION = T.let(T.unsafe(nil), Symbol)
class GraphQL::Schema::DuplicateNamesError < ::GraphQL::Error; end

class GraphQL::Schema::DuplicateTypeNamesError < ::GraphQL::Error
  def initialize(type_name:, first_definition:, second_definition:, path:); end
end

class GraphQL::Schema::Enum < ::GraphQL::Schema::Member
  extend ::GraphQL::Schema::Member::ValidatesInput

  class << self
    def all_enum_value_definitions; end
    def coerce_input(value_name, ctx); end
    def coerce_result(value, ctx); end
    def enum_value_class(new_enum_value_class = T.unsafe(nil)); end
    def enum_values(context = T.unsafe(nil)); end
    def inherited(child_class); end
    def kind; end
    def validate_non_null_input(value_name, ctx); end
    def value(*args, **kwargs, &block); end
    def values(context = T.unsafe(nil)); end

    private

    def own_values; end
  end
end

class GraphQL::Schema::Enum::UnresolvedValueError < ::GraphQL::Error
  def initialize(value:, enum:, context:); end
end

class GraphQL::Schema::EnumValue < ::GraphQL::Schema::Member
  include ::GraphQL::Schema::Member::HasPath
  include ::GraphQL::Schema::Member::HasAstNode
  include ::GraphQL::Schema::Member::HasDirectives
  include ::GraphQL::Schema::Member::HasDeprecationReason

  def initialize(graphql_name, desc = T.unsafe(nil), owner:, ast_node: T.unsafe(nil), directives: T.unsafe(nil), description: T.unsafe(nil), value: T.unsafe(nil), deprecation_reason: T.unsafe(nil), &block); end

  def accessible?(_ctx); end
  def authorized?(_ctx); end
  def description(new_desc = T.unsafe(nil)); end
  def graphql_name; end
  def inspect; end
  def owner; end
  def value(new_val = T.unsafe(nil)); end
  def visible?(_ctx); end
end

class GraphQL::Schema::Field
  include ::GraphQL::Schema::Member::HasArguments
  include ::GraphQL::Schema::Member::HasArguments::ArgumentObjectLoader
  include ::GraphQL::Schema::Member::HasAstNode
  include ::GraphQL::Schema::Member::HasPath
  include ::GraphQL::Schema::FindInheritedValue::EmptyObjects
  include ::GraphQL::Schema::Member::HasValidators
  include ::GraphQL::Schema::Member::HasDirectives
  include ::GraphQL::Schema::Member::HasDeprecationReason
  extend ::GraphQL::Schema::Member::HasArguments::ArgumentClassAccessor
  extend ::GraphQL::Schema::FindInheritedValue
  extend ::GraphQL::Schema::FindInheritedValue::EmptyObjects

  def initialize(type: T.unsafe(nil), name: T.unsafe(nil), owner: T.unsafe(nil), null: T.unsafe(nil), description: T.unsafe(nil), deprecation_reason: T.unsafe(nil), method: T.unsafe(nil), hash_key: T.unsafe(nil), dig: T.unsafe(nil), resolver_method: T.unsafe(nil), connection: T.unsafe(nil), max_page_size: T.unsafe(nil), scope: T.unsafe(nil), introspection: T.unsafe(nil), camelize: T.unsafe(nil), trace: T.unsafe(nil), complexity: T.unsafe(nil), ast_node: T.unsafe(nil), extras: T.unsafe(nil), extensions: T.unsafe(nil), connection_extension: T.unsafe(nil), resolver_class: T.unsafe(nil), subscription_scope: T.unsafe(nil), relay_node_field: T.unsafe(nil), relay_nodes_field: T.unsafe(nil), method_conflict_warning: T.unsafe(nil), broadcastable: T.unsafe(nil), arguments: T.unsafe(nil), directives: T.unsafe(nil), validates: T.unsafe(nil), &definition_block); end

  def accessible?(context); end
  def authorized?(object, args, context); end
  def broadcastable?; end
  def calculate_complexity(query:, nodes:, child_complexity:); end
  def complexity(new_complexity = T.unsafe(nil)); end
  def connection?; end
  def description(text = T.unsafe(nil)); end
  def description=(_arg0); end
  def extension(extension_class, options = T.unsafe(nil)); end
  def extensions(new_extensions = T.unsafe(nil)); end
  def extras(new_extras = T.unsafe(nil)); end
  def fetch_extra(extra_name, ctx); end
  def graphql_name; end
  def has_max_page_size?; end
  def inspect; end
  def introspection?; end
  def max_page_size; end
  def method_conflict_warning?; end
  def method_str; end
  def method_sym; end
  def mutation; end
  def name; end
  def original_name; end
  def owner; end
  def owner=(_arg0); end
  def owner_type; end
  def relay_node_field; end
  def resolve(object, args, ctx); end
  def resolver; end
  def resolver_method; end
  def scoped?; end
  def subscription_scope; end
  def subscription_scope=(_arg0); end
  def trace; end
  def type; end
  def type=(_arg0); end
  def visible?(context); end

  private

  def assert_satisfactory_implementation(receiver, method_name, ruby_kwargs); end
  def public_send_field(unextended_obj, unextended_ruby_kwargs, query_ctx); end
  def run_extensions_before_resolve(obj, args, ctx, extended, idx: T.unsafe(nil)); end
  def with_extensions(obj, args, ctx); end

  class << self
    def connection_extension(new_extension_class = T.unsafe(nil)); end
    def from_options(name = T.unsafe(nil), type = T.unsafe(nil), desc = T.unsafe(nil), resolver: T.unsafe(nil), mutation: T.unsafe(nil), subscription: T.unsafe(nil), **kwargs, &block); end
  end
end

class GraphQL::Schema::Field::ConnectionExtension < ::GraphQL::Schema::FieldExtension
  def after_resolve(value:, object:, arguments:, context:, memo:); end
  def apply; end
  def resolve(object:, arguments:, context:); end
end

class GraphQL::Schema::Field::FieldImplementationFailed < ::GraphQL::Error; end
class GraphQL::Schema::Field::MissingReturnTypeError < ::GraphQL::Error; end

class GraphQL::Schema::Field::ScopeExtension < ::GraphQL::Schema::FieldExtension
  def after_resolve(object:, arguments:, context:, value:, memo:); end
end

class GraphQL::Schema::FieldExtension
  def initialize(field:, options:); end

  def added_default_arguments; end
  def added_extras; end
  def after_define; end
  def after_define_apply; end
  def after_resolve(object:, arguments:, context:, value:, memo:); end
  def apply; end
  def field; end
  def options; end
  def resolve(object:, arguments:, context:); end

  class << self
    def default_argument(*argument_args, **argument_kwargs); end
    def default_argument_configurations; end
    def extras(new_extras = T.unsafe(nil)); end
  end
end

GraphQL::Schema::FieldExtension::NO_EXTRAS = T.let(T.unsafe(nil), Array)

module GraphQL::Schema::FindInheritedValue
  include ::GraphQL::Schema::FindInheritedValue::EmptyObjects

  private

  def find_inherited_value(method_name, default_value = T.unsafe(nil)); end

  class << self
    def extended(child_cls); end
    def included(child_cls); end
  end
end

module GraphQL::Schema::FindInheritedValue::EmptyObjects; end
GraphQL::Schema::FindInheritedValue::EmptyObjects::EMPTY_ARRAY = T.let(T.unsafe(nil), Array)
GraphQL::Schema::FindInheritedValue::EmptyObjects::EMPTY_HASH = T.let(T.unsafe(nil), Hash)

class GraphQL::Schema::Finder
  def initialize(schema); end

  def find(path); end

  private

  def find_in_directive(directive, path:); end
  def find_in_enum_type(enum_type, path:); end
  def find_in_field(field, path:); end
  def find_in_fields_type(type, kind:, path:); end
  def find_in_input_object(input_object, path:); end
  def find_in_type(type, path:); end
  def schema; end
end

class GraphQL::Schema::Finder::MemberNotFoundError < ::ArgumentError; end

class GraphQL::Schema::InputObject < ::GraphQL::Schema::Member
  include ::GraphQL::Schema::Member::HasArguments::ArgumentObjectLoader
  include ::GraphQL::Dig
  extend ::Forwardable
  extend ::GraphQL::Schema::Member::HasArguments
  extend ::GraphQL::Schema::Member::HasArguments::ArgumentClassAccessor
  extend ::GraphQL::Schema::Member::HasArguments::ArgumentObjectLoader
  extend ::GraphQL::Schema::Member::ValidatesInput
  extend ::GraphQL::Schema::Member::HasValidators

  def initialize(arguments, ruby_kwargs:, context:, defaults_used:); end

  def [](key); end
  def any?(*args, &block); end
  def arguments; end
  def context; end
  def each(*args, &block); end
  def empty?(*args, &block); end
  def key?(key); end
  def keys(*args, &block); end
  def map(*args, &block); end
  def prepare; end
  def to_h; end
  def to_hash; end
  def to_kwargs; end
  def unwrap_value(value); end
  def values(*args, &block); end

  private

  def overwrite_argument(key, value); end

  class << self
    def argument(*args, **kwargs, &block); end
    def authorized?(obj, value, ctx); end
    def coerce_input(value, ctx); end
    def coerce_result(value, ctx); end
    def kind; end
    def validate_non_null_input(input, ctx); end
  end
end

module GraphQL::Schema::Interface
  include ::GraphQL::Schema::Member::GraphQLTypeNames
  extend ::GraphQL::Schema::FindInheritedValue
  extend ::GraphQL::Schema::FindInheritedValue::EmptyObjects
  extend ::GraphQL::Schema::Member::BaseDSLMethods
  extend ::GraphQL::Schema::Member::TypeSystemHelpers
  extend ::GraphQL::Schema::Member::HasFields
  extend ::GraphQL::Schema::Member::HasPath
  extend ::GraphQL::Schema::Member::RelayShortcuts
  extend ::GraphQL::Schema::Member::Scoped
  extend ::GraphQL::Schema::Member::HasAstNode
  extend ::GraphQL::Schema::Member::HasUnresolvedTypeError
  extend ::GraphQL::Schema::Member::HasDirectives
  extend ::GraphQL::Schema::Member::HasInterfaces
  extend ::GraphQL::Schema::Interface::DefinitionMethods

  def unwrap; end
end

module GraphQL::Schema::Interface::DefinitionMethods
  include ::GraphQL::Schema::FindInheritedValue
  include ::GraphQL::Schema::FindInheritedValue::EmptyObjects
  include ::GraphQL::Schema::Member::BaseDSLMethods
  include ::GraphQL::Schema::Member::TypeSystemHelpers
  include ::GraphQL::Schema::Member::HasFields
  include ::GraphQL::Schema::Member::HasPath
  include ::GraphQL::Schema::Member::RelayShortcuts
  include ::GraphQL::Schema::Member::Scoped
  include ::GraphQL::Schema::Member::HasAstNode
  include ::GraphQL::Schema::Member::HasUnresolvedTypeError
  include ::GraphQL::Schema::Member::HasDirectives
  include ::GraphQL::Schema::Member::HasInterfaces

  def accessible?(context); end
  def definition_methods(&block); end
  def included(child_class); end
  def kind; end
  def orphan_types(*types); end
  def type_membership_class(membership_class = T.unsafe(nil)); end
  def visible?(context); end
end

class GraphQL::Schema::IntrospectionSystem
  def initialize(schema); end

  def dynamic_field(name:); end
  def dynamic_fields; end
  def entry_point(name:); end
  def entry_points; end
  def possible_types; end
  def resolve_late_bindings; end
  def types; end

  private

  def dup_type_class(type_class); end
  def get_fields_from_class(class_sym:); end
  def load_constant(class_name); end
  def resolve_late_binding(late_bound_type); end
end

class GraphQL::Schema::IntrospectionSystem::PerFieldProxyResolve
  def initialize(object_class:, inner_resolve:); end

  def call(obj, args, ctx); end
end

class GraphQL::Schema::InvalidDocumentError < ::GraphQL::Error; end
class GraphQL::Schema::InvalidTypeError < ::GraphQL::Error; end

class GraphQL::Schema::LateBoundType
  def initialize(local_name); end

  def graphql_name; end
  def inspect; end
  def name; end
  def to_list_type; end
  def to_non_null_type; end
  def to_s; end
  def unwrap; end
end

class GraphQL::Schema::List < ::GraphQL::Schema::Wrapper
  include ::GraphQL::Schema::Member::ValidatesInput

  def coerce_input(value, ctx); end
  def coerce_result(value, ctx); end
  def description; end
  def graphql_name; end
  def kind; end
  def list?; end
  def to_type_signature; end
  def validate_non_null_input(value, ctx); end

  private

  def ensure_array(value); end
end

module GraphQL::Schema::Loader
  extend ::GraphQL::Schema::Loader

  def load(introspection_result); end

  class << self
    def build_arguments(arg_owner, args, type_resolver); end
    def build_fields(type_defn, fields, type_resolver); end

    private

    def define_directive(directive, type_resolver); end
    def define_type(type, type_resolver); end
    def extract_default_value(default_value_str, input_value_ast); end
    def resolve_type(types, type); end
  end
end

GraphQL::Schema::Loader::NullScalarCoerce = T.let(T.unsafe(nil), Proc)

class GraphQL::Schema::Member
  include ::GraphQL::Schema::Member::GraphQLTypeNames
  extend ::GraphQL::Schema::FindInheritedValue
  extend ::GraphQL::Schema::FindInheritedValue::EmptyObjects
  extend ::GraphQL::Schema::Member::BaseDSLMethods
  extend ::GraphQL::Schema::Member::BaseDSLMethods::ConfigurationExtension
  extend ::GraphQL::Schema::Member::TypeSystemHelpers
  extend ::GraphQL::Schema::Member::Scoped
  extend ::GraphQL::Schema::Member::RelayShortcuts
  extend ::GraphQL::Schema::Member::HasPath
  extend ::GraphQL::Schema::Member::HasAstNode
  extend ::GraphQL::Schema::Member::HasDirectives
end

module GraphQL::Schema::Member::BaseDSLMethods
  include ::GraphQL::Schema::FindInheritedValue
  include ::GraphQL::Schema::FindInheritedValue::EmptyObjects

  def accessible?(context); end
  def authorized?(object, context); end
  def default_graphql_name; end
  def description(new_description = T.unsafe(nil)); end
  def graphql_name(new_name = T.unsafe(nil)); end
  def introspection(new_introspection = T.unsafe(nil)); end
  def introspection?; end
  def mutation(mutation_class = T.unsafe(nil)); end
  def name(new_name = T.unsafe(nil)); end
  def overridden_graphql_name; end
  def unwrap; end
  def visible?(context); end
end

module GraphQL::Schema::Member::BaseDSLMethods::ConfigurationExtension
  def inherited(child_class); end
end

module GraphQL::Schema::Member::BuildType
  private

  def camelize(string); end
  def constantize(string); end
  def parse_type(type_expr, null:); end
  def to_type_name(something); end
  def underscore(string); end

  class << self
    def camelize(string); end
    def constantize(string); end
    def parse_type(type_expr, null:); end
    def to_type_name(something); end
    def underscore(string); end
  end
end

GraphQL::Schema::Member::BuildType::LIST_TYPE_ERROR = T.let(T.unsafe(nil), String)
module GraphQL::Schema::Member::GraphQLTypeNames; end
GraphQL::Schema::Member::GraphQLTypeNames::Boolean = T.let(T.unsafe(nil), String)
GraphQL::Schema::Member::GraphQLTypeNames::ID = T.let(T.unsafe(nil), String)
GraphQL::Schema::Member::GraphQLTypeNames::Int = T.let(T.unsafe(nil), String)

module GraphQL::Schema::Member::HasArguments
  include ::GraphQL::Schema::Member::HasArguments::ArgumentObjectLoader

  mixes_in_class_methods ::GraphQL::Schema::Member::HasArguments::ArgumentClassAccessor

  def add_argument(arg_defn); end
  def all_argument_definitions; end
  def argument(*args, **kwargs, &block); end
  def argument_class(new_arg_class = T.unsafe(nil)); end
  def arguments(context = T.unsafe(nil)); end
  def arguments_statically_coercible?; end
  def coerce_arguments(parent_object, values, context, &block); end
  def get_argument(argument_name, context = T.unsafe(nil)); end
  def own_arguments; end
  def remove_argument(arg_defn); end
  def validate_directive_argument(arg_defn, value); end

  class << self
    def extended(cls); end
    def included(cls); end
  end
end

module GraphQL::Schema::Member::HasArguments::ArgumentClassAccessor
  def argument_class(new_arg_class = T.unsafe(nil)); end
end

module GraphQL::Schema::Member::HasArguments::ArgumentObjectLoader
  def authorize_application_object(argument, id, context, loaded_application_object); end
  def load_and_authorize_application_object(argument, id, context); end
  def load_application_object(argument, id, context); end
  def load_application_object_failed(err); end
  def object_from_id(type, id, context); end
end

GraphQL::Schema::Member::HasArguments::NO_ARGUMENTS = T.let(T.unsafe(nil), Hash)

module GraphQL::Schema::Member::HasAstNode
  def ast_node(new_ast_node = T.unsafe(nil)); end
end

module GraphQL::Schema::Member::HasDeprecationReason
  def deprecation_reason; end
  def deprecation_reason=(text); end
end

module GraphQL::Schema::Member::HasDirectives
  def directive(dir_class, **options); end
  def directives; end
  def remove_directive(dir_class); end

  protected

  def own_directives; end

  private

  def merge_directives(target, dirs); end
end

GraphQL::Schema::Member::HasDirectives::NO_DIRECTIVES = T.let(T.unsafe(nil), Array)

module GraphQL::Schema::Member::HasFields
  def add_field(field_defn, method_conflict_warning: T.unsafe(nil)); end
  def all_field_definitions; end
  def field(*args, **kwargs, &block); end
  def field_class(new_field_class = T.unsafe(nil)); end
  def fields(context = T.unsafe(nil)); end
  def get_field(field_name, context = T.unsafe(nil)); end
  def global_id_field(field_name, **kwargs); end
  def own_fields; end

  private

  def conflict_field_name_warning(field_defn); end
  def visible_interface_implementation?(type, context, warden); end
end

GraphQL::Schema::Member::HasFields::CONFLICT_FIELD_NAMES = T.let(T.unsafe(nil), Set)
GraphQL::Schema::Member::HasFields::GRAPHQL_RUBY_KEYWORDS = T.let(T.unsafe(nil), Array)
GraphQL::Schema::Member::HasFields::RUBY_KEYWORDS = T.let(T.unsafe(nil), Array)

module GraphQL::Schema::Member::HasInterfaces
  def implements(*new_interfaces, **options); end
  def interface_type_memberships; end
  def interfaces(context = T.unsafe(nil)); end
  def own_interface_type_memberships; end
end

module GraphQL::Schema::Member::HasPath
  def path; end
end

module GraphQL::Schema::Member::HasUnresolvedTypeError
  private

  def add_unresolved_type_error(child_class); end
end

module GraphQL::Schema::Member::HasValidators
  include ::GraphQL::Schema::FindInheritedValue::EmptyObjects

  def validates(validation_config); end
  def validators; end
end

module GraphQL::Schema::Member::RelayShortcuts
  def connection_type; end
  def connection_type_class(new_connection_type_class = T.unsafe(nil)); end
  def edge_type; end
  def edge_type_class(new_edge_type_class = T.unsafe(nil)); end
end

module GraphQL::Schema::Member::Scoped
  def scope_items(items, context); end
end

module GraphQL::Schema::Member::TypeSystemHelpers
  def kind; end
  def list?; end
  def non_null?; end
  def to_list_type; end
  def to_non_null_type; end
  def to_type_signature; end
end

module GraphQL::Schema::Member::ValidatesInput
  def coerce_isolated_input(v); end
  def coerce_isolated_result(v); end
  def valid_input?(val, ctx); end
  def valid_isolated_input?(v); end
  def validate_input(val, ctx); end
end

class GraphQL::Schema::Mutation < ::GraphQL::Schema::Resolver
  extend ::GraphQL::Schema::Member::HasFields
  extend ::GraphQL::Schema::Resolver::HasPayloadType

  class << self
    def visible?(context); end

    private

    def conflict_field_name_warning(field_defn); end
    def generate_payload_type; end
  end
end

class GraphQL::Schema::NonNull < ::GraphQL::Schema::Wrapper
  include ::GraphQL::Schema::Member::ValidatesInput

  def coerce_input(value, ctx); end
  def coerce_result(value, ctx); end
  def description; end
  def graphql_name; end
  def inspect; end
  def kind; end
  def list?; end
  def non_null?; end
  def to_type_signature; end
  def validate_input(value, ctx); end
end

module GraphQL::Schema::NullMask
  class << self
    def call(member, ctx); end
  end
end

class GraphQL::Schema::Object < ::GraphQL::Schema::Member
  extend ::GraphQL::Schema::Member::HasFields
  extend ::GraphQL::Schema::Member::HasInterfaces

  def initialize(object, context); end

  def context; end
  def dataloader; end
  def object; end
  def raw_value(obj); end

  class << self
    def authorized_new(object, context); end
    def const_missing(name); end
    def kind; end
  end
end

class GraphQL::Schema::Printer < ::GraphQL::Language::Printer
  def initialize(schema, context: T.unsafe(nil), only: T.unsafe(nil), except: T.unsafe(nil), introspection: T.unsafe(nil)); end

  def print_schema; end
  def print_type(type); end
  def schema; end
  def warden; end

  class << self
    def print_introspection_schema; end
    def print_schema(schema, **args); end
  end
end

class GraphQL::Schema::Printer::IntrospectionPrinter < ::GraphQL::Language::Printer
  def print_schema_definition(schema); end
end

class GraphQL::Schema::RelayClassicMutation < ::GraphQL::Schema::Mutation
  def resolve_with_support(**inputs); end

  private

  def authorize_arguments(args, values); end

  class << self
    def argument(*args, own_argument: T.unsafe(nil), **kwargs, &block); end
    def dummy; end
    def field_arguments(context = T.unsafe(nil)); end
    def get_field_argument(name, context = T.unsafe(nil)); end
    def input_object_class(new_class = T.unsafe(nil)); end
    def input_type(new_input_type = T.unsafe(nil)); end
    def own_field_arguments; end

    private

    def generate_input_type; end
  end
end

class GraphQL::Schema::Resolver
  include ::GraphQL::Schema::Member::GraphQLTypeNames
  include ::GraphQL::Schema::Member::HasArguments::ArgumentObjectLoader
  include ::GraphQL::Schema::Member::HasPath
  extend ::GraphQL::Schema::FindInheritedValue
  extend ::GraphQL::Schema::FindInheritedValue::EmptyObjects
  extend ::GraphQL::Schema::Member::BaseDSLMethods
  extend ::GraphQL::Schema::Member::HasArguments
  extend ::GraphQL::Schema::Member::HasArguments::ArgumentClassAccessor
  extend ::GraphQL::Schema::Member::HasValidators
  extend ::GraphQL::Schema::Member::HasPath

  def initialize(object:, context:, field:); end

  def arguments; end
  def authorized?(**inputs); end
  def context; end
  def dataloader; end
  def field; end
  def object; end
  def ready?(**args); end
  def resolve(**args); end
  def resolve_with_support(**args); end
  def unauthorized_object(err); end

  private

  def authorize_arguments(args, inputs); end
  def get_argument(name, context = T.unsafe(nil)); end
  def load_arguments(args); end

  class << self
    def argument(*args, **kwargs, &block); end
    def broadcastable(new_broadcastable); end
    def broadcastable?; end
    def complexity(new_complexity = T.unsafe(nil)); end
    def extension(extension, **options); end
    def extensions; end
    def extras(new_extras = T.unsafe(nil)); end
    def field_arguments(context = T.unsafe(nil)); end
    def get_field_argument(name, context = T.unsafe(nil)); end
    def has_max_page_size?; end
    def max_page_size(new_max_page_size = T.unsafe(nil)); end
    def null(allow_null = T.unsafe(nil)); end
    def own_field_arguments; end
    def resolve_method(new_method = T.unsafe(nil)); end
    def resolver_method(new_method_name = T.unsafe(nil)); end
    def type(new_type = T.unsafe(nil), null: T.unsafe(nil)); end
    def type_expr; end

    private

    def own_extensions; end
  end
end

module GraphQL::Schema::Resolver::HasPayloadType
  def field(*args, **kwargs, &block); end
  def field_class(new_class = T.unsafe(nil)); end
  def object_class(new_class = T.unsafe(nil)); end
  def payload_type(new_payload_type = T.unsafe(nil)); end
  def type(new_type = T.unsafe(nil), null: T.unsafe(nil)); end
  def type_expr(new_payload_type = T.unsafe(nil)); end

  private

  def generate_payload_type; end
end

GraphQL::Schema::Resolver::HasPayloadType::NO_INTERFACES = T.let(T.unsafe(nil), Array)

class GraphQL::Schema::Scalar < ::GraphQL::Schema::Member
  extend ::GraphQL::Schema::Member::ValidatesInput

  class << self
    def coerce_input(val, ctx); end
    def coerce_result(val, ctx); end
    def default_scalar(is_default = T.unsafe(nil)); end
    def default_scalar?; end
    def kind; end
    def specified_by_url(new_url = T.unsafe(nil)); end
    def validate_non_null_input(value, ctx); end
  end
end

class GraphQL::Schema::Subscription < ::GraphQL::Schema::Resolver
  extend ::GraphQL::Schema::Resolver::HasPayloadType
  extend ::GraphQL::Schema::Member::HasFields

  def initialize(object:, context:, field:); end

  def load_application_object_failed(err); end
  def resolve(**args); end
  def resolve_subscribe(**args); end
  def resolve_update(**args); end
  def resolve_with_support(**args); end
  def subscribe(args = T.unsafe(nil)); end
  def unsubscribe; end
  def update(args = T.unsafe(nil)); end

  class << self
    def subscription_scope(new_scope = T.unsafe(nil), optional: T.unsafe(nil)); end
    def subscription_scope_optional?; end
    def topic_for(arguments:, field:, scope:); end
  end
end

GraphQL::Schema::Subscription::NO_UPDATE = T.let(T.unsafe(nil), Symbol)
GraphQL::Schema::Subscription::READING_SCOPE = T.let(T.unsafe(nil), Object)

class GraphQL::Schema::Timeout
  def initialize(max_seconds:); end

  def handle_timeout(error, query); end
  def max_seconds(query); end
  def trace(key, data); end

  class << self
    def use(schema, **options); end
  end
end

class GraphQL::Schema::Timeout::TimeoutError < ::GraphQL::ExecutionError
  def initialize(parent_type, field); end
end

module GraphQL::Schema::TypeExpression
  class << self
    def build_type(type_owner, ast_node); end

    private

    def wrap_type(type, wrapper_method); end
  end
end

class GraphQL::Schema::TypeMembership
  def initialize(abstract_type, object_type, **options); end

  def abstract_type; end
  def graphql_name; end
  def inspect; end
  def object_type; end
  def object_type=(_arg0); end
  def path; end
  def type_class; end
  def visible?(ctx); end
end

class GraphQL::Schema::Union < ::GraphQL::Schema::Member
  extend ::GraphQL::Schema::Member::HasUnresolvedTypeError

  class << self
    def all_possible_types; end
    def assign_type_membership_object_type(object_type); end
    def inherited(child_class); end
    def kind; end
    def possible_types(*types, context: T.unsafe(nil), **options); end
    def type_membership_class(membership_class = T.unsafe(nil)); end
    def type_memberships; end

    private

    def assert_valid_union_member(type_defn); end
  end
end

module GraphQL::Schema::UniqueWithinType
  private

  def decode(node_id, separator: T.unsafe(nil)); end
  def encode(type_name, object_value, separator: T.unsafe(nil)); end

  class << self
    def decode(node_id, separator: T.unsafe(nil)); end
    def default_id_separator; end
    def default_id_separator=(_arg0); end
    def encode(type_name, object_value, separator: T.unsafe(nil)); end
  end
end

class GraphQL::Schema::UnresolvedLateBoundTypeError < ::GraphQL::Error
  def initialize(type:); end

  def type; end
end

class GraphQL::Schema::Validator
  include ::GraphQL::Schema::FindInheritedValue::EmptyObjects

  def initialize(validated:, allow_blank: T.unsafe(nil), allow_null: T.unsafe(nil)); end

  def partial_format(string, substitutions); end
  def permitted_empty_value?(value); end
  def validate(object, context, value); end
  def validated; end

  class << self
    def all_validators; end
    def all_validators=(_arg0); end
    def from_config(schema_member, validates_hash); end
    def install(name, validator_class); end
    def uninstall(name); end
    def validate!(validators, object, context, value, as: T.unsafe(nil)); end
  end
end

class GraphQL::Schema::Validator::AllowBlankValidator < ::GraphQL::Schema::Validator
  def initialize(allow_blank_positional, allow_blank: T.unsafe(nil), message: T.unsafe(nil), **default_options); end

  def validate(_object, _context, value); end
end

class GraphQL::Schema::Validator::AllowNullValidator < ::GraphQL::Schema::Validator
  def initialize(allow_null_positional, allow_null: T.unsafe(nil), message: T.unsafe(nil), **default_options); end

  def validate(_object, _context, value); end
end

GraphQL::Schema::Validator::AllowNullValidator::MESSAGE = T.let(T.unsafe(nil), String)

class GraphQL::Schema::Validator::ExclusionValidator < ::GraphQL::Schema::Validator
  def initialize(in:, message: T.unsafe(nil), **default_options); end

  def validate(_object, _context, value); end
end

class GraphQL::Schema::Validator::FormatValidator < ::GraphQL::Schema::Validator
  def initialize(with: T.unsafe(nil), without: T.unsafe(nil), message: T.unsafe(nil), **default_options); end

  def validate(_object, _context, value); end
end

class GraphQL::Schema::Validator::InclusionValidator < ::GraphQL::Schema::Validator
  def initialize(in:, message: T.unsafe(nil), **default_options); end

  def validate(_object, _context, value); end
end

class GraphQL::Schema::Validator::LengthValidator < ::GraphQL::Schema::Validator
  def initialize(maximum: T.unsafe(nil), too_long: T.unsafe(nil), minimum: T.unsafe(nil), too_short: T.unsafe(nil), is: T.unsafe(nil), within: T.unsafe(nil), wrong_length: T.unsafe(nil), message: T.unsafe(nil), **default_options); end

  def validate(_object, _context, value); end
end

class GraphQL::Schema::Validator::NumericalityValidator < ::GraphQL::Schema::Validator
  def initialize(greater_than: T.unsafe(nil), greater_than_or_equal_to: T.unsafe(nil), less_than: T.unsafe(nil), less_than_or_equal_to: T.unsafe(nil), equal_to: T.unsafe(nil), other_than: T.unsafe(nil), odd: T.unsafe(nil), even: T.unsafe(nil), within: T.unsafe(nil), message: T.unsafe(nil), null_message: T.unsafe(nil), **default_options); end

  def validate(object, context, value); end
end

class GraphQL::Schema::Validator::RequiredValidator < ::GraphQL::Schema::Validator
  def initialize(one_of: T.unsafe(nil), argument: T.unsafe(nil), message: T.unsafe(nil), **default_options); end

  def validate(_object, _context, value); end
end

class GraphQL::Schema::Validator::ValidationFailedError < ::GraphQL::ExecutionError
  def initialize(errors:); end

  def errors; end
end

class GraphQL::Schema::Warden
  def initialize(filter, context:, schema:); end

  def arguments(argument_owner); end
  def directives; end
  def enum_values(enum_defn); end
  def fields(type_defn); end
  def get_argument(parent_type, argument_name); end
  def get_field(parent_type, field_name); end
  def get_type(type_name); end
  def interfaces(obj_type); end
  def possible_types(type_defn); end
  def reachable_type?(type_name); end
  def reachable_types; end
  def root_type_for_operation(op_name); end
  def types; end
  def visible_argument?(arg_defn, _ctx = T.unsafe(nil)); end
  def visible_enum_value?(enum_value, _ctx = T.unsafe(nil)); end
  def visible_field?(field_defn, _ctx = T.unsafe(nil), owner = T.unsafe(nil)); end
  def visible_type?(type_defn, _ctx = T.unsafe(nil)); end
  def visible_type_membership?(type_membership, _ctx = T.unsafe(nil)); end

  private

  def field_on_visible_interface?(field_defn, type_defn); end
  def orphan_type?(type_defn); end
  def reachable_type_set; end
  def read_through; end
  def referenced?(type_defn); end
  def root_type?(type_defn); end
  def unfiltered_interfaces(type_defn); end
  def union_memberships(obj_type); end
  def visible?(member); end
  def visible_abstract_type?(type_defn); end
  def visible_and_reachable_type?(type_defn); end
  def visible_possible_types?(type_defn); end

  class << self
    def from_context(context); end
    def visible_entry?(visibility_method, entry, context, warden = T.unsafe(nil)); end
  end
end

GraphQL::Schema::Warden::NO_REFERENCES = T.let(T.unsafe(nil), Array)

class GraphQL::Schema::Warden::PassThruWarden
  class << self
    def visible_argument?(arg, ctx); end
    def visible_enum_value?(ev, ctx); end
    def visible_field?(field, ctx); end
    def visible_type?(type, ctx); end
    def visible_type_membership?(tm, ctx); end
  end
end

class GraphQL::Schema::Wrapper
  include ::GraphQL::Schema::Member::TypeSystemHelpers

  def initialize(of_type); end

  def ==(other); end
  def of_type; end
  def unwrap; end
end

module GraphQL::StaticValidation; end
GraphQL::StaticValidation::ALL_RULES = T.let(T.unsafe(nil), Array)

module GraphQL::StaticValidation::ArgumentLiteralsAreCompatible
  def on_argument(node, parent); end
end

class GraphQL::StaticValidation::ArgumentLiteralsAreCompatibleError < ::GraphQL::StaticValidation::Error
  def initialize(message, type:, path: T.unsafe(nil), nodes: T.unsafe(nil), argument_name: T.unsafe(nil), extensions: T.unsafe(nil), coerce_extensions: T.unsafe(nil), argument: T.unsafe(nil), value: T.unsafe(nil)); end

  def argument; end
  def argument_name; end
  def code; end
  def to_h; end
  def type_name; end
  def value; end
end

module GraphQL::StaticValidation::ArgumentNamesAreUnique
  include ::GraphQL::StaticValidation::Error::ErrorHelper

  def on_directive(node, parent); end
  def on_field(node, parent); end
  def validate_arguments(node); end
end

class GraphQL::StaticValidation::ArgumentNamesAreUniqueError < ::GraphQL::StaticValidation::Error
  def initialize(message, name:, path: T.unsafe(nil), nodes: T.unsafe(nil)); end

  def code; end
  def name; end
  def to_h; end
end

module GraphQL::StaticValidation::ArgumentsAreDefined
  def on_argument(node, parent); end

  private

  def node_type(parent); end
  def parent_definition(parent); end
  def parent_name(parent, type_defn); end
end

class GraphQL::StaticValidation::ArgumentsAreDefinedError < ::GraphQL::StaticValidation::Error
  def initialize(message, name:, type:, argument_name:, parent:, path: T.unsafe(nil), nodes: T.unsafe(nil)); end

  def argument_name; end
  def code; end
  def name; end
  def parent; end
  def to_h; end
  def type_name; end
end

class GraphQL::StaticValidation::BaseVisitor < ::GraphQL::Language::Visitor
  def initialize(document, context); end

  def context; end
  def object_types; end
  def path; end

  private

  def add_error(error, path: T.unsafe(nil)); end

  class << self
    def including_rules(rules); end
  end
end

module GraphQL::StaticValidation::BaseVisitor::ContextMethods
  def argument_definition; end
  def directive_definition; end
  def field_definition; end
  def on_argument(node, parent); end
  def on_directive(node, parent); end
  def on_field(node, parent); end
  def on_fragment_definition(node, parent); end
  def on_fragment_spread(node, parent); end
  def on_inline_fragment(node, parent); end
  def on_input_object(node, parent); end
  def on_operation_definition(node, parent); end
  def parent_type_definition; end
  def type_definition; end

  private

  def on_fragment_with_type(node); end
  def push_type(t); end
end

module GraphQL::StaticValidation::DefinitionDependencies
  def initialize(*_arg0); end

  def dependencies; end
  def dependency_map(&block); end
  def on_document(node, parent); end
  def on_fragment_definition(node, parent); end
  def on_fragment_spread(node, parent); end
  def on_operation_definition(node, prev_node); end

  private

  def resolve_dependencies; end
end

class GraphQL::StaticValidation::DefinitionDependencies::DependencyMap
  def initialize; end

  def [](definition_node); end
  def cyclical_definitions; end
  def unmet_dependencies; end
  def unused_dependencies; end
end

class GraphQL::StaticValidation::DefinitionDependencies::NodeWithPath
  extend ::Forwardable

  def initialize(node, path); end

  def eql?(*args, &block); end
  def hash(*args, &block); end
  def name(*args, &block); end
  def node; end
  def path; end
end

module GraphQL::StaticValidation::DirectivesAreDefined
  def initialize(*_arg0); end

  def on_directive(node, parent); end
end

class GraphQL::StaticValidation::DirectivesAreDefinedError < ::GraphQL::StaticValidation::Error
  def initialize(message, directive:, path: T.unsafe(nil), nodes: T.unsafe(nil)); end

  def code; end
  def directive_name; end
  def to_h; end
end

module GraphQL::StaticValidation::DirectivesAreInValidLocations
  include ::GraphQL::Language

  def on_directive(node, parent); end

  private

  def assert_includes_location(directive_defn, directive_ast, required_location); end
  def validate_location(ast_directive, ast_parent, directives); end
end

GraphQL::StaticValidation::DirectivesAreInValidLocations::LOCATION_MESSAGE_NAMES = T.let(T.unsafe(nil), Hash)
GraphQL::StaticValidation::DirectivesAreInValidLocations::SIMPLE_LOCATIONS = T.let(T.unsafe(nil), Hash)
GraphQL::StaticValidation::DirectivesAreInValidLocations::SIMPLE_LOCATION_NODES = T.let(T.unsafe(nil), Array)

class GraphQL::StaticValidation::DirectivesAreInValidLocationsError < ::GraphQL::StaticValidation::Error
  def initialize(message, target:, path: T.unsafe(nil), nodes: T.unsafe(nil), name: T.unsafe(nil)); end

  def code; end
  def name; end
  def target_name; end
  def to_h; end
end

class GraphQL::StaticValidation::Error
  def initialize(message, path: T.unsafe(nil), nodes: T.unsafe(nil)); end

  def message; end
  def path; end
  def path=(_arg0); end
  def to_h; end

  private

  def locations; end
  def nodes; end
end

module GraphQL::StaticValidation::Error::ErrorHelper
  def error(error_message, nodes, context: T.unsafe(nil), path: T.unsafe(nil), extensions: T.unsafe(nil)); end
end

module GraphQL::StaticValidation::FieldsAreDefinedOnType
  def on_field(node, parent); end
end

class GraphQL::StaticValidation::FieldsAreDefinedOnTypeError < ::GraphQL::StaticValidation::Error
  def initialize(message, type:, field:, path: T.unsafe(nil), nodes: T.unsafe(nil)); end

  def code; end
  def field_name; end
  def to_h; end
  def type_name; end
end

module GraphQL::StaticValidation::FieldsHaveAppropriateSelections
  include ::GraphQL::StaticValidation::Error::ErrorHelper

  def on_field(node, parent); end
  def on_operation_definition(node, _parent); end

  private

  def validate_field_selections(ast_node, resolved_type); end
end

class GraphQL::StaticValidation::FieldsHaveAppropriateSelectionsError < ::GraphQL::StaticValidation::Error
  def initialize(message, node_name:, path: T.unsafe(nil), nodes: T.unsafe(nil), type: T.unsafe(nil)); end

  def code; end
  def node_name; end
  def to_h; end
  def type_name; end
end

module GraphQL::StaticValidation::FieldsWillMerge
  def initialize(*_arg0); end

  def on_field(node, _parent); end
  def on_operation_definition(node, _parent); end

  private

  def arg_conflicts; end
  def compared_fragments_key(frag1, frag2, exclusive); end
  def conflicts_within_selection_set(node, parent_type); end
  def field_conflicts; end
  def fields_and_fragments_from_selection(node, owner_type:, parents:); end
  def find_conflict(response_key, field1, field2, mutually_exclusive: T.unsafe(nil)); end
  def find_conflicts_between(response_keys, response_keys2, mutually_exclusive:); end
  def find_conflicts_between_fields_and_fragment(fragment_spread, fields, mutually_exclusive:); end
  def find_conflicts_between_fragments(fragment_spread1, fragment_spread2, mutually_exclusive:); end
  def find_conflicts_between_sub_selection_sets(field1, field2, mutually_exclusive:); end
  def find_conflicts_within(response_keys); end
  def find_fields_and_fragments(selections, owner_type:, parents:, fields:, fragment_spreads:); end
  def mutually_exclusive?(parents1, parents2); end
  def same_arguments?(field1, field2); end
  def serialize_arg(arg_value); end
  def serialize_field_args(field); end
  def setting_errors; end
end

class GraphQL::StaticValidation::FieldsWillMerge::Field < ::Struct
  def definition; end
  def definition=(_); end
  def node; end
  def node=(_); end
  def owner_type; end
  def owner_type=(_); end
  def parents; end
  def parents=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class GraphQL::StaticValidation::FieldsWillMerge::FragmentSpread < ::Struct
  def name; end
  def name=(_); end
  def parents; end
  def parents=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

GraphQL::StaticValidation::FieldsWillMerge::NO_ARGS = T.let(T.unsafe(nil), Hash)
GraphQL::StaticValidation::FieldsWillMerge::NO_SELECTIONS = T.let(T.unsafe(nil), Array)

class GraphQL::StaticValidation::FieldsWillMergeError < ::GraphQL::StaticValidation::Error
  def initialize(kind:, field_name:); end

  def add_conflict(node, conflict_str); end
  def code; end
  def conflicts; end
  def field_name; end
  def kind; end
  def message; end
  def path; end
  def to_h; end
end

module GraphQL::StaticValidation::FragmentNamesAreUnique
  def initialize(*_arg0); end

  def on_document(_n, _p); end
  def on_fragment_definition(node, parent); end
end

class GraphQL::StaticValidation::FragmentNamesAreUniqueError < ::GraphQL::StaticValidation::Error
  def initialize(message, name:, path: T.unsafe(nil), nodes: T.unsafe(nil)); end

  def code; end
  def fragment_name; end
  def to_h; end
end

module GraphQL::StaticValidation::FragmentSpreadsArePossible
  def initialize(*_arg0); end

  def on_document(node, parent); end
  def on_fragment_spread(node, parent); end
  def on_inline_fragment(node, parent); end

  private

  def validate_fragment_in_scope(parent_type, child_type, node, context, path); end
end

class GraphQL::StaticValidation::FragmentSpreadsArePossible::FragmentSpread
  def initialize(node:, parent_type:, path:); end

  def node; end
  def parent_type; end
  def path; end
end

class GraphQL::StaticValidation::FragmentSpreadsArePossibleError < ::GraphQL::StaticValidation::Error
  def initialize(message, type:, fragment_name:, parent:, path: T.unsafe(nil), nodes: T.unsafe(nil)); end

  def code; end
  def fragment_name; end
  def parent_name; end
  def to_h; end
  def type_name; end
end

module GraphQL::StaticValidation::FragmentTypesExist
  def on_fragment_definition(node, _parent); end
  def on_inline_fragment(node, _parent); end

  private

  def validate_type_exists(fragment_node); end
end

class GraphQL::StaticValidation::FragmentTypesExistError < ::GraphQL::StaticValidation::Error
  def initialize(message, type:, path: T.unsafe(nil), nodes: T.unsafe(nil)); end

  def code; end
  def to_h; end
  def type_name; end
end

module GraphQL::StaticValidation::FragmentsAreFinite
  def on_document(_n, _p); end
end

class GraphQL::StaticValidation::FragmentsAreFiniteError < ::GraphQL::StaticValidation::Error
  def initialize(message, name:, path: T.unsafe(nil), nodes: T.unsafe(nil)); end

  def code; end
  def fragment_name; end
  def to_h; end
end

module GraphQL::StaticValidation::FragmentsAreNamed
  def on_fragment_definition(node, _parent); end
end

class GraphQL::StaticValidation::FragmentsAreNamedError < ::GraphQL::StaticValidation::Error
  def initialize(message, path: T.unsafe(nil), nodes: T.unsafe(nil)); end

  def code; end
  def to_h; end
end

module GraphQL::StaticValidation::FragmentsAreOnCompositeTypes
  def on_fragment_definition(node, parent); end
  def on_inline_fragment(node, parent); end

  private

  def validate_type_is_composite(node); end
end

class GraphQL::StaticValidation::FragmentsAreOnCompositeTypesError < ::GraphQL::StaticValidation::Error
  def initialize(message, type:, path: T.unsafe(nil), nodes: T.unsafe(nil)); end

  def argument_name; end
  def code; end
  def to_h; end
  def type_name; end
end

module GraphQL::StaticValidation::FragmentsAreUsed
  def on_document(node, parent); end
end

class GraphQL::StaticValidation::FragmentsAreUsedError < ::GraphQL::StaticValidation::Error
  def initialize(message, fragment:, path: T.unsafe(nil), nodes: T.unsafe(nil)); end

  def code; end
  def fragment_name; end
  def to_h; end
end

module GraphQL::StaticValidation::InputObjectNamesAreUnique
  def on_input_object(node, parent); end

  private

  def validate_input_fields(node); end
end

class GraphQL::StaticValidation::InputObjectNamesAreUniqueError < ::GraphQL::StaticValidation::Error
  def initialize(message, name:, path: T.unsafe(nil), nodes: T.unsafe(nil)); end

  def code; end
  def name; end
  def to_h; end
end

class GraphQL::StaticValidation::InterpreterVisitor < ::GraphQL::StaticValidation::BaseVisitor
  include ::GraphQL::StaticValidation::DefinitionDependencies
  include ::GraphQL::StaticValidation::InputObjectNamesAreUnique
  include ::GraphQL::StaticValidation::SubscriptionRootExists
  include ::GraphQL::StaticValidation::QueryRootExists
  include ::GraphQL::StaticValidation::MutationRootExists
  include ::GraphQL::StaticValidation::VariableUsagesAreAllowed
  include ::GraphQL::StaticValidation::VariablesAreUsedAndDefined
  include ::GraphQL::StaticValidation::VariableDefaultValuesAreCorrectlyTyped
  include ::GraphQL::StaticValidation::VariablesAreInputTypes
  include ::GraphQL::StaticValidation::VariableNamesAreUnique
  include ::GraphQL::StaticValidation::Error::ErrorHelper
  include ::GraphQL::StaticValidation::ArgumentNamesAreUnique
  include ::GraphQL::StaticValidation::RequiredInputObjectAttributesArePresent
  include ::GraphQL::StaticValidation::RequiredArgumentsArePresent
  include ::GraphQL::StaticValidation::ArgumentLiteralsAreCompatible
  include ::GraphQL::StaticValidation::ArgumentsAreDefined
  include ::GraphQL::StaticValidation::FieldsHaveAppropriateSelections
  include ::GraphQL::StaticValidation::FieldsWillMerge
  include ::GraphQL::StaticValidation::FieldsAreDefinedOnType
  include ::GraphQL::StaticValidation::FragmentSpreadsArePossible
  include ::GraphQL::StaticValidation::FragmentsAreOnCompositeTypes
  include ::GraphQL::StaticValidation::FragmentTypesExist
  include ::GraphQL::StaticValidation::FragmentsAreUsed
  include ::GraphQL::StaticValidation::FragmentsAreNamed
  include ::GraphQL::StaticValidation::FragmentsAreFinite
  include ::GraphQL::StaticValidation::FragmentNamesAreUnique
  include ::GraphQL::StaticValidation::OperationNamesAreValid
  include ::GraphQL::StaticValidation::UniqueDirectivesPerLocation
  include ::GraphQL::Language
  include ::GraphQL::StaticValidation::DirectivesAreInValidLocations
  include ::GraphQL::StaticValidation::DirectivesAreDefined
  include ::GraphQL::StaticValidation::NoDefinitionsArePresent
  include ::GraphQL::StaticValidation::BaseVisitor::ContextMethods
end

class GraphQL::StaticValidation::LiteralValidator
  def initialize(context:); end

  def validate(ast_value, type); end

  private

  def constant_scalar?(ast_value); end
  def ensure_array(value); end
  def maybe_raise_if_invalid(ast_value); end
  def merge_results(results_list); end
  def present_input_field_values_are_valid(type, ast_node); end
  def recursively_validate(ast_value, type); end
  def required_input_fields_are_present(type, ast_node); end
end

module GraphQL::StaticValidation::MutationRootExists
  def on_operation_definition(node, _parent); end
end

class GraphQL::StaticValidation::MutationRootExistsError < ::GraphQL::StaticValidation::Error
  def initialize(message, path: T.unsafe(nil), nodes: T.unsafe(nil)); end

  def code; end
  def to_h; end
end

module GraphQL::StaticValidation::NoDefinitionsArePresent
  include ::GraphQL::StaticValidation::Error::ErrorHelper

  def initialize(*_arg0); end

  def on_directive_definition(node, parent); end
  def on_document(node, parent); end
  def on_enum_type_definition(node, parent); end
  def on_enum_type_extension(node, parent); end
  def on_input_object_type_definition(node, parent); end
  def on_input_object_type_extension(node, parent); end
  def on_interface_type_definition(node, parent); end
  def on_interface_type_extension(node, parent); end
  def on_invalid_node(node, parent); end
  def on_object_type_definition(node, parent); end
  def on_object_type_extension(node, parent); end
  def on_scalar_type_definition(node, parent); end
  def on_scalar_type_extension(node, parent); end
  def on_schema_definition(node, parent); end
  def on_schema_extension(node, parent); end
  def on_union_type_definition(node, parent); end
  def on_union_type_extension(node, parent); end
end

class GraphQL::StaticValidation::NoDefinitionsArePresentError < ::GraphQL::StaticValidation::Error
  def initialize(message, path: T.unsafe(nil), nodes: T.unsafe(nil)); end

  def code; end
  def to_h; end
end

module GraphQL::StaticValidation::OperationNamesAreValid
  def initialize(*_arg0); end

  def on_document(node, parent); end
  def on_operation_definition(node, parent); end
end

class GraphQL::StaticValidation::OperationNamesAreValidError < ::GraphQL::StaticValidation::Error
  def initialize(message, path: T.unsafe(nil), nodes: T.unsafe(nil), name: T.unsafe(nil)); end

  def code; end
  def operation_name; end
  def to_h; end
end

module GraphQL::StaticValidation::QueryRootExists
  def on_operation_definition(node, _parent); end
end

class GraphQL::StaticValidation::QueryRootExistsError < ::GraphQL::StaticValidation::Error
  def initialize(message, path: T.unsafe(nil), nodes: T.unsafe(nil)); end

  def code; end
  def to_h; end
end

module GraphQL::StaticValidation::RequiredArgumentsArePresent
  def on_directive(node, _parent); end
  def on_field(node, _parent); end

  private

  def assert_required_args(ast_node, defn); end
end

class GraphQL::StaticValidation::RequiredArgumentsArePresentError < ::GraphQL::StaticValidation::Error
  def initialize(message, class_name:, name:, arguments:, path: T.unsafe(nil), nodes: T.unsafe(nil)); end

  def arguments; end
  def class_name; end
  def code; end
  def name; end
  def to_h; end
end

module GraphQL::StaticValidation::RequiredInputObjectAttributesArePresent
  def on_input_object(node, parent); end

  private

  def get_parent_type(context, parent); end
  def validate_input_object(ast_node, context, parent); end
end

class GraphQL::StaticValidation::RequiredInputObjectAttributesArePresentError < ::GraphQL::StaticValidation::Error
  def initialize(message, path:, nodes:, argument_type:, argument_name:, input_object_type:); end

  def argument_name; end
  def argument_type; end
  def code; end
  def input_object_type; end
  def to_h; end
end

module GraphQL::StaticValidation::SubscriptionRootExists
  def on_operation_definition(node, _parent); end
end

class GraphQL::StaticValidation::SubscriptionRootExistsError < ::GraphQL::StaticValidation::Error
  def initialize(message, path: T.unsafe(nil), nodes: T.unsafe(nil)); end

  def code; end
  def to_h; end
end

class GraphQL::StaticValidation::TypeStack
  def initialize(schema, visitor); end

  def argument_definitions; end
  def directive_definitions; end
  def field_definitions; end
  def object_types; end
  def path; end
  def schema; end
end

module GraphQL::StaticValidation::TypeStack::ArgumentStrategy
  private

  def pop(stack, node); end
  def push(stack, node); end

  class << self
    def pop(stack, node); end
    def push(stack, node); end
  end
end

module GraphQL::StaticValidation::TypeStack::DirectiveStrategy
  private

  def pop(stack, node); end
  def push(stack, node); end

  class << self
    def pop(stack, node); end
    def push(stack, node); end
  end
end

class GraphQL::StaticValidation::TypeStack::EnterWithStrategy
  def initialize(stack, strategy); end

  def call(node, parent); end
end

module GraphQL::StaticValidation::TypeStack::FieldStrategy
  private

  def pop(stack, node); end
  def push(stack, node); end

  class << self
    def pop(stack, node); end
    def push(stack, node); end
  end
end

module GraphQL::StaticValidation::TypeStack::FragmentDefinitionStrategy
  extend ::GraphQL::StaticValidation::TypeStack::FragmentWithTypeStrategy

  private

  def push_path_member(stack, node); end

  class << self
    def push_path_member(stack, node); end
  end
end

module GraphQL::StaticValidation::TypeStack::FragmentSpreadStrategy
  private

  def pop(stack, node); end
  def push(stack, node); end

  class << self
    def pop(stack, node); end
    def push(stack, node); end
  end
end

module GraphQL::StaticValidation::TypeStack::FragmentWithTypeStrategy
  def pop(stack, node); end
  def push(stack, node); end
end

module GraphQL::StaticValidation::TypeStack::InlineFragmentStrategy
  extend ::GraphQL::StaticValidation::TypeStack::FragmentWithTypeStrategy

  private

  def push_path_member(stack, node); end

  class << self
    def push_path_member(stack, node); end
  end
end

class GraphQL::StaticValidation::TypeStack::LeaveWithStrategy
  def initialize(stack, strategy); end

  def call(node, parent); end
end

module GraphQL::StaticValidation::TypeStack::OperationDefinitionStrategy
  private

  def pop(stack, node); end
  def push(stack, node); end

  class << self
    def pop(stack, node); end
    def push(stack, node); end
  end
end

GraphQL::StaticValidation::TypeStack::PUSH_STRATEGIES = T.let(T.unsafe(nil), Hash)
GraphQL::StaticValidation::TypeStack::TYPE_INFERRENCE_ROOTS = T.let(T.unsafe(nil), Array)

module GraphQL::StaticValidation::UniqueDirectivesPerLocation
  def on_enum_type_definition(node, parent); end
  def on_enum_value_definition(node, parent); end
  def on_field(node, parent); end
  def on_field_definition(node, parent); end
  def on_fragment_definition(node, parent); end
  def on_fragment_spread(node, parent); end
  def on_inline_fragment(node, parent); end
  def on_input_object_type_definition(node, parent); end
  def on_input_value_definition(node, parent); end
  def on_interface_type_definition(node, parent); end
  def on_object_type_definition(node, parent); end
  def on_operation_definition(node, parent); end
  def on_scalar_type_definition(node, parent); end
  def on_union_type_definition(node, parent); end

  private

  def validate_directive_location(node); end
end

GraphQL::StaticValidation::UniqueDirectivesPerLocation::DIRECTIVE_NODE_HOOKS = T.let(T.unsafe(nil), Array)

class GraphQL::StaticValidation::UniqueDirectivesPerLocationError < ::GraphQL::StaticValidation::Error
  def initialize(message, directive:, path: T.unsafe(nil), nodes: T.unsafe(nil)); end

  def code; end
  def directive_name; end
  def to_h; end
end

class GraphQL::StaticValidation::ValidationContext
  extend ::Forwardable

  def initialize(query, visitor_class, max_errors); end

  def argument_definition(*args, &block); end
  def dependencies(*args, &block); end
  def directive_definition(*args, &block); end
  def document(*args, &block); end
  def errors; end
  def field_definition(*args, &block); end
  def fragments(*args, &block); end
  def max_errors; end
  def object_types(*args, &block); end
  def on_dependency_resolve(&handler); end
  def on_dependency_resolve_handlers; end
  def operations(*args, &block); end
  def parent_type_definition(*args, &block); end
  def path(*args, &block); end
  def query; end
  def schema(*args, &block); end
  def schema_directives; end
  def too_many_errors?; end
  def type_definition(*args, &block); end
  def validate_literal(ast_value, type); end
  def visitor; end
  def warden(*args, &block); end
end

class GraphQL::StaticValidation::ValidationTimeoutError < ::GraphQL::StaticValidation::Error
  def initialize(message, path: T.unsafe(nil), nodes: T.unsafe(nil)); end

  def code; end
  def to_h; end
end

class GraphQL::StaticValidation::Validator
  def initialize(schema:, rules: T.unsafe(nil)); end

  def handle_timeout(query, context); end
  def validate(query, validate: T.unsafe(nil), timeout: T.unsafe(nil), max_errors: T.unsafe(nil)); end
end

module GraphQL::StaticValidation::VariableDefaultValuesAreCorrectlyTyped
  def on_variable_definition(node, parent); end
end

class GraphQL::StaticValidation::VariableDefaultValuesAreCorrectlyTypedError < ::GraphQL::StaticValidation::Error
  def initialize(message, name:, error_type:, path: T.unsafe(nil), nodes: T.unsafe(nil), type: T.unsafe(nil)); end

  def code; end
  def to_h; end
  def type_name; end
  def variable_name; end
  def violation; end
end

GraphQL::StaticValidation::VariableDefaultValuesAreCorrectlyTypedError::VIOLATIONS = T.let(T.unsafe(nil), Hash)

module GraphQL::StaticValidation::VariableNamesAreUnique
  def on_operation_definition(node, parent); end
end

class GraphQL::StaticValidation::VariableNamesAreUniqueError < ::GraphQL::StaticValidation::Error
  def initialize(message, name:, path: T.unsafe(nil), nodes: T.unsafe(nil)); end

  def code; end
  def to_h; end
  def variable_name; end
end

module GraphQL::StaticValidation::VariableUsagesAreAllowed
  def initialize(*_arg0); end

  def on_argument(node, parent); end
  def on_operation_definition(node, parent); end

  private

  def create_error(error_message, var_type, ast_var, arg_defn, arg_node); end
  def depth_of_array(array); end
  def list_dimension(type); end
  def non_null_levels_match(arg_type, var_type); end
  def validate_usage(argument_owner, arg_node, ast_var); end
  def wrap_var_type_with_depth_of_arg(var_type, arg_node); end
end

class GraphQL::StaticValidation::VariableUsagesAreAllowedError < ::GraphQL::StaticValidation::Error
  def initialize(message, type:, name:, argument:, error:, path: T.unsafe(nil), nodes: T.unsafe(nil)); end

  def argument_name; end
  def code; end
  def error_message; end
  def to_h; end
  def type_name; end
  def variable_name; end
end

module GraphQL::StaticValidation::VariablesAreInputTypes
  def on_variable_definition(node, parent); end

  private

  def get_type_name(ast_type); end
end

class GraphQL::StaticValidation::VariablesAreInputTypesError < ::GraphQL::StaticValidation::Error
  def initialize(message, type:, name:, path: T.unsafe(nil), nodes: T.unsafe(nil)); end

  def code; end
  def to_h; end
  def type_name; end
  def variable_name; end
end

module GraphQL::StaticValidation::VariablesAreUsedAndDefined
  def initialize(*_arg0); end

  def on_document(node, parent); end
  def on_fragment_definition(node, parent); end
  def on_fragment_spread(node, parent); end
  def on_operation_definition(node, parent); end
  def on_variable_identifier(node, parent); end

  private

  def create_errors(node_variables); end
  def follow_spreads(node, parent_variables, spreads_for_context, fragment_definitions, visited_fragments); end
end

class GraphQL::StaticValidation::VariablesAreUsedAndDefined::VariableUsage
  def ast_node; end
  def ast_node=(_arg0); end
  def declared?; end
  def declared_by; end
  def declared_by=(_arg0); end
  def path; end
  def path=(_arg0); end
  def used?; end
  def used_by; end
  def used_by=(_arg0); end
end

class GraphQL::StaticValidation::VariablesAreUsedAndDefinedError < ::GraphQL::StaticValidation::Error
  def initialize(message, name:, error_type:, path: T.unsafe(nil), nodes: T.unsafe(nil)); end

  def code; end
  def to_h; end
  def variable_name; end
  def violation; end
end

GraphQL::StaticValidation::VariablesAreUsedAndDefinedError::VIOLATIONS = T.let(T.unsafe(nil), Hash)

class GraphQL::StringEncodingError < ::GraphQL::RuntimeTypeError
  def initialize(str, context:); end

  def field; end
  def path; end
  def string; end
end

class GraphQL::Subscriptions
  def initialize(schema:, broadcast: T.unsafe(nil), default_broadcastable: T.unsafe(nil), **rest); end

  def broadcastable?(query_str, **query_options); end
  def build_id; end
  def default_broadcastable; end
  def delete_subscription(subscription_id); end
  def deliver(subscription_id, result); end
  def execute(subscription_id, event, object); end
  def execute_all(event, object); end
  def execute_update(subscription_id, event, object); end
  def normalize_name(event_or_arg_name); end
  def read_subscription(subscription_id); end
  def trigger(event_name, args, object, scope: T.unsafe(nil), context: T.unsafe(nil)); end
  def write_subscription(query, events); end

  private

  def normalize_arguments(event_name, arg_owner, args, context); end

  class << self
    def use(defn, options = T.unsafe(nil)); end
  end
end

class GraphQL::Subscriptions::ActionCableSubscriptions < ::GraphQL::Subscriptions
  def initialize(serializer: T.unsafe(nil), namespace: T.unsafe(nil), action_cable: T.unsafe(nil), action_cable_coder: T.unsafe(nil), **rest); end

  def delete_subscription(subscription_id); end
  def deliver(subscription_id, result); end
  def execute_all(event, object); end
  def load_action_cable_message(message, context); end
  def read_subscription(subscription_id); end
  def setup_stream(channel, initial_event); end
  def write_subscription(query, events); end

  private

  def stream_event_name(event); end
  def stream_subscription_name(subscription_id); end
end

GraphQL::Subscriptions::ActionCableSubscriptions::EVENT_PREFIX = T.let(T.unsafe(nil), String)
GraphQL::Subscriptions::ActionCableSubscriptions::SUBSCRIPTION_PREFIX = T.let(T.unsafe(nil), String)

class GraphQL::Subscriptions::BroadcastAnalyzer < ::GraphQL::Analysis::AST::Analyzer
  def initialize(subject); end

  def analyze?; end
  def on_enter_field(node, parent, visitor); end
  def result; end

  private

  def apply_broadcastable(field_defn); end
end

class GraphQL::Subscriptions::DefaultSubscriptionResolveExtension < ::GraphQL::Schema::FieldExtension
  def after_resolve(value:, context:, object:, arguments:, **rest); end
  def resolve(context:, object:, arguments:); end

  private

  def arguments_without_field_extras(arguments:); end
end

class GraphQL::Subscriptions::Event
  def initialize(name:, arguments:, field: T.unsafe(nil), context: T.unsafe(nil), scope: T.unsafe(nil)); end

  def arguments; end
  def context; end
  def fingerprint; end
  def name; end
  def topic; end

  class << self
    def serialize(_name, arguments, field, scope:, context: T.unsafe(nil)); end

    private

    def deep_sort_array_hashes(array_to_inspect); end
    def deep_sort_hash_keys(hash_to_sort); end
    def get_arg_definition(arg_owner, arg_name, context); end
    def stringify_args(arg_owner, args, context); end
  end
end

class GraphQL::Subscriptions::Instrumentation
  def initialize(schema:); end

  def after_query(query); end
  def before_query(query); end
end

class GraphQL::Subscriptions::InvalidTriggerError < ::GraphQL::Error; end

module GraphQL::Subscriptions::Serialize
  private

  def dump(obj); end
  def dump_recursive(obj); end
  def load(str); end

  class << self
    def dump(obj); end
    def dump_recursive(obj); end
    def load(str); end

    private

    def dump_value(obj); end
    def load_value(value); end
  end
end

GraphQL::Subscriptions::Serialize::GLOBALID_KEY = T.let(T.unsafe(nil), String)
GraphQL::Subscriptions::Serialize::OPEN_STRUCT_KEY = T.let(T.unsafe(nil), String)
GraphQL::Subscriptions::Serialize::SYMBOL_KEY = T.let(T.unsafe(nil), String)
GraphQL::Subscriptions::Serialize::SYMBOL_KEYS_KEY = T.let(T.unsafe(nil), String)
GraphQL::Subscriptions::Serialize::TIMESTAMP_FORMAT = T.let(T.unsafe(nil), String)
GraphQL::Subscriptions::Serialize::TIMESTAMP_KEY = T.let(T.unsafe(nil), String)
class GraphQL::Subscriptions::SubscriptionScopeMissingError < ::GraphQL::Error; end
module GraphQL::Tracing; end

module GraphQL::Tracing::ActiveSupportNotificationsTracing
  class << self
    def trace(key, metadata, &blk); end
  end
end

GraphQL::Tracing::ActiveSupportNotificationsTracing::KEYS = T.let(T.unsafe(nil), Hash)
GraphQL::Tracing::ActiveSupportNotificationsTracing::NOTIFICATIONS_ENGINE = T.let(T.unsafe(nil), GraphQL::Tracing::NotificationsTracing)

class GraphQL::Tracing::AppOpticsTracing < ::GraphQL::Tracing::PlatformTracing
  def platform_authorized_key(type); end
  def platform_field_key(type, field); end
  def platform_resolve_type_key(type); end
  def platform_trace(platform_key, _key, data); end

  private

  def gql_config; end
  def graphql_context(context, layer); end
  def graphql_multiplex(data); end
  def graphql_query(query); end
  def graphql_query_string(query_string); end
  def metadata(data, layer); end
  def multiplex_transaction_name(names); end
  def remove_comments(query); end
  def sanitize(query); end
  def span_name(key); end
  def transaction_name(query); end

  class << self
    def version; end
  end
end

GraphQL::Tracing::AppOpticsTracing::EXEC_KEYS = T.let(T.unsafe(nil), Array)
GraphQL::Tracing::AppOpticsTracing::PREP_KEYS = T.let(T.unsafe(nil), Array)

class GraphQL::Tracing::AppsignalTracing < ::GraphQL::Tracing::PlatformTracing
  def initialize(options = T.unsafe(nil)); end

  def platform_authorized_key(type); end
  def platform_field_key(type, field); end
  def platform_resolve_type_key(type); end
  def platform_trace(platform_key, key, data); end
end

class GraphQL::Tracing::DataDogTracing < ::GraphQL::Tracing::PlatformTracing
  def analytics_available?; end
  def analytics_enabled?; end
  def analytics_sample_rate; end
  def platform_authorized_key(type); end
  def platform_field_key(type, field); end
  def platform_resolve_type_key(type); end
  def platform_trace(platform_key, key, data); end
  def service_name; end
  def tracer; end
end

class GraphQL::Tracing::NewRelicTracing < ::GraphQL::Tracing::PlatformTracing
  def initialize(options = T.unsafe(nil)); end

  def platform_authorized_key(type); end
  def platform_field_key(type, field); end
  def platform_resolve_type_key(type); end
  def platform_trace(platform_key, key, data); end
end

class GraphQL::Tracing::NotificationsTracing
  def initialize(notifications_engine); end

  def trace(key, metadata, &blk); end
end

GraphQL::Tracing::NotificationsTracing::KEYS = T.let(T.unsafe(nil), Hash)
GraphQL::Tracing::NotificationsTracing::MAX_KEYS_SIZE = T.let(T.unsafe(nil), Integer)

module GraphQL::Tracing::NullTracer
  private

  def trace(k, v); end

  class << self
    def trace(k, v); end
  end
end

class GraphQL::Tracing::PlatformTracing
  def initialize(options = T.unsafe(nil)); end

  def trace(key, data); end

  private

  def cached_platform_key(ctx, key); end
  def fallback_transaction_name(context); end
  def options; end
  def transaction_name(query); end

  class << self
    def platform_keys; end
    def platform_keys=(_arg0); end
    def use(schema_defn, options = T.unsafe(nil)); end
  end
end

class GraphQL::Tracing::PrometheusTracing < ::GraphQL::Tracing::PlatformTracing
  def initialize(opts = T.unsafe(nil)); end

  def platform_authorized_key(type); end
  def platform_field_key(type, field); end
  def platform_resolve_type_key(type); end
  def platform_trace(platform_key, key, data, &block); end

  private

  def instrument_execution(platform_key, key, data, &block); end
  def observe(platform_key, key, duration); end
end

GraphQL::Tracing::PrometheusTracing::DEFAULT_COLLECTOR_TYPE = T.let(T.unsafe(nil), String)
GraphQL::Tracing::PrometheusTracing::DEFAULT_WHITELIST = T.let(T.unsafe(nil), Array)

class GraphQL::Tracing::ScoutTracing < ::GraphQL::Tracing::PlatformTracing
  def initialize(options = T.unsafe(nil)); end

  def platform_authorized_key(type); end
  def platform_field_key(type, field); end
  def platform_resolve_type_key(type); end
  def platform_trace(platform_key, key, data); end
end

GraphQL::Tracing::ScoutTracing::INSTRUMENT_OPTS = T.let(T.unsafe(nil), Hash)

class GraphQL::Tracing::StatsdTracing < ::GraphQL::Tracing::PlatformTracing
  def initialize(statsd:, **rest); end

  def platform_authorized_key(type); end
  def platform_field_key(type, field); end
  def platform_resolve_type_key(type); end
  def platform_trace(platform_key, key, data); end
end

module GraphQL::Tracing::Traceable
  def trace(key, metadata, &block); end

  private

  def call_tracers(idx, key, metadata, &block); end
end

module GraphQL::TypeKinds; end
GraphQL::TypeKinds::ENUM = T.let(T.unsafe(nil), GraphQL::TypeKinds::TypeKind)
GraphQL::TypeKinds::INPUT_OBJECT = T.let(T.unsafe(nil), GraphQL::TypeKinds::TypeKind)
GraphQL::TypeKinds::INTERFACE = T.let(T.unsafe(nil), GraphQL::TypeKinds::TypeKind)
GraphQL::TypeKinds::LIST = T.let(T.unsafe(nil), GraphQL::TypeKinds::TypeKind)
GraphQL::TypeKinds::NON_NULL = T.let(T.unsafe(nil), GraphQL::TypeKinds::TypeKind)
GraphQL::TypeKinds::OBJECT = T.let(T.unsafe(nil), GraphQL::TypeKinds::TypeKind)
GraphQL::TypeKinds::SCALAR = T.let(T.unsafe(nil), GraphQL::TypeKinds::TypeKind)
GraphQL::TypeKinds::TYPE_KINDS = T.let(T.unsafe(nil), Array)

class GraphQL::TypeKinds::TypeKind
  def initialize(name, abstract: T.unsafe(nil), fields: T.unsafe(nil), wraps: T.unsafe(nil), input: T.unsafe(nil), description: T.unsafe(nil)); end

  def abstract?; end
  def composite?; end
  def description; end
  def enum?; end
  def fields?; end
  def input?; end
  def input_object?; end
  def interface?; end
  def list?; end
  def name; end
  def non_null?; end
  def object?; end
  def resolves?; end
  def scalar?; end
  def to_s; end
  def union?; end
  def wraps?; end
end

GraphQL::TypeKinds::UNION = T.let(T.unsafe(nil), GraphQL::TypeKinds::TypeKind)
module GraphQL::Types; end

class GraphQL::Types::BigInt < ::GraphQL::Schema::Scalar
  class << self
    def coerce_input(value, _ctx); end
    def coerce_result(value, _ctx); end
    def parse_int(value); end
  end
end

class GraphQL::Types::Boolean < ::GraphQL::Schema::Scalar
  class << self
    def coerce_input(value, _ctx); end
    def coerce_result(value, _ctx); end
  end
end

class GraphQL::Types::Float < ::GraphQL::Schema::Scalar
  class << self
    def coerce_input(value, _ctx); end
    def coerce_result(value, _ctx); end
  end
end

class GraphQL::Types::ID < ::GraphQL::Schema::Scalar
  class << self
    def coerce_input(value, _ctx); end
    def coerce_result(value, _ctx); end
  end
end

class GraphQL::Types::ISO8601Date < ::GraphQL::Schema::Scalar
  class << self
    def coerce_input(value, ctx); end
    def coerce_result(value, _ctx); end
  end
end

class GraphQL::Types::ISO8601DateTime < ::GraphQL::Schema::Scalar
  class << self
    def coerce_input(str_value, _ctx); end
    def coerce_result(value, _ctx); end
    def time_precision; end
    def time_precision=(value); end
  end
end

GraphQL::Types::ISO8601DateTime::DEFAULT_TIME_PRECISION = T.let(T.unsafe(nil), Integer)

class GraphQL::Types::Int < ::GraphQL::Schema::Scalar
  class << self
    def coerce_input(value, ctx); end
    def coerce_result(value, ctx); end
  end
end

GraphQL::Types::Int::MAX = T.let(T.unsafe(nil), Integer)
GraphQL::Types::Int::MIN = T.let(T.unsafe(nil), Integer)

class GraphQL::Types::JSON < ::GraphQL::Schema::Scalar
  class << self
    def coerce_input(value, _context); end
    def coerce_result(value, _context); end
  end
end

module GraphQL::Types::Relay; end

class GraphQL::Types::Relay::BaseConnection < ::GraphQL::Schema::Object
  include ::GraphQL::Types::Relay::ConnectionBehaviors
  extend ::GraphQL::Types::Relay::ConnectionBehaviors::ClassMethods
  extend ::GraphQL::Types::Relay::DefaultRelay
end

class GraphQL::Types::Relay::BaseEdge < ::GraphQL::Schema::Object
  include ::GraphQL::Types::Relay::EdgeBehaviors
  extend ::GraphQL::Types::Relay::EdgeBehaviors::ClassMethods
end

module GraphQL::Types::Relay::ConnectionBehaviors
  extend ::Forwardable

  mixes_in_class_methods ::GraphQL::Types::Relay::ConnectionBehaviors::ClassMethods
  mixes_in_class_methods ::GraphQL::Types::Relay::DefaultRelay

  def cursor_from_node(*args, &block); end
  def edges; end
  def nodes; end
  def parent(*args, &block); end

  class << self
    def add_page_info_field(obj_type); end
    def included(child_class); end
  end
end

module GraphQL::Types::Relay::ConnectionBehaviors::ClassMethods
  def accessible?(ctx); end
  def authorized?(obj, ctx); end
  def edge_class; end
  def edge_nullable(new_value = T.unsafe(nil)); end
  def edge_type(edge_type_class, edge_class: T.unsafe(nil), node_type: T.unsafe(nil), nodes_field: T.unsafe(nil), node_nullable: T.unsafe(nil), edges_nullable: T.unsafe(nil), edge_nullable: T.unsafe(nil), field_options: T.unsafe(nil)); end
  def edges_nullable(new_value = T.unsafe(nil)); end
  def has_nodes_field(new_value = T.unsafe(nil)); end
  def node_nullable(new_value = T.unsafe(nil)); end
  def node_type; end
  def nodes_field(node_nullable: T.unsafe(nil), field_options: T.unsafe(nil)); end
  def scope_items(items, context); end
  def visible?(ctx); end

  private

  def define_nodes_field(nullable, field_options: T.unsafe(nil)); end
end

module GraphQL::Types::Relay::DefaultRelay
  def default_relay(new_value); end
  def default_relay?; end

  class << self
    def extended(child_class); end
  end
end

module GraphQL::Types::Relay::EdgeBehaviors
  mixes_in_class_methods ::GraphQL::Types::Relay::EdgeBehaviors::ClassMethods

  class << self
    def included(child_class); end
  end
end

module GraphQL::Types::Relay::EdgeBehaviors::ClassMethods
  def accessible?(ctx); end
  def authorized?(obj, ctx); end
  def node_nullable(new_value = T.unsafe(nil)); end
  def node_type(node_type = T.unsafe(nil), null: T.unsafe(nil), field_options: T.unsafe(nil)); end
  def visible?(ctx); end
end

module GraphQL::Types::Relay::HasNodeField
  class << self
    def field_block; end
    def field_options; end
    def included(child_class); end
  end
end

module GraphQL::Types::Relay::HasNodesField
  class << self
    def field_block; end
    def field_options; end
    def included(child_class); end
  end
end

module GraphQL::Types::Relay::Node
  include ::GraphQL::Schema::Member::GraphQLTypeNames
  include ::GraphQL::Schema::Interface
  include ::GraphQL::Types::Relay::NodeBehaviors
  extend ::GraphQL::Schema::FindInheritedValue
  extend ::GraphQL::Schema::FindInheritedValue::EmptyObjects
  extend ::GraphQL::Schema::Member::BaseDSLMethods
  extend ::GraphQL::Schema::Member::TypeSystemHelpers
  extend ::GraphQL::Schema::Member::HasFields
  extend ::GraphQL::Schema::Member::HasPath
  extend ::GraphQL::Schema::Member::RelayShortcuts
  extend ::GraphQL::Schema::Member::Scoped
  extend ::GraphQL::Schema::Member::HasAstNode
  extend ::GraphQL::Schema::Member::HasUnresolvedTypeError
  extend ::GraphQL::Schema::Member::HasDirectives
  extend ::GraphQL::Schema::Member::HasInterfaces
  extend ::GraphQL::Schema::Interface::DefinitionMethods
  extend ::GraphQL::Types::Relay::Node::DefinitionMethods
  extend ::GraphQL::Types::Relay::DefaultRelay
end

module GraphQL::Types::Relay::Node::DefinitionMethods; end
class GraphQL::Types::Relay::Node::UnresolvedTypeError < ::GraphQL::UnresolvedTypeError; end

module GraphQL::Types::Relay::NodeBehaviors
  mixes_in_class_methods ::GraphQL::Types::Relay::DefaultRelay

  def default_global_id; end

  class << self
    def included(child_module); end
  end
end

class GraphQL::Types::Relay::PageInfo < ::GraphQL::Schema::Object
  include ::GraphQL::Types::Relay::PageInfoBehaviors
  extend ::GraphQL::Types::Relay::DefaultRelay
end

module GraphQL::Types::Relay::PageInfoBehaviors
  mixes_in_class_methods ::GraphQL::Types::Relay::DefaultRelay

  class << self
    def included(child_class); end
  end
end

class GraphQL::Types::String < ::GraphQL::Schema::Scalar
  class << self
    def coerce_input(value, _ctx); end
    def coerce_result(value, ctx); end
  end
end

class GraphQL::UnauthorizedError < ::GraphQL::Error
  def initialize(message = T.unsafe(nil), object: T.unsafe(nil), type: T.unsafe(nil), context: T.unsafe(nil)); end

  def context; end
  def context=(_arg0); end
  def object; end
  def type; end
end

class GraphQL::UnauthorizedFieldError < ::GraphQL::UnauthorizedError
  def initialize(message = T.unsafe(nil), object: T.unsafe(nil), type: T.unsafe(nil), context: T.unsafe(nil), field: T.unsafe(nil)); end

  def field; end
  def field=(_arg0); end
end

class GraphQL::UnresolvedTypeError < ::GraphQL::RuntimeTypeError
  def initialize(value, field, parent_type, resolved_type, possible_types); end

  def field; end
  def parent_type; end
  def possible_types; end
  def resolved_type; end
  def value; end
end

GraphQL::VERSION = T.let(T.unsafe(nil), String)
