# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `devise` gem.
# Please instead update this file by running `bin/tapioca gem devise`.

module ActionController::Base::HelperMethods
  def alert(*args, &block); end
  def combined_fragment_cache_key(*args, &block); end
  def content_security_policy?(*args, &block); end
  def content_security_policy_nonce(*args, &block); end
  def cookies(*args, &block); end
  def form_authenticity_token(*args, &block); end
  def notice(*args, &block); end
  def protect_against_forgery?(*args, &block); end
  def view_cache_dependencies(*args, &block); end
end

module ActionDispatch::Routing
  extend ::ActiveSupport::Autoload
end

ActionDispatch::Routing::HTTP_METHODS = T.let(T.unsafe(nil), Array)

class ActionDispatch::Routing::Mapper
  include ::ActionDispatch::Routing::Mapper::Base
  include ::ActionDispatch::Routing::Mapper::HttpHelpers
  include ::ActionDispatch::Routing::Redirection
  include ::ActionDispatch::Routing::Mapper::Scoping
  include ::ActionDispatch::Routing::Mapper::Concerns
  include ::ActionDispatch::Routing::Mapper::Resources
  include ::ActionDispatch::Routing::Mapper::CustomUrls

  def initialize(set); end

  def as(scope); end
  def authenticate(scope = T.unsafe(nil), block = T.unsafe(nil)); end
  def authenticated(scope = T.unsafe(nil), block = T.unsafe(nil)); end
  def devise_for(*resources); end
  def devise_scope(scope); end
  def unauthenticated(scope = T.unsafe(nil)); end

  protected

  def constraints_for(method_to_apply, scope = T.unsafe(nil), block = T.unsafe(nil)); end
  def devise_confirmation(mapping, controllers); end
  def devise_omniauth_callback(mapping, controllers); end
  def devise_password(mapping, controllers); end
  def devise_registration(mapping, controllers); end
  def devise_session(mapping, controllers); end
  def devise_unlock(mapping, controllers); end
  def raise_no_devise_method_error!(klass); end
  def raise_no_secret_key; end
  def set_omniauth_path_prefix!(path_prefix); end
  def with_devise_exclusive_scope(new_path, new_as, options); end

  class << self
    def normalize_name(name); end
    def normalize_path(path); end
  end
end

ActionDispatch::Routing::Mapper::URL_OPTIONS = T.let(T.unsafe(nil), Array)

class ActionDispatch::Routing::RouteSet
  include ::Devise::RouteSet

  def initialize(config = T.unsafe(nil)); end

  def add_polymorphic_mapping(klass, options, &block); end
  def add_route(mapping, name); end
  def add_url_helper(name, options, &block); end
  def api_only?; end
  def append(&block); end
  def call(env); end
  def clear!; end
  def default_scope; end
  def default_scope=(_arg0); end
  def default_url_options; end
  def default_url_options=(_arg0); end
  def define_mounted_helper(name, script_namer = T.unsafe(nil)); end
  def disable_clear_and_finalize; end
  def disable_clear_and_finalize=(_arg0); end
  def draw(&block); end
  def draw_paths; end
  def draw_paths=(_arg0); end
  def eager_load!; end
  def empty?; end
  def env_key; end
  def extra_keys(options, recall = T.unsafe(nil)); end
  def find_relative_url_root(options); end
  def find_script_name(options); end
  def formatter; end
  def formatter=(_arg0); end
  def generate_extras(options, recall = T.unsafe(nil)); end
  def generate_url_helpers(supports_path); end
  def inspect; end
  def mounted_helpers; end
  def named_routes; end
  def named_routes=(_arg0); end
  def optimize_routes_generation?; end
  def path_for(options, route_name = T.unsafe(nil), reserved = T.unsafe(nil)); end
  def polymorphic_mappings; end
  def prepend(&block); end
  def recognize_path(path, environment = T.unsafe(nil)); end
  def recognize_path_with_request(req, path, extras, raise_on_missing: T.unsafe(nil)); end
  def relative_url_root; end
  def request_class; end
  def resources_path_names; end
  def resources_path_names=(_arg0); end
  def router; end
  def router=(_arg0); end
  def routes; end
  def set; end
  def set=(_arg0); end
  def url_for(options, route_name = T.unsafe(nil), url_strategy = T.unsafe(nil), method_name = T.unsafe(nil), reserved = T.unsafe(nil)); end
  def url_helpers(supports_path = T.unsafe(nil)); end

  private

  def eval_block(block); end
  def generate(route_name, options, recall = T.unsafe(nil), method_name = T.unsafe(nil)); end
  def make_request(env); end

  class << self
    def default_resources_path_names; end
    def new_with_config(config); end
  end
end

class ActionDispatch::Routing::RouteSet::Config < ::Struct
  def api_only; end
  def api_only=(_); end
  def relative_url_root; end
  def relative_url_root=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

ActionDispatch::Routing::RouteSet::DEFAULT_CONFIG = T.let(T.unsafe(nil), ActionDispatch::Routing::RouteSet::Config)
ActionDispatch::Routing::RouteSet::PATH = T.let(T.unsafe(nil), Proc)
ActionDispatch::Routing::RouteSet::RESERVED_OPTIONS = T.let(T.unsafe(nil), Array)
ActionDispatch::Routing::RouteSet::UNKNOWN = T.let(T.unsafe(nil), Proc)
ActionDispatch::Routing::SEPARATORS = T.let(T.unsafe(nil), Array)

module ApplicationController::HelperMethods
  include ::ActionController::Base::HelperMethods
  include ::Pundit::Helper

  def error(*args, &block); end
  def policy(*args, &block); end
  def pundit_policy_scope(*args, &block); end
  def pundit_user(*args, &block); end
  def success(*args, &block); end
end

module Devise
  def allow_unconfirmed_access_for; end
  def allow_unconfirmed_access_for=(val); end
  def authentication_keys; end
  def authentication_keys=(val); end
  def case_insensitive_keys; end
  def case_insensitive_keys=(val); end
  def clean_up_csrf_token_on_authentication; end
  def clean_up_csrf_token_on_authentication=(val); end
  def confirm_within; end
  def confirm_within=(val); end
  def confirmation_keys; end
  def confirmation_keys=(val); end
  def default_scope; end
  def default_scope=(val); end
  def email_regexp; end
  def email_regexp=(val); end
  def expire_all_remember_me_on_sign_out; end
  def expire_all_remember_me_on_sign_out=(val); end
  def extend_remember_period; end
  def extend_remember_period=(val); end
  def helpers; end
  def http_authenticatable; end
  def http_authenticatable=(val); end
  def http_authenticatable_on_xhr; end
  def http_authenticatable_on_xhr=(val); end
  def http_authentication_key; end
  def http_authentication_key=(val); end
  def http_authentication_realm; end
  def http_authentication_realm=(val); end
  def last_attempt_warning; end
  def last_attempt_warning=(val); end
  def lock_strategy; end
  def lock_strategy=(val); end
  def mailer_sender; end
  def mailer_sender=(val); end
  def mappings; end
  def maximum_attempts; end
  def maximum_attempts=(val); end
  def navigational_formats; end
  def navigational_formats=(val); end
  def omniauth_configs; end
  def omniauth_path_prefix; end
  def omniauth_path_prefix=(val); end
  def params_authenticatable; end
  def params_authenticatable=(val); end
  def paranoid; end
  def paranoid=(val); end
  def parent_controller; end
  def parent_controller=(val); end
  def parent_mailer; end
  def parent_mailer=(val); end
  def password_length; end
  def password_length=(val); end
  def pepper; end
  def pepper=(val); end
  def reconfirmable; end
  def reconfirmable=(val); end
  def reload_routes; end
  def reload_routes=(val); end
  def remember_for; end
  def remember_for=(val); end
  def rememberable_options; end
  def rememberable_options=(val); end
  def request_keys; end
  def request_keys=(val); end
  def reset_password_keys; end
  def reset_password_keys=(val); end
  def reset_password_within; end
  def reset_password_within=(val); end
  def router_name; end
  def router_name=(val); end
  def scoped_views; end
  def scoped_views=(val); end
  def secret_key; end
  def secret_key=(val); end
  def send_email_changed_notification; end
  def send_email_changed_notification=(val); end
  def send_password_change_notification; end
  def send_password_change_notification=(val); end
  def sign_in_after_change_password; end
  def sign_in_after_change_password=(val); end
  def sign_in_after_reset_password; end
  def sign_in_after_reset_password=(val); end
  def sign_out_all_scopes; end
  def sign_out_all_scopes=(val); end
  def sign_out_via; end
  def sign_out_via=(val); end
  def skip_session_storage; end
  def skip_session_storage=(val); end
  def stretches; end
  def stretches=(val); end
  def strip_whitespace_keys; end
  def strip_whitespace_keys=(val); end
  def timeout_in; end
  def timeout_in=(val); end
  def token_generator; end
  def token_generator=(val); end
  def unlock_in; end
  def unlock_in=(val); end
  def unlock_keys; end
  def unlock_keys=(val); end
  def unlock_strategy; end
  def unlock_strategy=(val); end
  def warden_config; end
  def warden_config=(val); end

  class << self
    def activerecord51?; end
    def add_mapping(resource, options); end
    def add_module(module_name, options = T.unsafe(nil)); end
    def allow_unconfirmed_access_for; end
    def allow_unconfirmed_access_for=(val); end
    def authentication_keys; end
    def authentication_keys=(val); end
    def available_router_name; end
    def case_insensitive_keys; end
    def case_insensitive_keys=(val); end
    def clean_up_csrf_token_on_authentication; end
    def clean_up_csrf_token_on_authentication=(val); end
    def configure_warden!; end
    def confirm_within; end
    def confirm_within=(val); end
    def confirmation_keys; end
    def confirmation_keys=(val); end
    def default_scope; end
    def default_scope=(val); end
    def email_regexp; end
    def email_regexp=(val); end
    def expire_all_remember_me_on_sign_out; end
    def expire_all_remember_me_on_sign_out=(val); end
    def extend_remember_period; end
    def extend_remember_period=(val); end
    def friendly_token(length = T.unsafe(nil)); end
    def helpers; end
    def http_authenticatable; end
    def http_authenticatable=(val); end
    def http_authenticatable_on_xhr; end
    def http_authenticatable_on_xhr=(val); end
    def http_authentication_key; end
    def http_authentication_key=(val); end
    def http_authentication_realm; end
    def http_authentication_realm=(val); end
    def include_helpers(scope); end
    def last_attempt_warning; end
    def last_attempt_warning=(val); end
    def lock_strategy; end
    def lock_strategy=(val); end
    def mailer; end
    def mailer=(class_name); end
    def mailer_sender; end
    def mailer_sender=(val); end
    def mappings; end
    def maximum_attempts; end
    def maximum_attempts=(val); end
    def navigational_formats; end
    def navigational_formats=(val); end
    def omniauth(provider, *args); end
    def omniauth_configs; end
    def omniauth_path_prefix; end
    def omniauth_path_prefix=(val); end
    def omniauth_providers; end
    def params_authenticatable; end
    def params_authenticatable=(val); end
    def paranoid; end
    def paranoid=(val); end
    def parent_controller; end
    def parent_controller=(val); end
    def parent_mailer; end
    def parent_mailer=(val); end
    def password_length; end
    def password_length=(val); end
    def pepper; end
    def pepper=(val); end
    def reconfirmable; end
    def reconfirmable=(val); end
    def ref(arg); end
    def regenerate_helpers!; end
    def reload_routes; end
    def reload_routes=(val); end
    def remember_for; end
    def remember_for=(val); end
    def rememberable_options; end
    def rememberable_options=(val); end
    def request_keys; end
    def request_keys=(val); end
    def reset_password_keys; end
    def reset_password_keys=(val); end
    def reset_password_within; end
    def reset_password_within=(val); end
    def router_name; end
    def router_name=(val); end
    def scoped_views; end
    def scoped_views=(val); end
    def secret_key; end
    def secret_key=(val); end
    def secure_compare(a, b); end
    def send_email_changed_notification; end
    def send_email_changed_notification=(val); end
    def send_password_change_notification; end
    def send_password_change_notification=(val); end
    def setup; end
    def sign_in_after_change_password; end
    def sign_in_after_change_password=(val); end
    def sign_in_after_reset_password; end
    def sign_in_after_reset_password=(val); end
    def sign_out_all_scopes; end
    def sign_out_all_scopes=(val); end
    def sign_out_via; end
    def sign_out_via=(val); end
    def skip_session_storage; end
    def skip_session_storage=(val); end
    def stretches; end
    def stretches=(val); end
    def strip_whitespace_keys; end
    def strip_whitespace_keys=(val); end
    def timeout_in; end
    def timeout_in=(val); end
    def token_generator; end
    def token_generator=(val); end
    def unlock_in; end
    def unlock_in=(val); end
    def unlock_keys; end
    def unlock_keys=(val); end
    def unlock_strategy; end
    def unlock_strategy=(val); end
    def warden(&block); end
    def warden_config; end
    def warden_config=(val); end
  end
end

Devise::ALL = T.let(T.unsafe(nil), Array)
Devise::CONTROLLERS = T.let(T.unsafe(nil), Hash)

class Devise::ConfirmationsController < ::DeviseController
  def create; end
  def new; end
  def show; end

  protected

  def after_confirmation_path_for(resource_name, resource); end
  def after_resending_confirmation_instructions_path_for(resource_name); end
  def translation_scope; end

  private

  def _layout(lookup_context, formats); end

  class << self
    def __callbacks; end
    def middleware_stack; end
  end
end

module Devise::Controllers; end

module Devise::Controllers::Helpers
  include ::Devise::Controllers::SignInOut
  include ::Devise::Controllers::StoreLocation
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Devise::Controllers::Helpers::ClassMethods

  def after_sign_in_path_for(resource_or_scope); end
  def after_sign_out_path_for(resource_or_scope); end
  def allow_params_authentication!; end
  def devise_controller?; end
  def devise_parameter_sanitizer; end
  def handle_unverified_request; end
  def is_flashing_format?; end
  def is_navigational_format?; end
  def request_format; end
  def sign_in_and_redirect(resource_or_scope, *args); end
  def sign_out_and_redirect(resource_or_scope); end
  def signed_in_root_path(resource_or_scope); end
  def warden; end

  private

  def expire_data_after_sign_out!; end

  class << self
    def define_helpers(mapping); end
  end
end

module Devise::Controllers::Helpers::ClassMethods
  def devise_group(group_name, opts = T.unsafe(nil)); end
  def log_process_action(payload); end
end

module Devise::Controllers::Rememberable
  def forget_me(resource); end
  def remember_me(resource); end
  def remember_me_is_active?(resource); end

  protected

  def forget_cookie_values(resource); end
  def remember_cookie_values(resource); end
  def remember_key(resource, scope); end

  class << self
    def cookie_values; end
  end
end

module Devise::Controllers::ScopedViews
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Devise::Controllers::ScopedViews::ClassMethods
end

module Devise::Controllers::ScopedViews::ClassMethods
  def scoped_views=(value); end
  def scoped_views?; end
end

module Devise::Controllers::SignInOut
  def bypass_sign_in(resource, scope: T.unsafe(nil)); end
  def sign_in(resource_or_scope, *args); end
  def sign_out(resource_or_scope = T.unsafe(nil)); end
  def sign_out_all_scopes(lock = T.unsafe(nil)); end
  def signed_in?(scope = T.unsafe(nil)); end

  private

  def expire_data_after_sign_in!; end
  def expire_data_after_sign_out!; end
end

module Devise::Controllers::StoreLocation
  def store_location_for(resource_or_scope, location); end
  def stored_location_for(resource_or_scope); end

  private

  def add_fragment_back_to_path(uri, path); end
  def extract_path_from_location(location); end
  def parse_uri(location); end
  def remove_domain_from_uri(uri); end
  def stored_location_key_for(resource_or_scope); end
end

module Devise::Controllers::UrlHelpers
  def cancel_registration_path(resource_or_scope, *args); end
  def cancel_registration_url(resource_or_scope, *args); end
  def confirmation_path(resource_or_scope, *args); end
  def confirmation_url(resource_or_scope, *args); end
  def destroy_session_path(resource_or_scope, *args); end
  def destroy_session_url(resource_or_scope, *args); end
  def edit_password_path(resource_or_scope, *args); end
  def edit_password_url(resource_or_scope, *args); end
  def edit_registration_path(resource_or_scope, *args); end
  def edit_registration_url(resource_or_scope, *args); end
  def new_confirmation_path(resource_or_scope, *args); end
  def new_confirmation_url(resource_or_scope, *args); end
  def new_password_path(resource_or_scope, *args); end
  def new_password_url(resource_or_scope, *args); end
  def new_registration_path(resource_or_scope, *args); end
  def new_registration_url(resource_or_scope, *args); end
  def new_session_path(resource_or_scope, *args); end
  def new_session_url(resource_or_scope, *args); end
  def new_unlock_path(resource_or_scope, *args); end
  def new_unlock_url(resource_or_scope, *args); end
  def password_path(resource_or_scope, *args); end
  def password_url(resource_or_scope, *args); end
  def registration_path(resource_or_scope, *args); end
  def registration_url(resource_or_scope, *args); end
  def session_path(resource_or_scope, *args); end
  def session_url(resource_or_scope, *args); end
  def unlock_path(resource_or_scope, *args); end
  def unlock_url(resource_or_scope, *args); end

  private

  def _devise_route_context; end

  class << self
    def generate_helpers!(routes = T.unsafe(nil)); end
    def remove_helpers!; end
  end
end

class Devise::Delegator
  def call(env); end
  def failure_app(env); end
end

Devise::DeprecatedConstantAccessor = ActiveSupport::Deprecation::DeprecatedConstantAccessor

module Devise::Encryptor
  class << self
    def compare(klass, hashed_password, password); end
    def digest(klass, password); end
  end
end

class Devise::Engine < ::Rails::Engine; end

class Devise::FailureApp < ::ActionController::Metal
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::ActionDispatch::Routing::UrlFor
  include ::AbstractController::UrlFor
  include ::ActionController::UrlFor
  include ::AbstractController::Logger
  include ::ActiveSupport::Benchmarkable
  include ::ActionController::Redirecting
  include ::ActionDispatch::Routing::RouteSet::MountedHelpers
  include ::Devise::Controllers::StoreLocation
  extend ::AbstractController::UrlFor::ClassMethods

  def default_url_options; end
  def default_url_options=(_arg0); end
  def default_url_options?; end
  def flash(*_arg0, &_arg1); end
  def http_auth; end
  def logger; end
  def logger=(value); end
  def recall; end
  def redirect; end
  def respond; end

  protected

  def attempted_path; end
  def http_auth?; end
  def http_auth_body; end
  def http_auth_header?; end
  def i18n_message(default = T.unsafe(nil)); end
  def i18n_options(options); end
  def is_flashing_format?; end
  def is_navigational_format?; end
  def recall_app(app); end
  def redirect_url; end
  def relative_url_root; end
  def relative_url_root?; end
  def request_format; end
  def route(scope); end
  def scope; end
  def scope_class; end
  def scope_url; end
  def skip_format?; end
  def store_location!; end
  def warden; end
  def warden_message; end
  def warden_options; end

  private

  def rails_51_and_up?; end
  def root_path_defined?(context); end

  class << self
    def _routes; end
    def call(env); end
    def default_url_options(*args); end
    def default_url_options=(value); end
    def default_url_options?; end
    def logger; end
    def logger=(value); end
    def middleware_stack; end
  end
end

class Devise::Getter
  def initialize(name); end

  def get; end
end

module Devise::Hooks; end

class Devise::Hooks::Proxy
  include ::Devise::Controllers::Rememberable
  include ::Devise::Controllers::SignInOut

  def initialize(warden); end

  def cookies(*_arg0, &_arg1); end
  def request(*_arg0, &_arg1); end
  def session; end
  def warden; end
end

class Devise::Mailer < ::ActionMailer::Base
  include ::Devise::Mailers::Helpers
  include ::Devise::Controllers::ScopedViews
  extend ::Devise::Controllers::ScopedViews::ClassMethods

  def confirmation_instructions(record, token, opts = T.unsafe(nil)); end
  def email_changed(record, opts = T.unsafe(nil)); end
  def password_change(record, opts = T.unsafe(nil)); end
  def reset_password_instructions(record, token, opts = T.unsafe(nil)); end
  def unlock_instructions(record, token, opts = T.unsafe(nil)); end

  private

  def _layout(lookup_context, formats); end
end

module Devise::Mailers; end

module Devise::Mailers::Helpers
  extend ::ActiveSupport::Concern
  include ::Devise::Controllers::ScopedViews

  mixes_in_class_methods ::Devise::Controllers::ScopedViews::ClassMethods

  protected

  def devise_mail(record, action, opts = T.unsafe(nil), &block); end
  def devise_mapping; end
  def headers_for(action, opts); end
  def initialize_from_record(record); end
  def mailer_from(mapping); end
  def mailer_reply_to(mapping); end
  def mailer_sender(mapping, sender = T.unsafe(nil)); end
  def resource; end
  def scope_name; end
  def subject_for(key); end
  def template_paths; end
end

class Devise::Mapping
  def initialize(name, options); end

  def authenticatable?; end
  def class_name; end
  def confirmable?; end
  def controllers; end
  def database_authenticatable?; end
  def failure_app; end
  def format; end
  def fullpath; end
  def lockable?; end
  def modules; end
  def name; end
  def no_input_strategies; end
  def omniauthable?; end
  def path; end
  def path_names; end
  def recoverable?; end
  def registerable?; end
  def rememberable?; end
  def router_name; end
  def routes; end
  def scoped_path; end
  def sign_out_via; end
  def singular; end
  def strategies; end
  def timeoutable?; end
  def to; end
  def trackable?; end
  def used_helpers; end
  def used_routes; end
  def validatable?; end

  private

  def default_constraints(options); end
  def default_controllers(options); end
  def default_defaults(options); end
  def default_failure_app(options); end
  def default_path_names(options); end
  def default_used_helpers(options); end
  def default_used_route(options); end

  class << self
    def add_module(m); end
    def find_by_path!(path, path_type = T.unsafe(nil)); end
    def find_scope!(obj); end
  end
end

class Devise::MissingWarden < ::StandardError
  def initialize; end
end

module Devise::Models
  def devise(*modules); end
  def devise_modules_hook!; end

  class << self
    def check_fields!(klass); end
    def config(mod, *accessors); end
  end
end

module Devise::Models::Authenticatable
  include ::ActiveSupport::Deprecation::DeprecatedConstantAccessor
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::Devise::Models::Authenticatable::ClassMethods

  def active_for_authentication?; end
  def authenticatable_salt; end
  def inactive_message; end
  def inspect; end
  def serializable_hash(options = T.unsafe(nil)); end
  def unauthenticated_message; end
  def valid_for_authentication?; end

  protected

  def apply_to_attribute_or_variable(attr, method); end
  def devise_mailer; end
  def downcase_keys; end
  def send_devise_notification(notification, *args); end
  def strip_whitespace; end

  class << self
    def required_fields(klass); end
  end

  module GeneratedClassMethods
    def devise_modules; end
    def devise_modules=(value); end
    def devise_modules?; end
  end

  module GeneratedInstanceMethods
    def devise_modules; end
    def devise_modules?; end
  end
end

module Devise::Models::Authenticatable::ClassMethods
  def authentication_keys; end
  def authentication_keys=(value); end
  def case_insensitive_keys; end
  def case_insensitive_keys=(value); end
  def find_first_by_auth_conditions(tainted_conditions, opts = T.unsafe(nil)); end
  def find_for_authentication(tainted_conditions); end
  def find_or_initialize_with_error_by(attribute, value, error = T.unsafe(nil)); end
  def find_or_initialize_with_errors(required_attributes, attributes, error = T.unsafe(nil)); end
  def http_authenticatable; end
  def http_authenticatable=(value); end
  def http_authenticatable?(strategy); end
  def http_authentication_key; end
  def http_authentication_key=(value); end
  def params_authenticatable; end
  def params_authenticatable=(value); end
  def params_authenticatable?(strategy); end
  def request_keys; end
  def request_keys=(value); end
  def serialize_from_session(key, salt); end
  def serialize_into_session(record); end
  def skip_session_storage; end
  def skip_session_storage=(value); end
  def strip_whitespace_keys; end
  def strip_whitespace_keys=(value); end

  protected

  def devise_parameter_filter; end

  class << self
    def available_configs; end
    def available_configs=(_arg0); end
  end
end

Devise::Models::Authenticatable::UNSAFE_ATTRIBUTES_FOR_SERIALIZATION = T.let(T.unsafe(nil), Array)

module Devise::Models::Confirmable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Devise::Models::Confirmable::ClassMethods

  def initialize(*args, &block); end

  def active_for_authentication?; end
  def confirm(args = T.unsafe(nil)); end
  def confirmed?; end
  def inactive_message; end
  def pending_reconfirmation?; end
  def resend_confirmation_instructions; end
  def send_confirmation_instructions; end
  def send_reconfirmation_instructions; end
  def skip_confirmation!; end
  def skip_confirmation_notification!; end
  def skip_reconfirmation!; end

  protected

  def after_confirmation; end
  def confirmation_period_expired?; end
  def confirmation_period_valid?; end
  def confirmation_required?; end
  def generate_confirmation_token; end
  def generate_confirmation_token!; end
  def pending_any_confirmation; end
  def postpone_email_change?; end
  def postpone_email_change_until_confirmation_and_regenerate_confirmation_token; end
  def reconfirmation_required?; end
  def send_confirmation_notification?; end
  def send_email_changed_notification?; end
  def send_on_create_confirmation_instructions; end
  def skip_reconfirmation_in_callback!; end

  class << self
    def required_fields(klass); end
  end
end

module Devise::Models::Confirmable::ClassMethods
  def allow_unconfirmed_access_for; end
  def allow_unconfirmed_access_for=(value); end
  def confirm_by_token(confirmation_token); end
  def confirm_within; end
  def confirm_within=(value); end
  def confirmation_keys; end
  def confirmation_keys=(value); end
  def find_by_unconfirmed_email_with_errors(attributes = T.unsafe(nil)); end
  def reconfirmable; end
  def reconfirmable=(value); end
  def send_confirmation_instructions(attributes = T.unsafe(nil)); end

  class << self
    def available_configs; end
    def available_configs=(_arg0); end
  end
end

module Devise::Models::DatabaseAuthenticatable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Devise::Models::DatabaseAuthenticatable::ClassMethods

  def initialize(*args, &block); end

  def after_database_authentication; end
  def authenticatable_salt; end
  def clean_up_passwords; end
  def destroy_with_password(current_password); end
  def password=(new_password); end
  def send_email_changed_notification; end
  def send_password_change_notification; end
  def skip_email_changed_notification!; end
  def skip_password_change_notification!; end
  def update_with_password(params, *options); end
  def update_without_password(params, *options); end
  def valid_password?(password); end

  protected

  def password_digest(password); end
  def send_email_changed_notification?; end
  def send_password_change_notification?; end

  class << self
    def required_fields(klass); end
  end
end

module Devise::Models::DatabaseAuthenticatable::ClassMethods
  def find_for_database_authentication(conditions); end
  def pepper; end
  def pepper=(value); end
  def send_email_changed_notification; end
  def send_email_changed_notification=(value); end
  def send_password_change_notification; end
  def send_password_change_notification=(value); end
  def stretches; end
  def stretches=(value); end

  class << self
    def available_configs; end
    def available_configs=(_arg0); end
  end
end

module Devise::Models::Lockable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Devise::Models::Lockable::ClassMethods

  def access_locked?; end
  def active_for_authentication?; end
  def inactive_message; end
  def increment_failed_attempts; end
  def lock_access!(opts = T.unsafe(nil)); end
  def lock_strategy_enabled?(*_arg0, &_arg1); end
  def resend_unlock_instructions; end
  def reset_failed_attempts!; end
  def send_unlock_instructions; end
  def unauthenticated_message; end
  def unlock_access!; end
  def unlock_strategy_enabled?(*_arg0, &_arg1); end
  def valid_for_authentication?; end

  protected

  def attempts_exceeded?; end
  def if_access_locked; end
  def last_attempt?; end
  def lock_expired?; end

  class << self
    def required_fields(klass); end
  end
end

module Devise::Models::Lockable::ClassMethods
  def last_attempt_warning; end
  def last_attempt_warning=(value); end
  def lock_strategy; end
  def lock_strategy=(value); end
  def lock_strategy_enabled?(strategy); end
  def maximum_attempts; end
  def maximum_attempts=(value); end
  def send_unlock_instructions(attributes = T.unsafe(nil)); end
  def unlock_access_by_token(unlock_token); end
  def unlock_in; end
  def unlock_in=(value); end
  def unlock_keys; end
  def unlock_keys=(value); end
  def unlock_strategy; end
  def unlock_strategy=(value); end
  def unlock_strategy_enabled?(strategy); end

  class << self
    def available_configs; end
    def available_configs=(_arg0); end
  end
end

Devise::Models::Lockable::ClassMethods::BOTH_STRATEGIES = T.let(T.unsafe(nil), Array)

class Devise::Models::MissingAttribute < ::StandardError
  def initialize(attributes); end

  def message; end
end

module Devise::Models::Recoverable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Devise::Models::Recoverable::ClassMethods

  def reset_password(new_password, new_password_confirmation); end
  def reset_password_period_valid?; end
  def send_reset_password_instructions; end

  protected

  def clear_reset_password_token; end
  def clear_reset_password_token?; end
  def send_reset_password_instructions_notification(token); end
  def set_reset_password_token; end

  class << self
    def required_fields(klass); end
  end
end

module Devise::Models::Recoverable::ClassMethods
  def reset_password_by_token(attributes = T.unsafe(nil)); end
  def reset_password_keys; end
  def reset_password_keys=(value); end
  def reset_password_within; end
  def reset_password_within=(value); end
  def send_reset_password_instructions(attributes = T.unsafe(nil)); end
  def sign_in_after_reset_password; end
  def sign_in_after_reset_password=(value); end
  def with_reset_password_token(token); end

  class << self
    def available_configs; end
    def available_configs=(_arg0); end
  end
end

module Devise::Models::Registerable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Devise::Models::Registerable::ClassMethods

  class << self
    def required_fields(klass); end
  end
end

module Devise::Models::Registerable::ClassMethods
  def new_with_session(params, session); end
  def sign_in_after_change_password; end
  def sign_in_after_change_password=(value); end

  class << self
    def available_configs; end
    def available_configs=(_arg0); end
  end
end

module Devise::Models::Rememberable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Devise::Models::Rememberable::ClassMethods

  def after_remembered; end
  def extend_remember_period; end
  def forget_me!; end
  def remember_expires_at; end
  def remember_me; end
  def remember_me!; end
  def remember_me=(_arg0); end
  def remember_me?(token, generated_at); end
  def rememberable_options; end
  def rememberable_value; end

  private

  def time_from_json(value); end

  class << self
    def required_fields(klass); end
  end
end

module Devise::Models::Rememberable::ClassMethods
  def expire_all_remember_me_on_sign_out; end
  def expire_all_remember_me_on_sign_out=(value); end
  def extend_remember_period; end
  def extend_remember_period=(value); end
  def remember_for; end
  def remember_for=(value); end
  def remember_token; end
  def rememberable_options; end
  def rememberable_options=(value); end
  def serialize_from_cookie(*args); end
  def serialize_into_cookie(record); end

  class << self
    def available_configs; end
    def available_configs=(_arg0); end
  end
end

module Devise::Models::Timeoutable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Devise::Models::Timeoutable::ClassMethods

  def timedout?(last_access); end
  def timeout_in; end

  class << self
    def required_fields(klass); end
  end
end

module Devise::Models::Timeoutable::ClassMethods
  def timeout_in; end
  def timeout_in=(value); end

  class << self
    def available_configs; end
    def available_configs=(_arg0); end
  end
end

module Devise::Models::Trackable
  def update_tracked_fields(request); end
  def update_tracked_fields!(request); end

  protected

  def extract_ip_from(request); end

  class << self
    def required_fields(klass); end
  end
end

module Devise::Models::Validatable
  protected

  def email_required?; end
  def password_required?; end

  class << self
    def assert_validations_api!(base); end
    def included(base); end
    def required_fields(klass); end
  end
end

module Devise::Models::Validatable::ClassMethods
  def email_regexp; end
  def email_regexp=(value); end
  def password_length; end
  def password_length=(value); end

  class << self
    def available_configs; end
    def available_configs=(_arg0); end
  end
end

Devise::Models::Validatable::VALIDATIONS = T.let(T.unsafe(nil), Array)
Devise::NO_INPUT = T.let(T.unsafe(nil), Array)

class Devise::OmniauthCallbacksController < ::DeviseController
  def failure; end
  def passthru; end

  protected

  def after_omniauth_failure_path_for(scope); end
  def failed_strategy; end
  def failure_message; end
  def translation_scope; end

  private

  def _layout(lookup_context, formats); end

  class << self
    def __callbacks; end
    def middleware_stack; end
  end
end

class Devise::ParameterFilter
  def initialize(case_insensitive_keys, strip_whitespace_keys); end

  def filter(conditions); end
  def filtered_hash_by_method_for_given_keys(conditions, method, condition_keys); end
  def stringify_params(conditions); end

  private

  def param_requires_string_conversion?(value); end
end

class Devise::ParameterSanitizer
  def initialize(resource_class, resource_name, params); end

  def permit(action, keys: T.unsafe(nil), except: T.unsafe(nil), &block); end
  def sanitize(action); end

  private

  def cast_to_hash(params); end
  def default_params; end
  def empty_params; end
  def extract_auth_keys(klass); end
  def hashable_resource_params?; end
  def permit_keys(parameters, keys); end
  def unknown_action!(action); end
end

Devise::ParameterSanitizer::DEFAULT_PERMITTED_ATTRIBUTES = T.let(T.unsafe(nil), Hash)

class Devise::PasswordsController < ::DeviseController
  def create; end
  def edit; end
  def new; end
  def update; end

  protected

  def after_resetting_password_path_for(resource); end
  def after_sending_reset_password_instructions_path_for(resource_name); end
  def assert_reset_token_passed; end
  def translation_scope; end
  def unlockable?(resource); end

  private

  def _layout(lookup_context, formats); end

  class << self
    def __callbacks; end
    def middleware_stack; end
  end
end

Devise::ROUTES = T.let(T.unsafe(nil), Hash)

class Devise::RegistrationsController < ::DeviseController
  def cancel; end
  def create; end
  def destroy; end
  def edit; end
  def new; end
  def update; end

  protected

  def account_update_params; end
  def after_inactive_sign_up_path_for(resource); end
  def after_sign_up_path_for(resource); end
  def after_update_path_for(resource); end
  def authenticate_scope!; end
  def build_resource(hash = T.unsafe(nil)); end
  def sign_up(resource_name, resource); end
  def sign_up_params; end
  def translation_scope; end
  def update_needs_confirmation?(resource, previous); end
  def update_resource(resource, params); end

  private

  def _layout(lookup_context, formats); end
  def set_flash_message_for_update(resource, prev_unconfirmed_email); end
  def sign_in_after_change_password?; end

  class << self
    def __callbacks; end
    def middleware_stack; end
  end
end

module Devise::RouteSet
  def finalize!; end
end

Devise::STRATEGIES = T.let(T.unsafe(nil), Hash)

class Devise::SecretKeyFinder
  def initialize(application); end

  def find; end

  private

  def key_exists?(object); end
end

class Devise::SessionsController < ::DeviseController
  def create; end
  def destroy; end
  def new; end

  protected

  def auth_options; end
  def serialize_options(resource); end
  def sign_in_params; end
  def translation_scope; end

  private

  def _layout(lookup_context, formats); end
  def all_signed_out?; end
  def respond_to_on_destroy; end
  def verify_signed_out_user; end

  class << self
    def __callbacks; end
    def middleware_stack; end
  end
end

module Devise::Strategies; end

class Devise::Strategies::Authenticatable < ::Devise::Strategies::Base
  def authentication_hash; end
  def authentication_hash=(_arg0); end
  def authentication_type; end
  def authentication_type=(_arg0); end
  def clean_up_csrf?; end
  def password; end
  def password=(_arg0); end
  def store?; end
  def valid?; end

  private

  def authenticatable_name; end
  def authentication_keys; end
  def decode_credentials; end
  def http_auth_hash; end
  def http_authenticatable?; end
  def http_authentication_key; end
  def params_auth_hash; end
  def params_authenticatable?; end
  def parse_authentication_key_values(hash, keys); end
  def remember_me(resource); end
  def remember_me?; end
  def request_keys; end
  def request_values; end
  def valid_for_http_auth?; end
  def valid_for_params_auth?; end
  def valid_params?; end
  def valid_params_request?; end
  def valid_password?; end
  def validate(resource, &block); end
  def with_authentication_hash(auth_type, auth_values); end
end

class Devise::Strategies::Base < ::Warden::Strategies::Base
  def mapping; end
  def store?; end
end

class Devise::Strategies::DatabaseAuthenticatable < ::Devise::Strategies::Authenticatable
  def authenticate!; end
end

class Devise::Strategies::Rememberable < ::Devise::Strategies::Authenticatable
  def authenticate!; end
  def clean_up_csrf?; end
  def valid?; end

  private

  def extend_remember_me?(resource); end
  def remember_cookie; end
  def remember_key; end
  def remember_me?; end
end

Devise::TRUE_VALUES = T.let(T.unsafe(nil), Array)
module Devise::Test; end

module Devise::Test::ControllerHelpers
  extend ::ActiveSupport::Concern

  def process(*_arg0); end
  def setup_controller_for_warden; end
  def sign_in(resource, deprecated = T.unsafe(nil), scope: T.unsafe(nil)); end
  def sign_out(resource_or_scope); end
  def warden; end

  protected

  def _catch_warden(&block); end
  def _process_unauthenticated(env, options = T.unsafe(nil)); end
end

module Devise::Test::IntegrationHelpers
  include ::Warden::Test::Helpers

  def sign_in(resource, scope: T.unsafe(nil)); end
  def sign_out(resource_or_scope); end

  protected

  def setup_integration_for_devise; end
  def teardown_integration_for_devise; end

  class << self
    def included(base); end
  end
end

module Devise::TestHelpers
  include ::Devise::Test::ControllerHelpers

  class << self
    def included(base); end
  end
end

class Devise::TimeInflector
  include ::ActionView::Helpers::DateHelper

  class << self
    def instance; end
    def time_ago_in_words(*_arg0, &_arg1); end
  end
end

class Devise::TokenGenerator
  def initialize(key_generator, digest = T.unsafe(nil)); end

  def digest(klass, column, value); end
  def generate(klass, column); end

  private

  def key_for(column); end
end

Devise::URL_HELPERS = T.let(T.unsafe(nil), Hash)

class Devise::UnlocksController < ::DeviseController
  def create; end
  def new; end
  def show; end

  protected

  def after_sending_unlock_instructions_path_for(resource); end
  def after_unlock_path_for(resource); end
  def translation_scope; end

  private

  def _layout(lookup_context, formats); end

  class << self
    def __callbacks; end
    def middleware_stack; end
  end
end

class DeviseController < ::ApplicationController
  include ::Devise::Controllers::ScopedViews
  extend ::Devise::Controllers::ScopedViews::ClassMethods

  def _prefixes; end

  protected

  def assert_is_devise_resource!; end
  def clean_up_passwords(object); end
  def devise_i18n_options(options); end
  def devise_mapping; end
  def find_message(kind, options = T.unsafe(nil)); end
  def navigational_formats; end
  def require_no_authentication; end
  def resource; end
  def resource=(new_resource); end
  def resource_class; end
  def resource_name; end
  def resource_params; end
  def respond_with_navigational(*args, &block); end
  def scope_name; end
  def set_flash_message(key, kind, options = T.unsafe(nil)); end
  def set_flash_message!(key, kind, options = T.unsafe(nil)); end
  def set_minimum_password_length; end
  def signed_in_resource; end
  def successfully_sent?(resource); end
  def translation_scope; end
  def unknown_action!(msg); end

  private

  def _layout(lookup_context, formats); end

  class << self
    def __callbacks; end
    def _helper_methods; end
    def middleware_stack; end
    def mimes_for_respond_to; end
  end
end

module DeviseController::HelperMethods
  include ::ActionController::Base::HelperMethods
  include ::Pundit::Helper
  include ::ApplicationController::HelperMethods
  include ::DeviseHelper

  def devise_mapping(*args, &block); end
  def resource(*args, &block); end
  def resource_class(*args, &block); end
  def resource_name(*args, &block); end
  def resource_params(*args, &block); end
  def scope_name(*args, &block); end
  def signed_in_resource(*args, &block); end
end

module DeviseHelper
  def devise_error_messages!; end
end

module Warden::Mixins; end

module Warden::Mixins::Common
  def cookies; end
  def params; end
  def raw_session; end
  def request; end
  def reset_session!; end
  def session; end
  def warden_cookies; end
end
