# typed: strict

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `orm_adapter` gem.
# Please instead update this file by running `bin/tapioca gem orm_adapter`.

module OrmAdapter
  class << self
    # A collection of registered adapters
    def adapters; end
  end
end

class OrmAdapter::ActiveRecord < ::OrmAdapter::Base
  # Return list of column/property names
  def column_names; end

  # @see OrmAdapter::Base#create!
  def create!(attributes = T.unsafe(nil)); end

  # @see OrmAdapter::Base#destroy
  def destroy(object); end

  # @see OrmAdapter::Base#find_all
  def find_all(options = T.unsafe(nil)); end

  # @see OrmAdapter::Base#find_first
  def find_first(options = T.unsafe(nil)); end

  # @see OrmAdapter::Base#get
  def get(id); end

  # @see OrmAdapter::Base#get!
  def get!(id); end

  protected

  # Introspects the klass to convert and objects in conditions into foreign key and type fields
  def conditions_to_fields(conditions); end

  def construct_relation(relation, options); end
  def order_clause(order); end
end

class OrmAdapter::Base
  # @return [Base] a new instance of Base
  def initialize(klass); end

  # Get a list of column/property/field names
  #
  # @raise [NotSupportedError]
  def column_names; end

  # Create a model using attributes
  #
  # @raise [NotSupportedError]
  def create!(attributes = T.unsafe(nil)); end

  # Destroy an instance by passing in the instance itself.
  #
  # @raise [NotSupportedError]
  def destroy(object); end

  # Find all models, optionally matching conditions, and specifying order
  #
  # @raise [NotSupportedError]
  # @see OrmAdapter::Base#find_first for how to specify order and conditions
  def find_all(options = T.unsafe(nil)); end

  # Find the first instance, optionally matching conditions, and specifying order
  #
  # You can call with just conditions, providing a hash
  #
  #   User.to_adapter.find_first :name => "Fred", :age => 23
  #
  # Or you can specify :order, and :conditions as keys
  #
  #   User.to_adapter.find_first :conditions => {:name => "Fred", :age => 23}
  #   User.to_adapter.find_first :order => [:age, :desc]
  #   User.to_adapter.find_first :order => :name, :conditions => {:age => 18}
  #
  # When specifying :order, it may be
  # * a single arg e.g. <tt>:order => :name</tt>
  # * a single pair with :asc, or :desc as last, e.g. <tt>:order => [:name, :desc]</tt>
  # * an array of single args or pairs (with :asc or :desc as last), e.g. <tt>:order => [[:name, :asc], [:age, :desc]]</tt>
  #
  # @raise [NotSupportedError]
  def find_first(options = T.unsafe(nil)); end

  # Get an instance by id of the model. Returns nil if a model is not found.
  # This should comply with ActiveModel#to_key API, i.e.:
  #
  #   User.to_adapter.get(@user.to_key) == @user
  #
  # @raise [NotSupportedError]
  def get(id); end

  # Get an instance by id of the model. Raises an error if a model is not found.
  # This should comply with ActiveModel#to_key API, i.e.:
  #
  #   User.to_adapter.get!(@user.to_key) == @user
  #
  # @raise [NotSupportedError]
  def get!(id); end

  # Returns the value of attribute klass.
  def klass; end

  protected

  # given an options hash,
  # with optional :conditions, :order, :limit and :offset keys,
  # returns conditions, normalized order, limit and offset
  def extract_conditions!(options = T.unsafe(nil)); end

  # given an order argument, returns an array of pairs, with each pair containing the attribute, and :asc or :desc
  def normalize_order(order); end

  # @return [Boolean]
  def valid_object?(object); end

  def wrap_key(key); end

  class << self
    # Your ORM adapter needs to inherit from this Base class and its adapter
    # will be registered. To create an adapter you should create an inner
    # constant "OrmAdapter" e.g. ActiveRecord::Base::OrmAdapter
    #
    # @see orm_adapters/active_record
    # @see orm_adapters/datamapper
    # @see orm_adapters/mongoid
    def inherited(adapter); end
  end
end

class OrmAdapter::NotSupportedError < ::NotImplementedError
  def to_s; end
end

# Extend into a class that has an OrmAdapter
module OrmAdapter::ToAdapter
  def to_adapter; end
end

OrmAdapter::VERSION = T.let(T.unsafe(nil), String)
