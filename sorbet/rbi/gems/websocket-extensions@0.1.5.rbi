# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `websocket-extensions` gem.
# Please instead update this file by running `bin/tapioca gem websocket-extensions`.

# WebSocket protocol implementation in Ruby
# This module does not provide a WebSocket server or client, but is made for using
# in http servers or clients to provide WebSocket support.
#
# @author Bernard "Imanel" Potocki
# @see http://github.com/imanel/websocket-ruby main repository
module WebSocket
  class << self
    # Limit of frame size payload in bytes
    def max_frame_size; end

    # Set limit of frame size payload in bytes
    def max_frame_size=(val); end

    # If set to true error will be raised instead of setting `error` method.
    # All errors inherit from WebSocket::Error.
    def should_raise; end

    # Should protocol errors raise ruby errors? If false then `error` flag is set instead.
    def should_raise=(val); end
  end
end

# Default WebSocket version to use
WebSocket::DEFAULT_VERSION = T.let(T.unsafe(nil), Integer)

class WebSocket::Extensions
  # @return [Extensions] a new instance of Extensions
  def initialize; end

  def activate(header); end
  def add(ext); end
  def close; end
  def generate_offer; end
  def generate_response(header); end
  def process_incoming_message(message); end
  def process_outgoing_message(message); end
  def valid_frame_rsv(frame); end
  def valid_frame_rsv?(frame); end

  private

  def reserve(ext); end

  # @return [Boolean]
  def reserved?(ext); end
end

class WebSocket::Extensions::ExtensionError < ::ArgumentError; end
WebSocket::Extensions::MESSAGE_OPCODES = T.let(T.unsafe(nil), Array)

class WebSocket::Extensions::Offers
  # @return [Offers] a new instance of Offers
  def initialize; end

  def by_name(name); end
  def each_offer(&block); end
  def push(name, params); end
  def to_a; end
end

class WebSocket::Extensions::Parser
  class << self
    def parse_header(header); end
    def serialize_params(name, params); end
  end
end

WebSocket::Extensions::Parser::EXT = T.let(T.unsafe(nil), Regexp)
WebSocket::Extensions::Parser::EXT_LIST = T.let(T.unsafe(nil), Regexp)
WebSocket::Extensions::Parser::NOTOKEN = T.let(T.unsafe(nil), Regexp)
WebSocket::Extensions::Parser::NUMBER = T.let(T.unsafe(nil), Regexp)
WebSocket::Extensions::Parser::PARAM = T.let(T.unsafe(nil), Regexp)
class WebSocket::Extensions::Parser::ParseError < ::ArgumentError; end
WebSocket::Extensions::Parser::QUOTED = T.let(T.unsafe(nil), Regexp)
WebSocket::Extensions::Parser::TOKEN = T.let(T.unsafe(nil), Regexp)

module WebSocket::Mask
  class << self
    def mask(_arg0, _arg1); end
  end
end

WebSocket::ROOT = T.let(T.unsafe(nil), String)
