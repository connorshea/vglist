# typed: strict

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `invisible_captcha` gem.
# Please instead update this file by running `bin/tapioca gem invisible_captcha`.

module InvisibleCaptcha
  class << self
    def css_strategy; end
    def encode(value); end
    def generate_random_honeypot; end
    def get_honeypot; end

    # Returns the value of attribute honeypots.
    def honeypots; end

    # Sets the attribute honeypots
    #
    # @param value the value to set the attribute honeypots to.
    def honeypots=(_arg0); end

    def init!; end

    # Returns the value of attribute injectable_styles.
    def injectable_styles; end

    # Sets the attribute injectable_styles
    #
    # @param value the value to set the attribute injectable_styles to.
    def injectable_styles=(_arg0); end

    # Returns the value of attribute secret.
    def secret; end

    # Sets the attribute secret
    #
    # @param value the value to set the attribute secret to.
    def secret=(_arg0); end

    def sentence_for_humans; end

    # Sets the attribute sentence_for_humans
    #
    # @param value the value to set the attribute sentence_for_humans to.
    def sentence_for_humans=(_arg0); end

    # @yield [_self]
    # @yieldparam _self [InvisibleCaptcha] the object that the method was called on
    def setup; end

    # Returns the value of attribute spinner_enabled.
    def spinner_enabled; end

    # Sets the attribute spinner_enabled
    #
    # @param value the value to set the attribute spinner_enabled to.
    def spinner_enabled=(_arg0); end

    # Returns the value of attribute timestamp_enabled.
    def timestamp_enabled; end

    # Sets the attribute timestamp_enabled
    #
    # @param value the value to set the attribute timestamp_enabled to.
    def timestamp_enabled=(_arg0); end

    def timestamp_error_message; end

    # Sets the attribute timestamp_error_message
    #
    # @param value the value to set the attribute timestamp_error_message to.
    def timestamp_error_message=(_arg0); end

    # Returns the value of attribute timestamp_threshold.
    def timestamp_threshold; end

    # Sets the attribute timestamp_threshold
    #
    # @param value the value to set the attribute timestamp_threshold to.
    def timestamp_threshold=(_arg0); end

    # Returns the value of attribute visual_honeypots.
    def visual_honeypots; end

    # Sets the attribute visual_honeypots
    #
    # @param value the value to set the attribute visual_honeypots to.
    def visual_honeypots=(_arg0); end

    private

    def call_lambda_or_return(obj); end
  end
end

module InvisibleCaptcha::ControllerExt
  private

  def detect_spam(options = T.unsafe(nil)); end

  # @return [Boolean]
  def honeypot_spam?(options = T.unsafe(nil)); end

  def on_spam(options = T.unsafe(nil)); end
  def on_timestamp_spam(options = T.unsafe(nil)); end

  # @return [Boolean]
  def spinner_spam?; end

  # @return [Boolean]
  def timestamp_spam?(options = T.unsafe(nil)); end

  def warn_spam(message); end
end

module InvisibleCaptcha::ControllerExt::ClassMethods
  def invisible_captcha(options = T.unsafe(nil)); end
end

module InvisibleCaptcha::FormHelpers
  def invisible_captcha(honeypot, options = T.unsafe(nil)); end
end

class InvisibleCaptcha::Railtie < ::Rails::Railtie; end
InvisibleCaptcha::VERSION = T.let(T.unsafe(nil), String)

module InvisibleCaptcha::ViewHelpers
  # Builds the honeypot html
  #
  # @param honeypot [Symbol] name of honeypot, ie: subtitle => input name: subtitle
  # @param scope [Symbol] name of honeypot scope, ie: topic => input name: topic[subtitle]
  # @param options [Hash] html_options for input and invisible_captcha options
  # @return [String] the generated html
  def invisible_captcha(honeypot = T.unsafe(nil), scope = T.unsafe(nil), options = T.unsafe(nil)); end

  def invisible_captcha_styles; end

  private

  def build_input_name(honeypot, scope = T.unsafe(nil)); end
  def build_invisible_captcha(honeypot = T.unsafe(nil), scope = T.unsafe(nil), options = T.unsafe(nil)); end
  def build_label_name(honeypot, scope = T.unsafe(nil)); end
  def current_request; end
  def default_honeypot_options; end
  def visibility_css(css_class, options); end
end
