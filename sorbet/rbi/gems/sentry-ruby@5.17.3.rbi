# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sentry-ruby` gem.
# Please instead update this file by running `bin/tapioca gem sentry-ruby`.

# @api private
module Rake
  extend ::FileUtils::StreamUtils_
  extend ::FileUtils
end

# @api private
class Rake::Application
  include ::Sentry::Rake::Application

  def initialize; end

  def add_import(fn); end
  def add_loader(ext, loader); end
  def collect_command_line_tasks(args); end
  def default_task_name; end
  def deprecate(old_usage, new_usage, call_site); end
  def display_cause_details(ex); end
  def display_error_message(ex); end
  def display_exception_backtrace(ex); end
  def display_exception_details(ex); end
  def display_exception_details_seen; end
  def display_exception_message_details(ex); end
  def display_prerequisites; end
  def display_tasks_and_comments; end
  def dynamic_width; end
  def dynamic_width_stty; end
  def dynamic_width_tput; end
  def exit_because_of_exception(ex); end
  def find_rakefile_location; end
  def handle_options(argv); end
  def has_cause?(ex); end
  def have_rakefile; end
  def init(app_name = T.unsafe(nil), argv = T.unsafe(nil)); end
  def invoke_task(task_string); end
  def load_imports; end
  def load_rakefile; end
  def name; end
  def options; end
  def original_dir; end
  def parse_task_string(string); end
  def print_rakefile_directory(location); end
  def rake_require(file_name, paths = T.unsafe(nil), loaded = T.unsafe(nil)); end
  def rakefile; end
  def rakefile_location(backtrace = T.unsafe(nil)); end
  def raw_load_rakefile; end
  def run(argv = T.unsafe(nil)); end
  def run_with_threads; end
  def set_default_options; end
  def standard_exception_handling; end
  def standard_rake_options; end
  def system_dir; end
  def terminal_columns; end
  def terminal_columns=(_arg0); end
  def terminal_width; end
  def thread_pool; end
  def top_level; end
  def top_level_tasks; end
  def trace(*strings); end
  def truncate(string, width); end
  def truncate_output?; end
  def tty_output=(_arg0); end
  def tty_output?; end
  def unix?; end
  def windows?; end

  private

  def glob(path, &block); end
  def has_chain?(exception); end
  def load_debug_at_stop_feature; end
  def select_tasks_to_show(options, show_tasks, value); end
  def select_trace_output(options, trace_option, value); end
  def sort_options(options); end
  def standard_system_dir; end
end

# Based on ActionDispatch::RemoteIp. All security-related precautions from that
# middleware have been removed, because the Event IP just needs to be accurate,
# and spoofing an IP here only makes data inaccurate, not insecure. Don't re-use
# this module if you have to *trust* the IP address.
module Sentry
  class << self
    # Takes an instance of Sentry::Breadcrumb and stores it to the current active scope.
    #
    # @return [Breadcrumb, nil]
    def add_breadcrumb(breadcrumb, **options); end

    # Add a global event processor [Proc].
    # These run before scope event processors.
    #
    # @example
    #   Sentry.add_global_event_processor do |event, hint|
    #   event.tags = { foo: 42 }
    #   event
    #   end
    # @return [void]
    # @yieldparam event [Event]
    # @yieldparam hint [Hash, nil]
    def add_global_event_processor(&block); end

    def apply_patches(config); end

    # @return [BackgroundWorker]
    def background_worker; end

    # Sets the attribute background_worker
    #
    # @param value the value to set the attribute background_worker to.
    def background_worker=(_arg0); end

    # Returns the value of attribute backpressure_monitor.
    def backpressure_monitor; end

    # Captures a check-in and sends it to Sentry via the currently active hub.
    #
    # @option options
    # @option options
    # @option options
    # @param slug [String] identifier of this monitor
    # @param status [Symbol] status of this check-in, one of {CheckInEvent::VALID_STATUSES}
    # @param options [Hash] extra check-in options
    # @return [String, nil] The {CheckInEvent#check_in_id} to use for later updates on the same slug
    def capture_check_in(slug, status, **options); end

    # Takes an instance of Sentry::Event and dispatches it to the currently active hub.
    #
    # @return [Event, nil]
    def capture_event(event); end

    # Takes an exception and reports it to Sentry via the currently active hub.
    #
    # @return [Event, nil]
    # @yieldparam scope [Scope]
    def capture_exception(exception, **options, &block); end

    # Takes a message string and reports it to Sentry via the currently active hub.
    #
    # @return [Event, nil]
    # @yieldparam scope [Scope]
    def capture_message(message, **options, &block); end

    # Clones the main thread's active hub and stores it to the current thread.
    #
    # @return [void]
    def clone_hub_to_current_thread; end

    # Flushes pending events and cleans up SDK state.
    # SDK will stop sending events and all top-level APIs will be no-ops after this.
    #
    # @return [void]
    def close; end

    def configuration; end

    # Takes a block and yields the current active scope.
    #
    # @example
    #   Sentry.configure_scope do |scope|
    #   scope.set_tags(foo: "bar")
    #   end
    #
    #   Sentry.capture_message("test message") # this event will have tags { foo: "bar" }
    # @return [void]
    # @yieldparam scope [Scope]
    def configure_scope(&block); end

    # Continue an incoming trace from a rack env like hash.
    #
    # @param env [Hash]
    # @return [Transaction, nil]
    def continue_trace(env, **options); end

    # Returns an uri for security policy reporting that's generated from the given DSN
    # (To learn more about security policy reporting: https://docs.sentry.io/product/security-policy-reporting/)
    #
    # It returns nil if
    # - The SDK is not initialized yet.
    # - The DSN is not provided or is invalid.
    #
    # @return [String, nil]
    def csp_report_uri; end

    # Checks if the exception object has been captured by the SDK.
    #
    # @return [Boolean]
    def exception_captured?(exc); end

    def exception_locals_tp; end

    # Returns the baggage header for distributed tracing.
    # Can be either from the currently active span or the propagation context.
    #
    # @return [String, nil]
    def get_baggage; end

    # Returns the current active client.
    #
    # @return [Client, nil]
    def get_current_client; end

    # Returns the current active hub.
    # If the current thread doesn't have an active hub, it will clone the main thread's active hub,
    # stores it in the current thread, and then returns it.
    #
    # @return [Hub]
    def get_current_hub; end

    # Returns the current active scope.
    #
    # @return [Scope, nil]
    def get_current_scope; end

    # Returns the main thread's active hub.
    #
    # @return [Hub]
    def get_main_hub; end

    # Returns the a Hash containing sentry-trace and baggage.
    # Can be either from the currently active span or the propagation context.
    #
    # @return [Hash, nil]
    def get_trace_propagation_headers; end

    # Returns the traceparent (sentry-trace) header for distributed tracing.
    # Can be either from the currently active span or the propagation context.
    #
    # @return [String, nil]
    def get_traceparent; end

    # Initializes the SDK with given configuration.
    #
    # @return [void]
    # @yieldparam config [Configuration]
    def init(&block); end

    # Returns true if the SDK is initialized.
    #
    # @return [Boolean]
    def initialized?; end

    # Returns a hash that contains all the integrations that have been registered to the main SDK.
    #
    # @return [Hash{String=>Hash}]
    def integrations; end

    # Returns the id of the lastly reported Sentry::Event.
    #
    # @return [String, nil]
    def last_event_id; end

    def logger; end

    # Returns the value of attribute metrics_aggregator.
    def metrics_aggregator; end

    def railtie_helpers_paths; end
    def railtie_namespace; end
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end

    # Registers the SDK integration with its name and version.
    #
    # @param name [String] name of the integration
    # @param version [String] version of the integration
    def register_integration(name, version); end

    def register_patch(key, patch = T.unsafe(nil), target = T.unsafe(nil), &block); end
    def registered_patches; end
    def sdk_meta; end
    def send_event(*args); end

    # Returns the value of attribute session_flusher.
    def session_flusher; end

    def set_context(*args); end
    def set_extras(*args); end
    def set_tags(*args); end
    def set_user(*args); end

    # Takes or initializes a new Sentry::Transaction and makes a sampling decision for it.
    #
    # @return [Transaction, nil]
    def start_transaction(**options); end

    def sys_command(command); end
    def table_name_prefix; end
    def use_relative_model_naming?; end
    def utc_now; end

    # Records the block's execution as a child of the current span.
    # If the current scope doesn't have a span, the block would still be executed but the yield param will be nil.
    #
    # @example
    #   Sentry.with_child_span(op: "my operation") do |child_span|
    #   child_span.set_data(operation_data)
    #   child_span.set_description(operation_detail)
    #   # result will be returned
    #   end
    # @param attributes [Hash] attributes for the child span.
    # @return yield result
    # @yieldparam child_span [Span, nil]
    def with_child_span(**attributes, &block); end

    # Takes a block and evaluates it. If the block raised an exception, it reports the exception to Sentry and re-raises it.
    # If the block ran without exception, it returns the evaluation result.
    #
    # @example
    #   Sentry.with_exception_captured do
    #   1/1 #=> 1 will be returned
    #   end
    #
    #   Sentry.with_exception_captured do
    #   1/0 #=> ZeroDivisionError will be reported and re-raised
    #   end
    def with_exception_captured(**options, &block); end

    # Takes a block and yields a temporary scope.
    # The temporary scope will inherit all the attributes from the current active scope and replace it to be the active
    # scope inside the block.
    #
    # @example
    #   Sentry.configure_scope do |scope|
    #   scope.set_tags(foo: "bar")
    #   end
    #
    #   Sentry.capture_message("test message") # this event will have tags { foo: "bar" }
    #
    #   Sentry.with_scope do |temp_scope|
    #   temp_scope.set_tags(foo: "baz")
    #   Sentry.capture_message("test message 2") # this event will have tags { foo: "baz" }
    #   end
    #
    #   Sentry.capture_message("test message 3") # this event will have tags { foo: "bar" }
    # @return [void]
    # @yieldparam scope [Scope]
    def with_scope(&block); end

    # Wrap a given block with session tracking.
    # Aggregate sessions in minutely buckets will be recorded
    # around this block and flushed every minute.
    #
    # @example
    #   Sentry.with_session_tracking do
    #   a = 1 + 1 # new session recorded with :exited status
    #   end
    #
    #   Sentry.with_session_tracking do
    #   1 / 0
    #   rescue => e
    #   Sentry.capture_exception(e) # new session recorded with :errored status
    #   end
    # @return [void]
    def with_session_tracking(&block); end
  end
end

module Sentry::ArgumentCheckingHelper
  private

  def check_argument_includes!(argument, values); end
  def check_argument_type!(argument, *expected_types); end
  def check_callable!(name, value); end
end

Sentry::BAGGAGE_HEADER_NAME = T.let(T.unsafe(nil), String)

class Sentry::BackgroundWorker
  include ::Sentry::LoggingHelper

  # @return [BackgroundWorker] a new instance of BackgroundWorker
  def initialize(configuration); end

  # @return [Boolean]
  def full?; end

  # @deprecated Use Sentry.logger to retrieve the current logger instead.
  def logger; end

  # Returns the value of attribute max_queue.
  def max_queue; end

  # Returns the value of attribute number_of_threads.
  def number_of_threads; end

  # if you want to monkey-patch this method, please override `_perform` instead
  def perform(&block); end

  def shutdown; end

  # Returns the value of attribute shutdown_timeout.
  def shutdown_timeout; end

  # Sets the attribute shutdown_timeout
  #
  # @param value the value to set the attribute shutdown_timeout to.
  def shutdown_timeout=(_arg0); end

  private

  def _perform(&block); end
end

Sentry::BackgroundWorker::DEFAULT_MAX_QUEUE = T.let(T.unsafe(nil), Integer)

class Sentry::BackpressureMonitor
  include ::Sentry::LoggingHelper

  # @return [BackpressureMonitor] a new instance of BackpressureMonitor
  def initialize(configuration, client, interval: T.unsafe(nil)); end

  def check_health; end
  def downsample_factor; end

  # @return [Boolean]
  def healthy?; end

  def kill; end
  def run; end
  def set_downsample_factor; end

  private

  def ensure_thread; end
end

Sentry::BackpressureMonitor::DEFAULT_INTERVAL = T.let(T.unsafe(nil), Integer)
Sentry::BackpressureMonitor::MAX_DOWNSAMPLE_FACTOR = T.let(T.unsafe(nil), Integer)

# @api private
class Sentry::Backtrace
  # @api private
  # @return [Backtrace] a new instance of Backtrace
  def initialize(lines); end

  # @api private
  def ==(other); end

  # @api private
  def inspect; end

  # holder for an Array of Backtrace::Line instances
  #
  # @api private
  def lines; end

  # @api private
  def to_s; end

  class << self
    # @api private
    def parse(backtrace, project_root, app_dirs_pattern, &backtrace_cleanup_callback); end
  end
end

# @api private
Sentry::Backtrace::APP_DIRS_PATTERN = T.let(T.unsafe(nil), Regexp)

# Handles backtrace parsing line by line
#
# @api private
class Sentry::Backtrace::Line
  # @api private
  # @return [Line] a new instance of Line
  def initialize(file, number, method, module_name, in_app_pattern); end

  # @api private
  def ==(other); end

  # The file portion of the line (such as app/models/user.rb)
  #
  # @api private
  def file; end

  # @api private
  def in_app; end

  # @api private
  def in_app_pattern; end

  # @api private
  def inspect; end

  # The method of the line (such as index)
  #
  # @api private
  def method; end

  # The module name (JRuby)
  #
  # @api private
  def module_name; end

  # The line number portion of the line
  #
  # @api private
  def number; end

  # Reconstructs the line in a readable fashion
  #
  # @api private
  def to_s; end

  class << self
    # Parses a single line of a given backtrace
    #
    # @api private
    # @param unparsed_line [String] The raw line from +caller+ or some backtrace
    # @return [Line] The parsed backtrace line
    def parse(unparsed_line, in_app_pattern = T.unsafe(nil)); end
  end
end

# org.jruby.runtime.callsite.CachingCallSite.call(CachingCallSite.java:170)
#
# @api private
Sentry::Backtrace::Line::JAVA_INPUT_FORMAT = T.let(T.unsafe(nil), Regexp)

# @api private
Sentry::Backtrace::Line::RB_EXTENSION = T.let(T.unsafe(nil), String)

# regexp (optional leading X: on windows, or JRuby9000 class-prefix)
#
# @api private
Sentry::Backtrace::Line::RUBY_INPUT_FORMAT = T.let(T.unsafe(nil), Regexp)

# A {https://www.w3.org/TR/baggage W3C Baggage Header} implementation.
class Sentry::Baggage
  # @return [Baggage] a new instance of Baggage
  def initialize(items, mutable: T.unsafe(nil)); end

  # A {https://develop.sentry.dev/sdk/performance/dynamic-sampling-context/#envelope-header Dynamic Sampling Context}
  # hash to be used in the trace envelope header.
  #
  # @return [Hash]
  def dynamic_sampling_context; end

  # Make the Baggage immutable.
  #
  # @return [void]
  def freeze!; end

  # @return [Hash]
  def items; end

  # @return [Boolean]
  def mutable; end

  # Serialize the Baggage object back to a string.
  #
  # @return [String]
  def serialize; end

  class << self
    # Creates a Baggage object from an incoming W3C Baggage header string.
    #
    # Sentry items are identified with the 'sentry-' prefix and stored in a hash.
    # The presence of a Sentry item makes the baggage object immutable.
    #
    # @param header [String] The incoming Baggage header string.
    # @return [Baggage, nil]
    def from_incoming_header(header); end
  end
end

Sentry::Baggage::SENTRY_PREFIX = T.let(T.unsafe(nil), String)
Sentry::Baggage::SENTRY_PREFIX_REGEX = T.let(T.unsafe(nil), Regexp)

class Sentry::Breadcrumb
  # @param category [String, nil]
  # @param data [Hash, nil]
  # @param message [String, nil]
  # @param timestamp [Time, Integer, nil]
  # @param level [String, nil]
  # @param type [String, nil]
  # @return [Breadcrumb] a new instance of Breadcrumb
  def initialize(category: T.unsafe(nil), data: T.unsafe(nil), message: T.unsafe(nil), timestamp: T.unsafe(nil), level: T.unsafe(nil), type: T.unsafe(nil)); end

  # @return [String, nil]
  def category; end

  # @return [String, nil]
  def category=(_arg0); end

  # @return [Hash, nil]
  def data; end

  # @return [Hash, nil]
  def data=(_arg0); end

  # @return [String, nil]
  def level; end

  # @param level [String]
  # @return [void]
  def level=(level); end

  # @return [String, nil]
  def message; end

  # @param message [String]
  # @return [void]
  def message=(message); end

  # @return [Time, Integer, nil]
  def timestamp; end

  # @return [Time, Integer, nil]
  def timestamp=(_arg0); end

  # @return [Hash]
  def to_hash; end

  # @return [String, nil]
  def type; end

  # @return [String, nil]
  def type=(_arg0); end

  private

  def serialized_data; end
end

Sentry::Breadcrumb::DATA_SERIALIZATION_ERROR_MESSAGE = T.let(T.unsafe(nil), String)

class Sentry::BreadcrumbBuffer
  include ::Enumerable

  # @param size [Integer, nil] If it's not provided, it'll fallback to DEFAULT_SIZE
  # @return [BreadcrumbBuffer] a new instance of BreadcrumbBuffer
  def initialize(size = T.unsafe(nil)); end

  # @return [Array]
  def buffer; end

  # @return [Array]
  def buffer=(_arg0); end

  # @return [BreadcrumbBuffer]
  def dup; end

  # Iterates through all breadcrumbs.
  #
  # @param block [Proc]
  # @return [Array]
  # @yieldparam crumb [Breadcrumb]
  def each(&block); end

  # @return [Boolean]
  def empty?; end

  # @return [Array]
  def members; end

  # Returns the last breadcrumb stored in the buffer. If the buffer it's empty, it returns nil.
  #
  # @return [Breadcrumb, nil]
  def peek; end

  # @param crumb [Breadcrumb]
  # @return [void]
  # @yield [crumb]
  def record(crumb); end

  # @return [Hash]
  def to_hash; end
end

Sentry::BreadcrumbBuffer::DEFAULT_SIZE = T.let(T.unsafe(nil), Integer)
Sentry::CAPTURED_SIGNATURE = T.let(T.unsafe(nil), Symbol)

class Sentry::CheckInEvent < ::Sentry::Event
  # @return [CheckInEvent] a new instance of CheckInEvent
  def initialize(slug:, status:, duration: T.unsafe(nil), monitor_config: T.unsafe(nil), check_in_id: T.unsafe(nil), **options); end

  # uuid to identify this check-in.
  #
  # @return [String]
  def check_in_id; end

  # uuid to identify this check-in.
  #
  # @return [String]
  def check_in_id=(_arg0); end

  # Duration of this check since it has started in seconds.
  #
  # @return [Integer, nil]
  def duration; end

  # Duration of this check since it has started in seconds.
  #
  # @return [Integer, nil]
  def duration=(_arg0); end

  # Monitor configuration to support upserts.
  #
  # @return [Cron::MonitorConfig, nil]
  def monitor_config; end

  # Monitor configuration to support upserts.
  #
  # @return [Cron::MonitorConfig, nil]
  def monitor_config=(_arg0); end

  # Identifier of the monitor for this check-in.
  #
  # @return [String]
  def monitor_slug; end

  # Identifier of the monitor for this check-in.
  #
  # @return [String]
  def monitor_slug=(_arg0); end

  # Status of this check-in.
  #
  # @return [Symbol]
  def status; end

  # Status of this check-in.
  #
  # @return [Symbol]
  def status=(_arg0); end

  # @return [Hash]
  def to_hash; end
end

Sentry::CheckInEvent::TYPE = T.let(T.unsafe(nil), String)
Sentry::CheckInEvent::VALID_STATUSES = T.let(T.unsafe(nil), Array)

class Sentry::Client
  include ::Sentry::LoggingHelper

  # @param configuration [Configuration]
  # @return [Client] a new instance of Client
  def initialize(configuration); end

  # Capture an envelope directly.
  #
  # @param envelope [Envelope] the envelope to be captured.
  # @return [void]
  def capture_envelope(envelope); end

  # Applies the given scope's data to the event and sends it to Sentry.
  #
  # @param event [Event] the event to be sent.
  # @param scope [Scope] the scope with contextual data that'll be applied to the event before it's sent.
  # @param hint [Hash] the hint data that'll be passed to `before_send` callback and the scope's event processors.
  # @return [Event, nil]
  def capture_event(event, scope, hint = T.unsafe(nil)); end

  # Returns the value of attribute configuration.
  def configuration; end

  # Initializes a CheckInEvent object with the given options.
  #
  # @param slug [String] identifier of this monitor
  # @param status [Symbol] status of this check-in, one of {CheckInEvent::VALID_STATUSES}
  # @param hint [Hash] the hint data that'll be passed to `before_send` callback and the scope's event processors.
  # @param duration [Integer, nil] seconds elapsed since this monitor started
  # @param monitor_config [Cron::MonitorConfig, nil] configuration for this monitor
  # @param check_in_id [String, nil] for updating the status of an existing monitor
  # @return [Event]
  def event_from_check_in(slug, status, hint = T.unsafe(nil), duration: T.unsafe(nil), monitor_config: T.unsafe(nil), check_in_id: T.unsafe(nil)); end

  # Initializes an Event object with the given exception. Returns `nil` if the exception's class is excluded from reporting.
  #
  # @param exception [Exception] the exception to be reported.
  # @param hint [Hash] the hint data that'll be passed to `before_send` callback and the scope's event processors.
  # @return [Event, nil]
  def event_from_exception(exception, hint = T.unsafe(nil)); end

  # Initializes an Event object with the given message.
  #
  # @param message [String] the message to be reported.
  # @param hint [Hash] the hint data that'll be passed to `before_send` callback and the scope's event processors.
  # @return [Event]
  def event_from_message(message, hint = T.unsafe(nil), backtrace: T.unsafe(nil)); end

  # Initializes an Event object with the given Transaction object.
  #
  # @param transaction [Transaction] the transaction to be recorded.
  # @return [TransactionEvent]
  def event_from_transaction(transaction); end

  # Flush pending events to Sentry.
  #
  # @return [void]
  def flush; end

  # Generates a W3C Baggage header for distributed tracing from the given Span.
  # Returns `nil` if `config.propagate_traces` is `false`.
  #
  # @deprecated Use Sentry.get_baggage instead.
  # @param span [Span] the span to generate trace from.
  # @return [String, nil]
  def generate_baggage(span); end

  # Generates a Sentry trace for distribted tracing from the given Span.
  # Returns `nil` if `config.propagate_traces` is `false`.
  #
  # @deprecated use Sentry.get_traceparent instead.
  # @param span [Span] the span to generate trace from.
  # @return [String, nil]
  def generate_sentry_trace(span); end

  # @deprecated Use Sentry.logger to retrieve the current logger instead.
  def logger; end

  # Send an envelope directly to Sentry.
  #
  # @param envelope [Envelope] the envelope to be sent.
  # @return [void]
  def send_envelope(envelope); end

  def send_event(event, hint = T.unsafe(nil)); end

  # The Transport object that'll send events for the client.
  #
  # @return [SpotlightTransport, nil]
  def spotlight_transport; end

  # The Transport object that'll send events for the client.
  #
  # @return [Transport]
  def transport; end

  private

  def dispatch_async_event(async_block, event, hint); end
  def dispatch_background_event(event, hint); end
end

class Sentry::Configuration
  include ::Sentry::CustomInspection
  include ::Sentry::LoggingHelper
  include ::Sentry::ArgumentCheckingHelper

  # @return [Configuration] a new instance of Configuration
  def initialize; end

  # Directories to be recognized as part of your app. e.g. if you
  # have an `engines` dir at the root of your project, you may want
  # to set this to something like /(app|config|engines|lib)/
  #
  # @return [Regexp, nil]
  def app_dirs_pattern; end

  # Directories to be recognized as part of your app. e.g. if you
  # have an `engines` dir at the root of your project, you may want
  # to set this to something like /(app|config|engines|lib)/
  #
  # @return [Regexp, nil]
  def app_dirs_pattern=(_arg0); end

  # Provide an object that responds to `call` to send events asynchronously.
  # E.g.: lambda { |event| Thread.new { Sentry.send_event(event) } }
  #
  # @deprecated It will be removed in the next major release. Please read https://github.com/getsentry/sentry-ruby/issues/1522 for more information
  # @return [Proc, nil]
  def async; end

  def async=(value); end

  # Track sessions in request/response cycles automatically
  #
  # @return [Boolean]
  def auto_session_tracking; end

  # Track sessions in request/response cycles automatically
  #
  # @return [Boolean]
  def auto_session_tracking=(_arg0); end

  # The maximum queue size for the background worker.
  # Jobs will be rejected above this limit.
  #
  # Default is {BackgroundWorker::DEFAULT_MAX_QUEUE}.
  #
  # @return [Integer]
  def background_worker_max_queue; end

  # The maximum queue size for the background worker.
  # Jobs will be rejected above this limit.
  #
  # Default is {BackgroundWorker::DEFAULT_MAX_QUEUE}.
  #
  # @return [Integer]
  def background_worker_max_queue=(_arg0); end

  # to send events in a non-blocking way, sentry-ruby has its own background worker
  # by default, the worker holds a thread pool that has [the number of processors] threads
  # but you can configure it with this configuration option
  # E.g.: config.background_worker_threads = 5
  #
  # if you want to send events synchronously, set the value to 0
  # E.g.: config.background_worker_threads = 0
  #
  # @return [Integer]
  def background_worker_threads; end

  # to send events in a non-blocking way, sentry-ruby has its own background worker
  # by default, the worker holds a thread pool that has [the number of processors] threads
  # but you can configure it with this configuration option
  # E.g.: config.background_worker_threads = 5
  #
  # if you want to send events synchronously, set the value to 0
  # E.g.: config.background_worker_threads = 0
  #
  # @return [Integer]
  def background_worker_threads=(_arg0); end

  # a proc/lambda that takes an array of stack traces
  # it'll be used to silence (reduce) backtrace of the exception
  #
  # @example
  #   config.backtrace_cleanup_callback = lambda do |backtrace|
  #   Rails.backtrace_cleaner.clean(backtrace)
  #   end
  # @return [Proc, nil]
  def backtrace_cleanup_callback; end

  # a proc/lambda that takes an array of stack traces
  # it'll be used to silence (reduce) backtrace of the exception
  #
  # @example
  #   config.backtrace_cleanup_callback = lambda do |backtrace|
  #   Rails.backtrace_cleaner.clean(backtrace)
  #   end
  # @return [Proc, nil]
  def backtrace_cleanup_callback=(_arg0); end

  # Optional Proc, called before adding the breadcrumb to the current scope
  #
  # @example
  #   config.before = lambda do |breadcrumb, hint|
  #   breadcrumb.message = 'a'
  #   breadcrumb
  #   end
  # @return [Proc]
  def before_breadcrumb; end

  def before_breadcrumb=(value); end

  # Optional Proc, called before sending an event to the server
  #
  # @example
  #   config.before_send = lambda do |event, hint|
  #   # skip ZeroDivisionError exceptions
  #   # note: hint[:exception] would be a String if you use async callback
  #   if hint[:exception].is_a?(ZeroDivisionError)
  #   nil
  #   else
  #   event
  #   end
  #   end
  # @return [Proc]
  def before_send; end

  def before_send=(value); end

  # Optional Proc, called before sending an event to the server
  #
  # @example
  #   config.before_send_transaction = lambda do |event, hint|
  #   # skip unimportant transactions or strip sensitive data
  #   if event.transaction == "/healthcheck/route"
  #   nil
  #   else
  #   event
  #   end
  #   end
  # @return [Proc]
  def before_send_transaction; end

  def before_send_transaction=(value); end

  # An array of breadcrumbs loggers to be used. Available options are:
  # - :sentry_logger
  # - :http_logger
  # - :redis_logger
  #
  # And if you also use sentry-rails:
  # - :active_support_logger
  # - :monotonic_active_support_logger
  #
  # @return [Array<Symbol>]
  def breadcrumbs_logger; end

  def breadcrumbs_logger=(logger); end

  # Whether to capture local variables from the raised exception's frame. Default is false.
  #
  # @deprecated Use {#include_local_variables} instead.
  # @return [Boolean]
  def capture_exception_frame_locals; end

  # @deprecated Use {#include_local_variables=} instead.
  def capture_exception_frame_locals=(value); end

  # Number of lines of code context to capture, or nil for none
  #
  # @return [Integer, nil]
  def context_lines; end

  # Number of lines of code context to capture, or nil for none
  #
  # @return [Integer, nil]
  def context_lines=(_arg0); end

  # Cron related configuration.
  #
  # @return [Cron::Configuration]
  def cron; end

  # @return [String, nil]
  def csp_report_uri; end

  # Whether the SDK should run in the debugging mode. Default is false.
  # If set to true, SDK errors will be logged with backtrace
  #
  # @return [Boolean]
  def debug; end

  # Whether the SDK should run in the debugging mode. Default is false.
  # If set to true, SDK errors will be logged with backtrace
  #
  # @return [Boolean]
  def debug=(_arg0); end

  # @api private
  def detect_release; end

  # the dsn value, whether it's set via `config.dsn=` or `ENV["SENTRY_DSN"]`
  #
  # @return [String]
  def dsn; end

  def dsn=(value); end

  # Whether to downsample transactions automatically because of backpressure.
  # Starts a new monitor thread to check health of the SDK every 10 seconds.
  # Default is false
  #
  # @return [Boolean]
  def enable_backpressure_handling; end

  # Whether to downsample transactions automatically because of backpressure.
  # Starts a new monitor thread to check health of the SDK every 10 seconds.
  # Default is false
  #
  # @return [Boolean]
  def enable_backpressure_handling=(_arg0); end

  # Easier way to use performance tracing
  # If set to true, will set traces_sample_rate to 1.0
  #
  # @return [Boolean, nil]
  def enable_tracing; end

  def enable_tracing=(enable_tracing); end

  # Whitelist of enabled_environments that will send notifications to Sentry. Array of Strings.
  #
  # @return [Array<String>]
  def enabled_environments; end

  # Whitelist of enabled_environments that will send notifications to Sentry. Array of Strings.
  #
  # @return [Array<String>]
  def enabled_environments=(_arg0); end

  # @return [Boolean]
  def enabled_in_current_env?; end

  # Array of patches to apply.
  # Default is {DEFAULT_PATCHES}
  #
  # @return [Array<Symbol>]
  def enabled_patches; end

  # Array of patches to apply.
  # Default is {DEFAULT_PATCHES}
  #
  # @return [Array<Symbol>]
  def enabled_patches=(_arg0); end

  # RACK_ENV by default.
  #
  # @return [String]
  def environment; end

  def environment=(environment); end

  # @api private
  def error_messages; end

  # these are not config options
  def errors; end

  # @return [Boolean]
  def exception_class_allowed?(exc); end

  # Logger 'progname's to exclude from breadcrumbs
  #
  # @return [Array<String>]
  def exclude_loggers; end

  # Logger 'progname's to exclude from breadcrumbs
  #
  # @return [Array<String>]
  def exclude_loggers=(_arg0); end

  # Array of exception classes that should never be sent. See IGNORE_DEFAULT.
  # You should probably append to this rather than overwrite it.
  #
  # @return [Array<String>]
  def excluded_exceptions; end

  # Array of exception classes that should never be sent. See IGNORE_DEFAULT.
  # You should probably append to this rather than overwrite it.
  #
  # @return [Array<String>]
  def excluded_exceptions=(_arg0); end

  # these are not config options
  def gem_specs; end

  # Whether to capture local variables from the raised exception's frame. Default is false.
  #
  # @return [Boolean]
  def include_local_variables; end

  # Whether to capture local variables from the raised exception's frame. Default is false.
  #
  # @return [Boolean]
  def include_local_variables=(_arg0); end

  # Boolean to check nested exceptions when deciding if to exclude. Defaults to true
  #
  # @return [Boolean]
  def inspect_exception_causes_for_exclusion; end

  # Boolean to check nested exceptions when deciding if to exclude. Defaults to true
  #
  # @return [Boolean]
  def inspect_exception_causes_for_exclusion=(_arg0); end

  # Boolean to check nested exceptions when deciding if to exclude. Defaults to true
  #
  # @return [Boolean]
  def inspect_exception_causes_for_exclusion?; end

  # The instrumenter to use, :sentry or :otel
  #
  # @return [Symbol]
  def instrumenter; end

  def instrumenter=(instrumenter); end

  # @return [Boolean]
  def is_numeric_or_nil?(value); end

  # You may provide your own LineCache for matching paths with source files.
  # This may be useful if you need to get source code from places other than the disk.
  #
  # @return [LineCache]
  # @see LineCache
  def linecache; end

  # You may provide your own LineCache for matching paths with source files.
  # This may be useful if you need to get source code from places other than the disk.
  #
  # @return [LineCache]
  # @see LineCache
  def linecache=(_arg0); end

  # Logger used by Sentry. In Rails, this is the Rails logger, otherwise
  # Sentry provides its own Sentry::Logger.
  #
  # @return [Logger]
  def logger; end

  # Logger used by Sentry. In Rails, this is the Rails logger, otherwise
  # Sentry provides its own Sentry::Logger.
  #
  # @return [Logger]
  def logger=(_arg0); end

  # Max number of breadcrumbs a breadcrumb buffer can hold
  #
  # @return [Integer]
  def max_breadcrumbs; end

  # Max number of breadcrumbs a breadcrumb buffer can hold
  #
  # @return [Integer]
  def max_breadcrumbs=(_arg0); end

  # Metrics related configuration.
  #
  # @return [Metrics::Configuration]
  def metrics; end

  # Take a float between 0.0 and 1.0 as the sample rate for capturing profiles.
  # Note that this rate is relative to traces_sample_rate / traces_sampler,
  # i.e. the profile is sampled by this rate after the transaction is sampled.
  #
  # @return [Float, nil]
  def profiles_sample_rate; end

  # @raise [ArgumentError]
  def profiles_sample_rate=(profiles_sample_rate); end

  # @return [Boolean]
  def profiling_enabled?; end

  # Project directory root for in_app detection. Could be Rails root, etc.
  # Set automatically for Rails.
  #
  # @return [String]
  def project_root; end

  # Project directory root for in_app detection. Could be Rails root, etc.
  # Set automatically for Rails.
  #
  # @return [String]
  def project_root=(_arg0); end

  # Insert sentry-trace to outgoing requests' headers
  #
  # @return [Boolean]
  def propagate_traces; end

  # Insert sentry-trace to outgoing requests' headers
  #
  # @return [Boolean]
  def propagate_traces=(_arg0); end

  # Array of rack env parameters to be included in the event sent to sentry.
  #
  # @return [Array<String>]
  def rack_env_whitelist; end

  # Array of rack env parameters to be included in the event sent to sentry.
  #
  # @return [Array<String>]
  def rack_env_whitelist=(_arg0); end

  def rails; end

  # Release tag to be passed with every event sent to Sentry.
  # We automatically try to set this to a git SHA or Capistrano release.
  #
  # @return [String]
  def release; end

  def release=(value); end

  # @return [Boolean]
  def sample_allowed?; end

  # The sampling factor to apply to events. A value of 0.0 will not send
  # any events, and a value of 1.0 will send 100% of events.
  #
  # @return [Float]
  def sample_rate; end

  # The sampling factor to apply to events. A value of 0.0 will not send
  # any events, and a value of 1.0 will send 100% of events.
  #
  # @return [Float]
  def sample_rate=(_arg0); end

  # Send diagnostic client reports about dropped events, true by default
  # tries to attach to an existing envelope max once every 30s
  #
  # @return [Boolean]
  def send_client_reports; end

  # Send diagnostic client reports about dropped events, true by default
  # tries to attach to an existing envelope max once every 30s
  #
  # @return [Boolean]
  def send_client_reports=(_arg0); end

  # When send_default_pii's value is false (default), sensitive information like
  # - user ip
  # - user cookie
  # - request body
  # - query string
  # will not be sent to Sentry.
  #
  # @return [Boolean]
  def send_default_pii; end

  # When send_default_pii's value is false (default), sensitive information like
  # - user ip
  # - user cookie
  # - request body
  # - query string
  # will not be sent to Sentry.
  #
  # @return [Boolean]
  def send_default_pii=(_arg0); end

  # Include module versions in reports - boolean.
  #
  # @return [Boolean]
  def send_modules; end

  # Include module versions in reports - boolean.
  #
  # @return [Boolean]
  def send_modules=(_arg0); end

  # @return [Boolean]
  def sending_allowed?; end

  # @return [Boolean]
  def sending_to_dsn_allowed?; end

  def server=(value); end

  # @return [String]
  def server_name; end

  # @return [String]
  def server_name=(_arg0); end

  # @return [Boolean]
  def session_tracking?; end

  # Allow to skip Sentry emails within rake tasks
  #
  # @return [Boolean]
  def skip_rake_integration; end

  # Allow to skip Sentry emails within rake tasks
  #
  # @return [Boolean]
  def skip_rake_integration=(_arg0); end

  # Whether to capture events and traces into Spotlight. Default is false.
  # If you set this to true, Sentry will send events and traces to the local
  # Sidecar proxy at http://localhost:8969/stream.
  # If you want to use a different Sidecar proxy address, set this to String
  # with the proxy URL.
  #
  # @return [Boolean, String]
  def spotlight; end

  # Whether to capture events and traces into Spotlight. Default is false.
  # If you set this to true, Sentry will send events and traces to the local
  # Sidecar proxy at http://localhost:8969/stream.
  # If you want to use a different Sidecar proxy address, set this to String
  # with the proxy URL.
  #
  # @return [Boolean, String]
  def spotlight=(_arg0); end

  # @api private
  def stacktrace_builder; end

  # Allowlist of outgoing request targets to which sentry-trace and baggage headers are attached.
  # Default is all (/.*/)
  #
  # @return [Array<String, Regexp>]
  def trace_propagation_targets; end

  # Allowlist of outgoing request targets to which sentry-trace and baggage headers are attached.
  # Default is all (/.*/)
  #
  # @return [Array<String, Regexp>]
  def trace_propagation_targets=(_arg0); end

  # Take a float between 0.0 and 1.0 as the sample rate for tracing events (transactions).
  #
  # @return [Float, nil]
  def traces_sample_rate; end

  # @raise [ArgumentError]
  def traces_sample_rate=(traces_sample_rate); end

  # Take a Proc that controls the sample rate for every tracing event, e.g.
  #
  # @example
  #   config.traces_sampler =  lambda do |tracing_context|
  #   # tracing_context[:transaction_context] contains the information about the transaction
  #   # tracing_context[:parent_sampled] contains the transaction's parent's sample decision
  #   true # return value can be a boolean or a float between 0.0 and 1.0
  #   end
  # @return [Proc]
  def traces_sampler; end

  # Take a Proc that controls the sample rate for every tracing event, e.g.
  #
  # @example
  #   config.traces_sampler =  lambda do |tracing_context|
  #   # tracing_context[:transaction_context] contains the information about the transaction
  #   # tracing_context[:parent_sampled] contains the transaction's parent's sample decision
  #   true # return value can be a boolean or a float between 0.0 and 1.0
  #   end
  # @return [Proc]
  def traces_sampler=(_arg0); end

  # @return [Boolean]
  def tracing_enabled?; end

  # Transport related configuration.
  #
  # @return [Transport::Configuration]
  def transport; end

  # IP ranges for trusted proxies that will be skipped when calculating IP address.
  def trusted_proxies; end

  # IP ranges for trusted proxies that will be skipped when calculating IP address.
  def trusted_proxies=(_arg0); end

  # @return [Boolean]
  def valid_sample_rate?(sample_rate); end

  private

  # @return [Boolean]
  def capture_in_environment?; end

  def environment_from_env; end

  # @return [Boolean]
  def excluded_exception?(incoming_exception); end

  def excluded_exception_classes; end
  def get_exception_class(x); end
  def init_dsn(dsn_string); end

  # @return [Boolean]
  def matches_exception?(excluded_exception_class, incoming_exception); end

  def run_post_initialization_callbacks; end

  # @return [Boolean]
  def running_on_heroku?; end

  def safe_const_get(x); end
  def server_name_from_env; end

  # @return [Boolean]
  def valid?; end

  class << self
    # allow extensions to add their hooks to the Configuration class
    def add_post_initialization_callback(&block); end

    # Post initialization callbacks are called at the end of initialization process
    # allowing extending the configuration of sentry-ruby by multiple extensions
    def post_initialization_callbacks; end
  end
end

Sentry::Configuration::DEFAULT_PATCHES = T.let(T.unsafe(nil), Array)
Sentry::Configuration::HEROKU_DYNO_METADATA_MESSAGE = T.let(T.unsafe(nil), String)

# Most of these errors generate 4XX responses. In general, Sentry clients
# only automatically report 5xx responses.
Sentry::Configuration::IGNORE_DEFAULT = T.let(T.unsafe(nil), Array)

Sentry::Configuration::INSTRUMENTERS = T.let(T.unsafe(nil), Array)
Sentry::Configuration::LOG_PREFIX = T.let(T.unsafe(nil), String)
Sentry::Configuration::MODULE_SEPARATOR = T.let(T.unsafe(nil), String)
Sentry::Configuration::PROPAGATION_TARGETS_MATCH_ALL = T.let(T.unsafe(nil), Regexp)

# These exceptions could enter Puma's `lowlevel_error_handler` callback and the SDK's Puma integration
# But they are mostly considered as noise and should be ignored by default
# Please see https://github.com/getsentry/sentry-ruby/pull/2026 for more information
Sentry::Configuration::PUMA_IGNORE_DEFAULT = T.let(T.unsafe(nil), Array)

Sentry::Configuration::RACK_ENV_WHITELIST_DEFAULT = T.let(T.unsafe(nil), Array)
Sentry::Configuration::SKIP_INSPECTION_ATTRIBUTES = T.let(T.unsafe(nil), Array)
module Sentry::Cron; end

class Sentry::Cron::Configuration
  # How long (in minutes) after the expected checkin time will we wait
  # until we consider the checkin to have been missed.
  #
  # @return [Integer, nil]
  def default_checkin_margin; end

  # How long (in minutes) after the expected checkin time will we wait
  # until we consider the checkin to have been missed.
  #
  # @return [Integer, nil]
  def default_checkin_margin=(_arg0); end

  # How long (in minutes) is the checkin allowed to run for in in_progress
  # before it is considered failed.
  #
  # @return [Integer, nil]
  def default_max_runtime; end

  # How long (in minutes) is the checkin allowed to run for in in_progress
  # before it is considered failed.
  #
  # @return [Integer, nil]
  def default_max_runtime=(_arg0); end

  # tz database style timezone string
  #
  # @return [String, nil]
  def default_timezone; end

  # tz database style timezone string
  #
  # @return [String, nil]
  def default_timezone=(_arg0); end
end

module Sentry::Cron::MonitorCheckIns
  mixes_in_class_methods ::Sentry::Cron::MonitorCheckIns::ClassMethods

  class << self
    # @private
    def included(base); end
  end
end

module Sentry::Cron::MonitorCheckIns::ClassMethods
  def sentry_monitor_check_ins(slug: T.unsafe(nil), monitor_config: T.unsafe(nil)); end
  def sentry_monitor_config; end
  def sentry_monitor_slug(name: T.unsafe(nil)); end
end

Sentry::Cron::MonitorCheckIns::MAX_SLUG_LENGTH = T.let(T.unsafe(nil), Integer)

module Sentry::Cron::MonitorCheckIns::Patch
  def perform(*args, **opts); end
end

class Sentry::Cron::MonitorConfig
  # @return [MonitorConfig] a new instance of MonitorConfig
  def initialize(schedule, checkin_margin: T.unsafe(nil), max_runtime: T.unsafe(nil), timezone: T.unsafe(nil)); end

  # How long (in minutes) after the expected checkin time will we wait
  # until we consider the checkin to have been missed.
  #
  # @return [Integer, nil]
  def checkin_margin; end

  # How long (in minutes) after the expected checkin time will we wait
  # until we consider the checkin to have been missed.
  #
  # @return [Integer, nil]
  def checkin_margin=(_arg0); end

  # How long (in minutes) is the checkin allowed to run for in in_progress
  # before it is considered failed.
  #
  # @return [Integer, nil]
  def max_runtime; end

  # How long (in minutes) is the checkin allowed to run for in in_progress
  # before it is considered failed.
  #
  # @return [Integer, nil]
  def max_runtime=(_arg0); end

  # The monitor schedule configuration
  #
  # @return [MonitorSchedule::Crontab, MonitorSchedule::Interval]
  def schedule; end

  # The monitor schedule configuration
  #
  # @return [MonitorSchedule::Crontab, MonitorSchedule::Interval]
  def schedule=(_arg0); end

  # tz database style timezone string
  #
  # @return [String, nil]
  def timezone; end

  # tz database style timezone string
  #
  # @return [String, nil]
  def timezone=(_arg0); end

  def to_hash; end

  class << self
    def from_crontab(crontab, **options); end
    def from_interval(num, unit, **options); end
  end
end

module Sentry::Cron::MonitorSchedule; end

class Sentry::Cron::MonitorSchedule::Crontab
  # @return [Crontab] a new instance of Crontab
  def initialize(value); end

  def to_hash; end

  # A crontab formatted string such as "0 * * * *".
  #
  # @return [String]
  def value; end

  # A crontab formatted string such as "0 * * * *".
  #
  # @return [String]
  def value=(_arg0); end
end

class Sentry::Cron::MonitorSchedule::Interval
  # @return [Interval] a new instance of Interval
  def initialize(value, unit); end

  def to_hash; end

  # The unit representing duration of the interval.
  #
  # @return [Symbol]
  def unit; end

  # The unit representing duration of the interval.
  #
  # @return [Symbol]
  def unit=(_arg0); end

  # The number representing duration of the interval.
  #
  # @return [Integer]
  def value; end

  # The number representing duration of the interval.
  #
  # @return [Integer]
  def value=(_arg0); end
end

Sentry::Cron::MonitorSchedule::Interval::VALID_UNITS = T.let(T.unsafe(nil), Array)

module Sentry::CustomInspection
  def inspect; end
end

class Sentry::DSN
  # @return [DSN] a new instance of DSN
  def initialize(dsn_string); end

  def csp_report_uri; end
  def envelope_endpoint; end
  def host; end
  def path; end
  def port; end
  def project_id; end
  def public_key; end
  def scheme; end
  def secret_key; end
  def server; end
  def to_s; end

  # @return [Boolean]
  def valid?; end
end

Sentry::DSN::PORT_MAP = T.let(T.unsafe(nil), Hash)
Sentry::DSN::REQUIRED_ATTRIBUTES = T.let(T.unsafe(nil), Array)

class Sentry::DummyTransport < ::Sentry::Transport
  # @return [DummyTransport] a new instance of DummyTransport
  def initialize(*_arg0); end

  # Returns the value of attribute envelopes.
  def envelopes; end

  # Sets the attribute envelopes
  #
  # @param value the value to set the attribute envelopes to.
  def envelopes=(_arg0); end

  # Returns the value of attribute events.
  def events; end

  # Sets the attribute events
  #
  # @param value the value to set the attribute events to.
  def events=(_arg0); end

  def send_envelope(envelope); end
  def send_event(event); end
end

# @api private
class Sentry::Envelope
  # @api private
  # @return [Envelope] a new instance of Envelope
  def initialize(headers = T.unsafe(nil)); end

  # @api private
  def add_item(headers, payload); end

  # @api private
  def event_id; end

  # @api private
  def headers; end

  # @api private
  def headers=(_arg0); end

  # @api private
  def item_types; end

  # @api private
  def items; end

  # @api private
  def items=(_arg0); end
end

# @api private
class Sentry::Envelope::Item
  # @api private
  # @return [Item] a new instance of Item
  def initialize(headers, payload); end

  # @api private
  def data_category; end

  # @api private
  def headers; end

  # @api private
  def headers=(_arg0); end

  # @api private
  def payload; end

  # @api private
  def payload=(_arg0); end

  # @api private
  def serialize; end

  # @api private
  def size_breakdown; end

  # @api private
  def to_s; end

  # @api private
  def type; end

  private

  # @api private
  def reduce_stacktrace!; end

  # @api private
  def remove_breadcrumbs!; end

  class << self
    # rate limits and client reports use the data_category rather than envelope item type
    #
    # @api private
    def data_category(type); end
  end
end

# @api private
Sentry::Envelope::Item::MAX_SERIALIZED_PAYLOAD_SIZE = T.let(T.unsafe(nil), Integer)

# @api private
Sentry::Envelope::Item::STACKTRACE_FRAME_LIMIT_ON_OVERSIZED_PAYLOAD = T.let(T.unsafe(nil), Integer)

class Sentry::Error < ::StandardError; end

# ErrorEvent represents error or normal message events.
class Sentry::ErrorEvent < ::Sentry::Event
  def add_exception_interface(exception, mechanism:); end
  def add_threads_interface(backtrace: T.unsafe(nil), **options); end

  # @return [ExceptionInterface]
  def exception; end

  # @return [ThreadsInterface]
  def threads; end

  # @return [Hash]
  def to_hash; end
end

# This is an abstract class that defines the shared attributes of an event.
# Please don't use it directly. The user-facing classes are its child classes.
class Sentry::Event
  include ::Sentry::CustomInspection

  # @param configuration [Configuration]
  # @param integration_meta [Hash, nil]
  # @param message [String, nil]
  # @return [Event] a new instance of Event
  def initialize(configuration:, integration_meta: T.unsafe(nil), message: T.unsafe(nil)); end

  def breadcrumbs; end
  def breadcrumbs=(_arg0); end

  # @deprecated This method will be removed in v5.0.0. Please just use Sentry.configuration
  # @return [Configuration]
  def configuration; end

  def contexts; end
  def contexts=(_arg0); end

  # Dynamic Sampling Context (DSC) that gets attached
  # as the trace envelope header in the transport.
  #
  # @return [Hash, nil]
  def dynamic_sampling_context; end

  # Dynamic Sampling Context (DSC) that gets attached
  # as the trace envelope header in the transport.
  #
  # @return [Hash, nil]
  def dynamic_sampling_context=(_arg0); end

  def environment; end
  def environment=(_arg0); end
  def event_id; end
  def event_id=(_arg0); end
  def extra; end
  def extra=(_arg0); end
  def fingerprint; end
  def fingerprint=(_arg0); end
  def level; end

  # Sets the event's level.
  #
  # @param level [String, Symbol]
  # @return [void]
  def level=(level); end

  def message; end
  def message=(_arg0); end
  def modules; end
  def modules=(_arg0); end
  def platform; end
  def platform=(_arg0); end

  # Sets the event's request environment data with RequestInterface.
  #
  # @param env [Hash]
  # @return [void]
  # @see RequestInterface
  def rack_env=(env); end

  def release; end
  def release=(_arg0); end

  # @return [RequestInterface]
  def request; end

  def sdk; end
  def sdk=(_arg0); end
  def server_name; end
  def server_name=(_arg0); end
  def tags; end
  def tags=(_arg0); end
  def timestamp; end

  # Sets the event's timestamp.
  #
  # @param time [Time, Float]
  # @return [void]
  def timestamp=(time); end

  # @return [Hash]
  def to_hash; end

  # @return [Hash]
  def to_json_compatible; end

  def transaction; end
  def transaction=(_arg0); end
  def transaction_info; end
  def transaction_info=(_arg0); end
  def type; end
  def user; end
  def user=(_arg0); end

  private

  def add_request_interface(env); end

  # When behind a proxy (or if the user is using a proxy), we can't use
  # REMOTE_ADDR to determine the Event IP, and must use other headers instead.
  def calculate_real_ip_from_rack(env); end

  def serialize_attributes; end
end

Sentry::Event::MAX_MESSAGE_SIZE_IN_BYTES = T.let(T.unsafe(nil), Integer)

# These are readable attributes.
Sentry::Event::SERIALIZEABLE_ATTRIBUTES = T.let(T.unsafe(nil), Array)

Sentry::Event::SKIP_INSPECTION_ATTRIBUTES = T.let(T.unsafe(nil), Array)
Sentry::Event::TYPE = T.let(T.unsafe(nil), String)

# These are writable attributes.
Sentry::Event::WRITER_ATTRIBUTES = T.let(T.unsafe(nil), Array)

class Sentry::ExceptionInterface < ::Sentry::Interface
  # @param exceptions [Array<SingleExceptionInterface>]
  # @return [ExceptionInterface] a new instance of ExceptionInterface
  def initialize(exceptions:); end

  # @return [Hash]
  def to_hash; end

  # @return [<Array[SingleExceptionInterface]>]
  def values; end

  class << self
    # Builds ExceptionInterface with given exception and stacktrace_builder.
    #
    # @param exception [Exception]
    # @param stacktrace_builder [StacktraceBuilder]
    # @param mechanism [Mechanism]
    # @return [ExceptionInterface]
    # @see SingleExceptionInterface#build_with_stacktrace
    # @see SingleExceptionInterface#initialize
    def build(exception:, stacktrace_builder:, mechanism:); end
  end
end

class Sentry::ExternalError < ::Sentry::Error; end

class Sentry::HTTPTransport < ::Sentry::Transport
  # @return [HTTPTransport] a new instance of HTTPTransport
  def initialize(*args); end

  def conn; end
  def endpoint; end
  def generate_auth_header; end
  def send_data(data); end

  private

  def handle_rate_limited_response(headers); end

  # @return [Boolean]
  def has_rate_limited_header?(headers); end

  # @param proxy [String, URI, Hash] Proxy config value passed into `config.transport`.
  #   Accepts either a URI formatted string, URI, or a hash with the `uri`, `user`, and `password` keys.
  # @return [Hash] Normalized proxy config that will be passed into `Net::HTTP`
  def normalize_proxy(proxy); end

  def parse_rate_limit_header(rate_limit_header); end

  # @return [Boolean]
  def should_compress?(data); end

  def ssl_configuration; end
end

Sentry::HTTPTransport::CONTENT_TYPE = T.let(T.unsafe(nil), String)
Sentry::HTTPTransport::DEFAULT_DELAY = T.let(T.unsafe(nil), Integer)
Sentry::HTTPTransport::GZIP_ENCODING = T.let(T.unsafe(nil), String)
Sentry::HTTPTransport::GZIP_THRESHOLD = T.let(T.unsafe(nil), Integer)

# The list of errors ::Net::HTTP is known to raise
# See https://github.com/ruby/ruby/blob/b0c639f249165d759596f9579fa985cb30533de6/lib/bundler/fetcher.rb#L281-L286
Sentry::HTTPTransport::HTTP_ERRORS = T.let(T.unsafe(nil), Array)

Sentry::HTTPTransport::RATE_LIMIT_HEADER = T.let(T.unsafe(nil), String)
Sentry::HTTPTransport::RETRY_AFTER_HEADER = T.let(T.unsafe(nil), String)
Sentry::HTTPTransport::USER_AGENT = T.let(T.unsafe(nil), String)

class Sentry::Hub
  include ::Sentry::ArgumentCheckingHelper

  # @return [Hub] a new instance of Hub
  def initialize(client, scope); end

  def add_breadcrumb(breadcrumb, hint: T.unsafe(nil)); end
  def bind_client(client); end
  def capture_check_in(slug, status, **options); end
  def capture_event(event, **options, &block); end
  def capture_exception(exception, **options, &block); end
  def capture_message(message, **options, &block); end
  def clone; end
  def configuration; end
  def configure_scope(&block); end
  def continue_trace(env, **options); end
  def current_client; end
  def current_scope; end
  def end_session; end
  def get_baggage; end
  def get_trace_propagation_headers; end
  def get_traceparent; end

  # Returns the value of attribute last_event_id.
  def last_event_id; end

  def new_from_top; end
  def pop_scope; end
  def push_scope; end
  def start_session; end
  def start_transaction(transaction: T.unsafe(nil), custom_sampling_context: T.unsafe(nil), instrumenter: T.unsafe(nil), **options); end

  # this doesn't do anything to the already initialized background worker
  # but it temporarily disables dispatching events to it
  def with_background_worker_disabled(&block); end

  def with_child_span(instrumenter: T.unsafe(nil), **attributes, &block); end
  def with_scope(&block); end
  def with_session_tracking(&block); end

  private

  def current_layer; end
end

class Sentry::Hub::Layer
  # @return [Layer] a new instance of Layer
  def initialize(client, scope); end

  # Returns the value of attribute client.
  def client; end

  # Sets the attribute client
  #
  # @param value the value to set the attribute client to.
  def client=(_arg0); end

  # Returns the value of attribute scope.
  def scope; end
end

module Sentry::Integrable
  def capture_check_in(slug, status, **options, &block); end
  def capture_exception(exception, **options, &block); end
  def capture_message(message, **options, &block); end
  def integration_name; end
  def register_integration(name:, version:); end
end

class Sentry::Interface
  # @return [Hash]
  def to_hash; end
end

Sentry::LOGGER_PROGNAME = T.let(T.unsafe(nil), String)

# @api private
class Sentry::LineCache
  # @api private
  # @return [LineCache] a new instance of LineCache
  def initialize; end

  # Any linecache you provide to Sentry must implement this method.
  # Returns an Array of Strings representing the lines in the source
  # file. The number of lines retrieved is (2 * context) + 1, the middle
  # line should be the line requested by lineno. See specs for more information.
  #
  # @api private
  def get_file_context(filename, lineno, context); end

  private

  # @api private
  def getline(path, n); end

  # @api private
  def getlines(path); end

  # @api private
  # @return [Boolean]
  def valid_path?(path); end
end

class Sentry::Logger < ::Logger
  # @return [Logger] a new instance of Logger
  def initialize(*_arg0); end
end

Sentry::Logger::LOG_PREFIX = T.let(T.unsafe(nil), String)
Sentry::Logger::PROGNAME = T.let(T.unsafe(nil), String)

module Sentry::LoggingHelper
  def log_debug(message); end
  def log_error(message, exception, debug: T.unsafe(nil)); end
  def log_info(message); end
  def log_warn(message); end
end

Sentry::META = T.let(T.unsafe(nil), Hash)

class Sentry::Mechanism < ::Sentry::Interface
  # @return [Mechanism] a new instance of Mechanism
  def initialize(type: T.unsafe(nil), handled: T.unsafe(nil)); end

  # A manually captured exception has handled set to true,
  # false if coming from an integration where we intercept an uncaught exception.
  # Defaults to true here and will be set to false explicitly in integrations.
  #
  # @return [Boolean]
  def handled; end

  # A manually captured exception has handled set to true,
  # false if coming from an integration where we intercept an uncaught exception.
  # Defaults to true here and will be set to false explicitly in integrations.
  #
  # @return [Boolean]
  def handled=(_arg0); end

  # Generic identifier, mostly the source integration for this exception.
  #
  # @return [String]
  def type; end

  # Generic identifier, mostly the source integration for this exception.
  #
  # @return [String]
  def type=(_arg0); end
end

module Sentry::Metrics
  class << self
    def distribution(key, value, unit: T.unsafe(nil), tags: T.unsafe(nil), timestamp: T.unsafe(nil)); end
    def gauge(key, value, unit: T.unsafe(nil), tags: T.unsafe(nil), timestamp: T.unsafe(nil)); end
    def increment(key, value = T.unsafe(nil), unit: T.unsafe(nil), tags: T.unsafe(nil), timestamp: T.unsafe(nil)); end
    def set(key, value, unit: T.unsafe(nil), tags: T.unsafe(nil), timestamp: T.unsafe(nil)); end
    def timing(key, unit: T.unsafe(nil), tags: T.unsafe(nil), timestamp: T.unsafe(nil), &block); end
  end
end

class Sentry::Metrics::Aggregator
  include ::Sentry::LoggingHelper

  # @return [Aggregator] a new instance of Aggregator
  def initialize(configuration, client); end

  def add(type, key, value, unit: T.unsafe(nil), tags: T.unsafe(nil), timestamp: T.unsafe(nil), stacklevel: T.unsafe(nil)); end

  # exposed only for testing
  def buckets; end

  # exposed only for testing
  def client; end

  # exposed only for testing
  def code_locations; end

  def flush(force: T.unsafe(nil)); end

  # exposed only for testing
  def flush_shift; end

  def kill; end

  # exposed only for testing
  def thread; end

  private

  def ensure_thread; end
  def get_code_locations!; end
  def get_flushable_buckets!(force); end
  def get_transaction_name; end
  def get_updated_tags(tags); end
  def process_bucket(timestamp, key, type, value); end
  def process_span_aggregator(key, value); end
  def record_code_location(type, key, unit, timestamp, stacklevel: T.unsafe(nil)); end
  def sanitize_key(key); end
  def sanitize_tag_key(key); end
  def sanitize_tag_value(value); end
  def sanitize_unit(unit); end

  # serialize buckets to statsd format
  def serialize_buckets(buckets); end

  def serialize_locations(timestamp, locations); end

  # important to sort for key consistency
  def serialize_tags(tags); end
end

# this is how far removed from user code in the backtrace we are
# when we record code locations
Sentry::Metrics::Aggregator::DEFAULT_STACKLEVEL = T.let(T.unsafe(nil), Integer)

Sentry::Metrics::Aggregator::FLUSH_INTERVAL = T.let(T.unsafe(nil), Integer)
Sentry::Metrics::Aggregator::KEY_SANITIZATION_REGEX = T.let(T.unsafe(nil), Regexp)
Sentry::Metrics::Aggregator::METRIC_TYPES = T.let(T.unsafe(nil), Hash)
Sentry::Metrics::Aggregator::ROLLUP_IN_SECONDS = T.let(T.unsafe(nil), Integer)
Sentry::Metrics::Aggregator::TAG_KEY_SANITIZATION_REGEX = T.let(T.unsafe(nil), Regexp)
Sentry::Metrics::Aggregator::TAG_VALUE_SANITIZATION_MAP = T.let(T.unsafe(nil), Hash)
Sentry::Metrics::Aggregator::UNIT_SANITIZATION_REGEX = T.let(T.unsafe(nil), Regexp)

class Sentry::Metrics::Configuration
  include ::Sentry::ArgumentCheckingHelper

  # @return [Configuration] a new instance of Configuration
  def initialize; end

  # Optional Proc, called before emitting a metric to the aggregator.
  # Use it to filter keys (return false/nil) or update tags.
  # Make sure to return true at the end.
  #
  # @example
  #   config.metrics.before_emit = lambda do |key, tags|
  #   return nil if key == 'foo'
  #   tags[:bar] = 42
  #   tags.delete(:baz)
  #   true
  #   end
  # @return [Proc, nil]
  def before_emit; end

  def before_emit=(value); end

  # Enable code location reporting.
  # Will be sent once per day.
  # True by default.
  #
  # @return [Boolean]
  def enable_code_locations; end

  # Enable code location reporting.
  # Will be sent once per day.
  # True by default.
  #
  # @return [Boolean]
  def enable_code_locations=(_arg0); end

  # Enable metrics usage.
  # Starts a new {Sentry::Metrics::Aggregator} instance to aggregate metrics
  # and a thread to aggregate flush every 5 seconds.
  #
  # @return [Boolean]
  def enabled; end

  # Enable metrics usage.
  # Starts a new {Sentry::Metrics::Aggregator} instance to aggregate metrics
  # and a thread to aggregate flush every 5 seconds.
  #
  # @return [Boolean]
  def enabled=(_arg0); end
end

class Sentry::Metrics::CounterMetric < ::Sentry::Metrics::Metric
  # @return [CounterMetric] a new instance of CounterMetric
  def initialize(value); end

  def add(value); end
  def serialize; end

  # Returns the value of attribute value.
  def value; end

  def weight; end
end

Sentry::Metrics::DURATION_UNITS = T.let(T.unsafe(nil), Array)

class Sentry::Metrics::DistributionMetric < ::Sentry::Metrics::Metric
  # @return [DistributionMetric] a new instance of DistributionMetric
  def initialize(value); end

  def add(value); end
  def serialize; end

  # Returns the value of attribute value.
  def value; end

  def weight; end
end

Sentry::Metrics::FRACTIONAL_UNITS = T.let(T.unsafe(nil), Array)

class Sentry::Metrics::GaugeMetric < ::Sentry::Metrics::Metric
  # @return [GaugeMetric] a new instance of GaugeMetric
  def initialize(value); end

  def add(value); end

  # Returns the value of attribute count.
  def count; end

  # Returns the value of attribute last.
  def last; end

  # Returns the value of attribute max.
  def max; end

  # Returns the value of attribute min.
  def min; end

  def serialize; end

  # Returns the value of attribute sum.
  def sum; end

  def weight; end
end

Sentry::Metrics::INFORMATION_UNITS = T.let(T.unsafe(nil), Array)

class Sentry::Metrics::LocalAggregator
  # @return [LocalAggregator] a new instance of LocalAggregator
  def initialize; end

  def add(key, value); end

  # exposed only for testing
  def buckets; end

  def to_hash; end

  private

  def deserialize_tags(tags); end
end

class Sentry::Metrics::Metric
  # @raise [NotImplementedError]
  def add(value); end

  # @raise [NotImplementedError]
  def serialize; end

  # @raise [NotImplementedError]
  def weight; end
end

Sentry::Metrics::OP_NAME = T.let(T.unsafe(nil), String)

class Sentry::Metrics::SetMetric < ::Sentry::Metrics::Metric
  # @return [SetMetric] a new instance of SetMetric
  def initialize(value); end

  def add(value); end
  def serialize; end

  # Returns the value of attribute value.
  def value; end

  def weight; end
end

module Sentry::Metrics::Timing
  class << self
    def day; end
    def hour; end
    def microsecond; end
    def millisecond; end
    def minute; end
    def nanosecond; end
    def second; end
    def week; end
  end
end

# @api private
module Sentry::Net; end

# @api private
module Sentry::Net::HTTP
  # To explain how the entire thing works, we need to know how the original Net::HTTP#request works
  # Here's part of its definition. As you can see, it usually calls itself inside a #start block
  #
  # ```
  # def request(req, body = nil, &block)
  #   unless started?
  #     start {
  #       req['connection'] ||= 'close'
  #       return request(req, body, &block) # <- request will be called for the second time from the first call
  #     }
  #   end
  #   # .....
  # end
  # ```
  #
  # So we're only instrumenting request when `Net::HTTP` is already started
  #
  # @api private
  def request(req, body = T.unsafe(nil), &block); end

  private

  # @api private
  def extract_request_info(req); end

  # @api private
  # @return [Boolean]
  def from_sentry_sdk?; end

  # @api private
  # @return [Boolean]
  def propagate_trace?(url, configuration); end

  # @api private
  def record_sentry_breadcrumb(request_info, res); end

  # @api private
  def set_propagation_headers(req); end
end

# @api private
Sentry::Net::HTTP::BREADCRUMB_CATEGORY = T.let(T.unsafe(nil), String)

# @api private
Sentry::Net::HTTP::OP_NAME = T.let(T.unsafe(nil), String)

class Sentry::Profiler
  # @return [Profiler] a new instance of Profiler
  def initialize(configuration); end

  # Returns the value of attribute event_id.
  def event_id; end

  # Returns the value of attribute sampled.
  def sampled; end

  # Sets initial sampling decision of the profile.
  #
  # @return [void]
  def set_initial_sample_decision(transaction_sampled); end

  def start; end

  # Returns the value of attribute started.
  def started; end

  def stop; end
  def to_hash; end

  private

  # copied from stacktrace.rb since I don't want to touch existing code
  # TODO-neel-profiler try to fetch this from stackprof once we patch
  # the native extension
  def compute_filename(abs_path, in_app); end

  # @return [Boolean]
  def in_app?(abs_path); end

  def log(message); end
  def record_lost_event(reason); end
  def split_module(name); end
end

# 101 Hz in microseconds
Sentry::Profiler::DEFAULT_INTERVAL = T.let(T.unsafe(nil), Float)

Sentry::Profiler::MICRO_TO_NANO_SECONDS = T.let(T.unsafe(nil), Float)
Sentry::Profiler::MIN_SAMPLES_REQUIRED = T.let(T.unsafe(nil), Integer)
Sentry::Profiler::PLATFORM = T.let(T.unsafe(nil), String)
Sentry::Profiler::VERSION = T.let(T.unsafe(nil), String)

class Sentry::PropagationContext
  # @return [PropagationContext] a new instance of PropagationContext
  def initialize(scope, env = T.unsafe(nil)); end

  # This is only for accessing the current baggage variable.
  # Please use the #get_baggage method for interfacing outside this class.
  #
  # @return [Baggage, nil]
  def baggage; end

  # Returns the Baggage from the propagation context or populates as head SDK if empty.
  #
  # @return [Baggage, nil]
  def get_baggage; end

  # Returns the Dynamic Sampling Context from the baggage.
  #
  # @return [String, nil]
  def get_dynamic_sampling_context; end

  # Returns the trace context that can be used to embed in an Event.
  #
  # @return [Hash]
  def get_trace_context; end

  # Returns the sentry-trace header from the propagation context.
  #
  # @return [String]
  def get_traceparent; end

  # Is there an incoming trace or not?
  #
  # @return [Boolean]
  def incoming_trace; end

  # The sampling decision of the parent transaction.
  #
  # @return [Boolean, nil]
  def parent_sampled; end

  # Span parent's span_id.
  #
  # @return [String, nil]
  def parent_span_id; end

  # An uuid that can be used to identify the span.
  #
  # @return [String]
  def span_id; end

  # An uuid that can be used to identify a trace.
  #
  # @return [String]
  def trace_id; end

  private

  def populate_head_baggage; end

  class << self
    # Extract the trace_id, parent_span_id and parent_sampled values from a sentry-trace header.
    #
    # @param sentry_trace [String] the sentry-trace header value from the previous transaction.
    # @return [Array, nil]
    def extract_sentry_trace(sentry_trace); end
  end
end

Sentry::PropagationContext::SENTRY_TRACE_REGEXP = T.let(T.unsafe(nil), Regexp)
module Sentry::Puma; end

module Sentry::Puma::Server
  def lowlevel_error(e, env, status = T.unsafe(nil)); end
end

Sentry::Puma::Server::PUMA_4_AND_PRIOR = T.let(T.unsafe(nil), FalseClass)
module Sentry::Rack; end

class Sentry::Rack::CaptureExceptions
  # @return [CaptureExceptions] a new instance of CaptureExceptions
  def initialize(app); end

  def call(env); end

  private

  def capture_exception(exception, env); end
  def collect_exception(env); end
  def finish_transaction(transaction, status_code); end
  def mechanism; end
  def start_transaction(env, scope); end
  def transaction_op; end
end

Sentry::Rack::CaptureExceptions::ERROR_EVENT_ID_KEY = T.let(T.unsafe(nil), String)
Sentry::Rack::CaptureExceptions::MECHANISM_TYPE = T.let(T.unsafe(nil), String)
module Sentry::Rake; end

module Sentry::Rake::Application
  # @api private
  def display_error_message(ex); end
end

# @api private
class Sentry::Redis
  # @api private
  # @return [Redis] a new instance of Redis
  def initialize(commands, host, port, db); end

  # @api private
  def instrument; end

  private

  # @api private
  def commands; end

  # @api private
  def commands_description; end

  # @api private
  def db; end

  # @api private
  def host; end

  # @api private
  def parsed_commands; end

  # @api private
  def port; end

  # @api private
  def record_breadcrumb; end

  # @api private
  def server_description; end
end

# @api private
module Sentry::Redis::GlobalRedisInstrumentation
  # @api private
  def call(command, redis_config); end

  # @api private
  def call_pipelined(commands, redis_config); end
end

# @api private
Sentry::Redis::LOGGER_NAME = T.let(T.unsafe(nil), Symbol)

# @api private
Sentry::Redis::OP_NAME = T.let(T.unsafe(nil), String)

# @api private
module Sentry::Redis::OldClientPatch
  # @api private
  def logging(commands, &block); end
end

# @api private
class Sentry::ReleaseDetector
  class << self
    # @api private
    def detect_release(project_root:, running_on_heroku:); end

    # @api private
    def detect_release_from_capistrano(project_root); end

    # @api private
    def detect_release_from_env; end

    # @api private
    def detect_release_from_git; end

    # @api private
    def detect_release_from_heroku(running_on_heroku); end
  end
end

class Sentry::RequestInterface < ::Sentry::Interface
  # @param env [Hash]
  # @param send_default_pii [Boolean]
  # @param rack_env_whitelist [Array]
  # @return [RequestInterface] a new instance of RequestInterface
  # @see Configuration#send_default_pii
  # @see Configuration#rack_env_whitelist
  def initialize(env:, send_default_pii:, rack_env_whitelist:); end

  # @return [String]
  def cookies; end

  # @return [String]
  def cookies=(_arg0); end

  # @return [Hash]
  def data; end

  # @return [Hash]
  def data=(_arg0); end

  # @return [Hash]
  def env; end

  # @return [Hash]
  def env=(_arg0); end

  # @return [Hash]
  def headers; end

  # @return [Hash]
  def headers=(_arg0); end

  # @return [String]
  def method; end

  # @return [String]
  def method=(_arg0); end

  # @return [String]
  def query_string; end

  # @return [String]
  def query_string=(_arg0); end

  # @return [String]
  def url; end

  # @return [String]
  def url=(_arg0); end

  private

  def filter_and_format_env(env, rack_env_whitelist); end
  def filter_and_format_headers(env, send_default_pii); end

  # In versions < 3, Rack adds in an incorrect HTTP_VERSION key, which causes downstream
  # to think this is a Version header. Instead, this is mapped to
  # env['SERVER_PROTOCOL']. But we don't want to ignore a valid header
  # if the request has legitimately sent a Version header themselves.
  # See: https://github.com/rack/rack/blob/028438f/lib/rack/handler/cgi.rb#L29
  #
  # @return [Boolean]
  def is_server_protocol?(key, value, protocol_version); end

  # @return [Boolean]
  def is_skippable_header?(key); end

  def read_data_from(request); end
end

Sentry::RequestInterface::CONTENT_HEADERS = T.let(T.unsafe(nil), Array)
Sentry::RequestInterface::IP_HEADERS = T.let(T.unsafe(nil), Array)

# See Sentry server default limits at
# https://github.com/getsentry/sentry/blob/master/src/sentry/conf/server.py
Sentry::RequestInterface::MAX_BODY_LIMIT = T.let(T.unsafe(nil), Integer)

Sentry::RequestInterface::REQUEST_ID_HEADERS = T.let(T.unsafe(nil), Array)
Sentry::SENTRY_TRACE_HEADER_NAME = T.let(T.unsafe(nil), String)

class Sentry::Scope
  include ::Sentry::ArgumentCheckingHelper

  # @param max_breadcrumbs [Integer] the maximum number of breadcrumbs to be stored in the scope.
  # @return [Scope] a new instance of Scope
  def initialize(max_breadcrumbs: T.unsafe(nil)); end

  # Adds the breadcrumb to the scope's breadcrumbs buffer.
  #
  # @param breadcrumb [Breadcrumb]
  # @return [void]
  def add_breadcrumb(breadcrumb); end

  # Adds a new event processor [Proc] to the scope.
  #
  # @param block [Proc]
  # @return [void]
  def add_event_processor(&block); end

  # Applies stored attributes and event processors to the given event.
  #
  # @param event [Event]
  # @param hint [Hash] the hint data that'll be passed to event processors.
  # @return [Event]
  def apply_to_event(event, hint = T.unsafe(nil)); end

  def breadcrumbs; end

  # Resets the scope's attributes to defaults.
  #
  # @return [void]
  def clear; end

  # Clears the scope's breadcrumbs buffer
  #
  # @return [void]
  def clear_breadcrumbs; end

  def contexts; end

  # @return [Scope]
  def dup; end

  def event_processors; end
  def extra; end
  def fingerprint; end

  # Generate a new propagation context either from the incoming env headers or from scratch.
  #
  # @param env [Hash, nil]
  # @return [void]
  def generate_propagation_context(env = T.unsafe(nil)); end

  # Returns the associated Span object.
  #
  # @return [Span, nil]
  def get_span; end

  # Returns the associated Transaction object.
  #
  # @return [Transaction, nil]
  def get_transaction; end

  def level; end
  def propagation_context; end
  def rack_env; end
  def session; end
  def set_context(key, value); end

  # Updates the scope's contexts attribute by merging with the old value.
  #
  # @param contexts [Hash]
  # @return [Hash]
  def set_contexts(contexts_hash); end

  # Adds a new key-value pair to current extras.
  #
  # @param key [String, Symbol]
  # @param value [Object]
  # @return [Hash]
  def set_extra(key, value); end

  def set_extras(extras_hash); end

  # Sets the scope's fingerprint attribute.
  #
  # @param fingerprint [Array]
  # @return [Array]
  def set_fingerprint(fingerprint); end

  # Sets the scope's level attribute.
  #
  # @param level [String, Symbol]
  # @return [void]
  def set_level(level); end

  # Sets the scope's rack_env attribute.
  #
  # @param env [Hash]
  # @return [Hash]
  def set_rack_env(env); end

  # Sets the currently active session on the scope.
  #
  # @param session [Session, nil]
  # @return [void]
  def set_session(session); end

  # Sets the scope's span attribute.
  #
  # @param span [Span]
  # @return [Span]
  def set_span(span); end

  # Adds a new key-value pair to current tags.
  #
  # @param key [String, Symbol]
  # @param value [Object]
  # @return [Hash]
  def set_tag(key, value); end

  def set_tags(tags_hash); end

  # Appends a new transaction name to the scope.
  # The "transaction" here does not refer to `Transaction` objects.
  #
  # @param transaction_name [String]
  # @return [void]
  def set_transaction_name(transaction_name, source: T.unsafe(nil)); end

  def set_user(user_hash); end
  def span; end
  def tags; end

  # Returns current transaction name.
  # The "transaction" here does not refer to `Transaction` objects.
  #
  # @return [String, nil]
  def transaction_name; end

  def transaction_names; end

  # Returns current transaction source.
  # The "transaction" here does not refer to `Transaction` objects.
  #
  # @return [String, nil]
  def transaction_source; end

  # These are high cardinality and thus bad.
  #
  # @return [Boolean]
  def transaction_source_low_quality?; end

  def transaction_sources; end

  # Updates the scope's data from the given options.
  #
  # @param contexts [Hash]
  # @param extras [Hash]
  # @param tags [Hash]
  # @param user [Hash]
  # @param level [String, Symbol]
  # @param fingerprint [Array]
  # @return [void]
  def update_from_options(contexts: T.unsafe(nil), extra: T.unsafe(nil), tags: T.unsafe(nil), user: T.unsafe(nil), level: T.unsafe(nil), fingerprint: T.unsafe(nil)); end

  # Updates the scope's data from a given scope.
  #
  # @param scope [Scope]
  # @return [void]
  def update_from_scope(scope); end

  def user; end

  protected

  def breadcrumbs=(_arg0); end
  def contexts=(_arg0); end
  def event_processors=(_arg0); end
  def extra=(_arg0); end
  def fingerprint=(_arg0); end
  def level=(_arg0); end
  def propagation_context=(_arg0); end
  def rack_env=(_arg0); end
  def session=(_arg0); end
  def span=(_arg0); end
  def tags=(_arg0); end
  def transaction_names=(_arg0); end
  def transaction_sources=(_arg0); end
  def user=(_arg0); end

  private

  def set_default_value; end
  def set_new_breadcrumb_buffer; end

  class << self
    # Adds a new global event processor [Proc].
    # Sometimes we need a global event processor without needing to configure scope.
    # These run before scope event processors.
    #
    # @param block [Proc]
    # @return [void]
    def add_global_event_processor(&block); end

    # Returns the global event processors array.
    #
    # @return [Array<Proc>]
    def global_event_processors; end

    # @return [Hash]
    def os_context; end

    # @return [Hash]
    def runtime_context; end
  end
end

Sentry::Scope::ATTRIBUTES = T.let(T.unsafe(nil), Array)

class Sentry::Session
  # @return [Session] a new instance of Session
  def initialize; end

  # Returns the value of attribute aggregation_key.
  def aggregation_key; end

  def close; end
  def deep_dup; end

  # Returns the value of attribute started.
  def started; end

  # Returns the value of attribute status.
  def status; end

  # TODO-neel add :crashed after adding handled mechanism
  def update_from_exception(_exception = T.unsafe(nil)); end
end

Sentry::Session::AGGREGATE_STATUSES = T.let(T.unsafe(nil), Array)

# TODO-neel add :crashed after adding handled mechanism
Sentry::Session::STATUSES = T.let(T.unsafe(nil), Array)

class Sentry::SessionFlusher
  include ::Sentry::LoggingHelper

  # @return [SessionFlusher] a new instance of SessionFlusher
  def initialize(configuration, client); end

  def add_session(session); end
  def flush; end
  def kill; end

  private

  def attrs; end
  def ensure_thread; end
  def init_aggregates(aggregation_key); end
  def pending_envelope; end
end

Sentry::SessionFlusher::FLUSH_INTERVAL = T.let(T.unsafe(nil), Integer)

class Sentry::SingleExceptionInterface < ::Sentry::Interface
  include ::Sentry::CustomInspection

  # @return [SingleExceptionInterface] a new instance of SingleExceptionInterface
  def initialize(exception:, mechanism:, stacktrace: T.unsafe(nil)); end

  # Returns the value of attribute mechanism.
  def mechanism; end

  # Returns the value of attribute module.
  def module; end

  # Returns the value of attribute stacktrace.
  def stacktrace; end

  # Returns the value of attribute thread_id.
  def thread_id; end

  def to_hash; end

  # Returns the value of attribute type.
  def type; end

  # Returns the value of attribute value.
  def value; end

  # Sets the attribute value
  #
  # @param value the value to set the attribute value to.
  def value=(_arg0); end

  class << self
    # patch this method if you want to change an exception's stacktrace frames
    # also see `StacktraceBuilder.build`.
    def build_with_stacktrace(exception:, stacktrace_builder:, mechanism:); end
  end
end

Sentry::SingleExceptionInterface::MAX_LOCAL_BYTES = T.let(T.unsafe(nil), Integer)
Sentry::SingleExceptionInterface::OMISSION_MARK = T.let(T.unsafe(nil), String)
Sentry::SingleExceptionInterface::PROBLEMATIC_LOCAL_VALUE_REPLACEMENT = T.let(T.unsafe(nil), String)
Sentry::SingleExceptionInterface::SKIP_INSPECTION_ATTRIBUTES = T.let(T.unsafe(nil), Array)

class Sentry::Span
  # @return [Span] a new instance of Span
  def initialize(transaction:, description: T.unsafe(nil), op: T.unsafe(nil), status: T.unsafe(nil), trace_id: T.unsafe(nil), span_id: T.unsafe(nil), parent_span_id: T.unsafe(nil), sampled: T.unsafe(nil), start_timestamp: T.unsafe(nil), timestamp: T.unsafe(nil)); end

  # Span data
  #
  # @return [Hash]
  def data; end

  def deep_dup; end

  # Span description
  #
  # @return [String]
  def description; end

  # Finishes the span by adding a timestamp.
  #
  # @return [self]
  def finish(end_timestamp: T.unsafe(nil)); end

  # Returns the span's context that can be used to embed in an Event.
  #
  # @return [Hash]
  def get_trace_context; end

  # Collects gauge metrics on the span for metric summaries.
  def metrics_local_aggregator; end

  def metrics_summary; end

  # Span operation
  #
  # @return [String]
  def op; end

  # Span parent's span_id.
  #
  # @return [String]
  def parent_span_id; end

  # Sampling result of the span.
  #
  # @return [Boolean, nil]
  def sampled; end

  # Inserts a key-value pair to the span's data payload.
  #
  # @param key [String, Symbol]
  # @param value [Object]
  def set_data(key, value); end

  # Sets the span's description.
  #
  # @param description [String] description of the span.
  def set_description(description); end

  # Sets the span's status with given http status code.
  #
  # @param status_code [String] example: "500".
  def set_http_status(status_code); end

  # Sets the span's operation.
  #
  # @param op [String] operation of the span.
  def set_op(op); end

  # Sets the span's status.
  #
  # @param satus [String] status of the span.
  def set_status(status); end

  # Sets a tag to the span.
  #
  # @param key [String, Symbol]
  # @param value [String]
  def set_tag(key, value); end

  # Sets the span's finish timestamp.
  #
  # @param timestamp [Float] finished time in float format (most precise).
  def set_timestamp(timestamp); end

  # An uuid that can be used to identify the span.
  #
  # @return [String]
  def span_id; end

  # The SpanRecorder the current span belongs to.
  # SpanRecorder holds all spans under the same Transaction object (including the Transaction itself).
  #
  # @return [SpanRecorder]
  def span_recorder; end

  # The SpanRecorder the current span belongs to.
  # SpanRecorder holds all spans under the same Transaction object (including the Transaction itself).
  #
  # @return [SpanRecorder]
  def span_recorder=(_arg0); end

  # Starts a child span with given attributes.
  #
  # @param attributes [Hash] the attributes for the child span.
  def start_child(**attributes); end

  # Starting timestamp of the span.
  #
  # @return [Float]
  def start_timestamp; end

  # Span status
  #
  # @return [String]
  def status; end

  # Span tags
  #
  # @return [Hash]
  def tags; end

  # Finishing timestamp of the span.
  #
  # @return [Float]
  def timestamp; end

  # Generates a W3C Baggage header string for distributed tracing
  # from the incoming baggage stored on the transaction.
  #
  # @return [String, nil]
  def to_baggage; end

  # @return [Hash]
  def to_hash; end

  # Generates a trace string that can be used to connect other transactions.
  #
  # @return [String]
  def to_sentry_trace; end

  # An uuid that can be used to identify a trace.
  #
  # @return [String]
  def trace_id; end

  # The Transaction object the Span belongs to.
  # Every span needs to be attached to a Transaction and their child spans will also inherit the same transaction.
  #
  # @return [Transaction]
  def transaction; end

  # Starts a child span, yield it to the given block, and then finish the span after the block is executed.
  #
  # @example
  #   span.with_child_span do |child_span|
  #   # things happen here will be recorded in a child span
  #   end
  # @param attributes [Hash] the attributes for the child span.
  # @param block [Proc] the action to be recorded in the child span.
  # @yieldparam child_span [Span]
  def with_child_span(**attributes, &block); end
end

# We will try to be consistent with OpenTelemetry on this front going forward.
# https://develop.sentry.dev/sdk/performance/span-data-conventions/
module Sentry::Span::DataConventions; end

# The name of the database being accessed.
# For commands that switch the database, this should be set to the target database
# (even if the command fails).
# Example: myDatabase
Sentry::Span::DataConventions::DB_NAME = T.let(T.unsafe(nil), String)

# An identifier for the database management system (DBMS) product being used.
# Example: postgresql
Sentry::Span::DataConventions::DB_SYSTEM = T.let(T.unsafe(nil), String)

Sentry::Span::DataConventions::HTTP_METHOD = T.let(T.unsafe(nil), String)
Sentry::Span::DataConventions::HTTP_QUERY = T.let(T.unsafe(nil), String)
Sentry::Span::DataConventions::HTTP_STATUS_CODE = T.let(T.unsafe(nil), String)

# Name of the database host.
# Example: example.com
Sentry::Span::DataConventions::SERVER_ADDRESS = T.let(T.unsafe(nil), String)

# Logical server port number
# Example: 80; 8080; 443
Sentry::Span::DataConventions::SERVER_PORT = T.let(T.unsafe(nil), String)

# Physical server IP address or Unix socket address.
# Example: 10.5.3.2
Sentry::Span::DataConventions::SERVER_SOCKET_ADDRESS = T.let(T.unsafe(nil), String)

# Physical server port.
# Recommended: If different than server.port.
# Example: 16456
Sentry::Span::DataConventions::SERVER_SOCKET_PORT = T.let(T.unsafe(nil), String)

Sentry::Span::DataConventions::URL = T.let(T.unsafe(nil), String)
Sentry::Span::STATUS_MAP = T.let(T.unsafe(nil), Hash)

# Designed to just report events to Spotlight in development.
class Sentry::SpotlightTransport < ::Sentry::HTTPTransport
  # @return [SpotlightTransport] a new instance of SpotlightTransport
  def initialize(configuration); end

  # Similar to HTTPTransport connection, but does not support Proxy and SSL
  def conn; end

  def endpoint; end
  def on_error; end
  def send_data(data); end
end

Sentry::SpotlightTransport::DEFAULT_SIDECAR_URL = T.let(T.unsafe(nil), String)
Sentry::SpotlightTransport::MAX_FAILED_REQUESTS = T.let(T.unsafe(nil), Integer)

class Sentry::StacktraceBuilder
  # @param project_root [String]
  # @param app_dirs_pattern [Regexp, nil]
  # @param linecache [LineCache]
  # @param context_lines [Integer, nil]
  # @param backtrace_cleanup_callback [Proc, nil]
  # @return [StacktraceBuilder] a new instance of StacktraceBuilder
  # @see Configuration#project_root
  # @see Configuration#app_dirs_pattern
  # @see Configuration#linecache
  # @see Configuration#context_lines
  # @see Configuration#backtrace_cleanup_callback
  def initialize(project_root:, app_dirs_pattern:, linecache:, context_lines:, backtrace_cleanup_callback: T.unsafe(nil)); end

  # @return [Regexp, nil]
  def app_dirs_pattern; end

  # @return [Proc, nil]
  def backtrace_cleanup_callback; end

  # Generates a StacktraceInterface with the given backtrace.
  # You can pass a block to customize/exclude frames:
  #
  # @example
  #   builder.build(backtrace) do |frame|
  #   if frame.module.match?(/a_gem/)
  #   nil
  #   else
  #   frame
  #   end
  #   end
  # @param backtrace [Array<String>]
  # @param frame_callback [Proc]
  # @return [StacktraceInterface]
  # @yieldparam frame [StacktraceInterface::Frame]
  def build(backtrace:, &frame_callback); end

  # @return [Integer, nil]
  def context_lines; end

  # @return [LineCache]
  def linecache; end

  # Get the code location hash for a single line for where metrics where added.
  #
  # @return [Hash]
  def metrics_code_location(unparsed_line); end

  # @return [String]
  def project_root; end

  private

  def convert_parsed_line_into_frame(line); end
  def parse_backtrace_lines(backtrace); end
end

class Sentry::StacktraceInterface
  # @param frames [<Array[Frame]>]
  # @return [StacktraceInterface] a new instance of StacktraceInterface
  def initialize(frames:); end

  # @return [<Array[Frame]>]
  def frames; end

  # @return [String]
  def inspect; end

  # @return [Hash]
  def to_hash; end
end

# Not actually an interface, but I want to use the same style
class Sentry::StacktraceInterface::Frame < ::Sentry::Interface
  # @return [Frame] a new instance of Frame
  def initialize(project_root, line); end

  # Returns the value of attribute abs_path.
  def abs_path; end

  # Sets the attribute abs_path
  #
  # @param value the value to set the attribute abs_path to.
  def abs_path=(_arg0); end

  def compute_filename; end

  # Returns the value of attribute context_line.
  def context_line; end

  # Sets the attribute context_line
  #
  # @param value the value to set the attribute context_line to.
  def context_line=(_arg0); end

  # Returns the value of attribute filename.
  def filename; end

  # Sets the attribute filename
  #
  # @param value the value to set the attribute filename to.
  def filename=(_arg0); end

  # Returns the value of attribute function.
  def function; end

  # Sets the attribute function
  #
  # @param value the value to set the attribute function to.
  def function=(_arg0); end

  # Returns the value of attribute in_app.
  def in_app; end

  # Sets the attribute in_app
  #
  # @param value the value to set the attribute in_app to.
  def in_app=(_arg0); end

  # Returns the value of attribute lineno.
  def lineno; end

  # Sets the attribute lineno
  #
  # @param value the value to set the attribute lineno to.
  def lineno=(_arg0); end

  # Returns the value of attribute module.
  def module; end

  # Sets the attribute module
  #
  # @param value the value to set the attribute module to.
  def module=(_arg0); end

  # Returns the value of attribute post_context.
  def post_context; end

  # Sets the attribute post_context
  #
  # @param value the value to set the attribute post_context to.
  def post_context=(_arg0); end

  # Returns the value of attribute pre_context.
  def pre_context; end

  # Sets the attribute pre_context
  #
  # @param value the value to set the attribute pre_context to.
  def pre_context=(_arg0); end

  def set_context(linecache, context_lines); end
  def to_hash(*args); end
  def to_s; end

  # Returns the value of attribute vars.
  def vars; end

  # Sets the attribute vars
  #
  # @param value the value to set the attribute vars to.
  def vars=(_arg0); end

  private

  def longest_load_path; end

  # @return [Boolean]
  def under_project_root?; end
end

Sentry::THREAD_LOCAL = T.let(T.unsafe(nil), Symbol)

class Sentry::ThreadsInterface
  # @param crashed [Boolean]
  # @param stacktrace [Array]
  # @return [ThreadsInterface] a new instance of ThreadsInterface
  def initialize(crashed: T.unsafe(nil), stacktrace: T.unsafe(nil)); end

  # @return [Hash]
  def to_hash; end

  class << self
    # Builds the ThreadsInterface with given backtrace and stacktrace_builder.
    # Patch this method if you want to change a threads interface's stacktrace frames.
    #
    # @param backtrace [Array]
    # @param stacktrace_builder [StacktraceBuilder]
    # @param crashed [Hash]
    # @return [ThreadsInterface]
    # @see StacktraceBuilder.build
    def build(backtrace:, stacktrace_builder:, **options); end
  end
end

class Sentry::Transaction < ::Sentry::Span
  include ::Sentry::LoggingHelper

  # @return [Transaction] a new instance of Transaction
  def initialize(hub:, name: T.unsafe(nil), source: T.unsafe(nil), parent_sampled: T.unsafe(nil), baggage: T.unsafe(nil), **options); end

  # The parsed incoming W3C baggage header.
  # This is only for accessing the current baggage variable.
  # Please use the #get_baggage method for interfacing outside this class.
  #
  # @return [Baggage, nil]
  def baggage; end

  # @deprecated Use Sentry.configuration instead.
  def configuration; end

  # Additional contexts stored directly on the transaction object.
  #
  # @return [Hash]
  def contexts; end

  # @return [Transaction]
  def deep_dup; end

  # The effective sample rate at which this transaction was sampled.
  #
  # @return [Float, nil]
  def effective_sample_rate; end

  # Finishes the transaction's recording and send it to Sentry.
  #
  # @param hub [Hub] the hub that'll send this transaction. (Deprecated)
  # @return [TransactionEvent]
  def finish(hub: T.unsafe(nil), end_timestamp: T.unsafe(nil)); end

  # Get the existing frozen incoming baggage
  # or populate one with sentry- items as the head SDK.
  #
  # @return [Baggage]
  def get_baggage; end

  # @deprecated Use Sentry.get_current_hub instead.
  def hub; end

  # @deprecated Use Sentry.logger instead.
  def logger; end

  # The measurements added to the transaction.
  #
  # @return [Hash]
  def measurements; end

  # The name of the transaction.
  #
  # @return [String]
  def name; end

  # The sampling decision of the parent transaction, which will be considered when making the current transaction's sampling decision.
  #
  # @return [String]
  def parent_sampled; end

  # The Profiler instance for this transaction.
  #
  # @return [Profiler]
  def profiler; end

  # Set contexts directly on the transaction.
  #
  # @param key [String, Symbol]
  # @param value [Object]
  # @return [void]
  def set_context(key, value); end

  # Sets initial sampling decision of the transaction.
  #
  # @param sampling_context [Hash] a context Hash that'll be passed to `traces_sampler` (if provided).
  # @return [void]
  def set_initial_sample_decision(sampling_context:); end

  # Sets a custom measurement on the transaction.
  #
  # @param name [String] name of the measurement
  # @param value [Float] value of the measurement
  # @param unit [String] unit of the measurement
  # @return [void]
  def set_measurement(name, value, unit = T.unsafe(nil)); end

  # Set the transaction name directly.
  # Considered internal api since it bypasses the usual scope logic.
  #
  # @param name [String]
  # @param source [Symbol]
  # @return [void]
  def set_name(name, source: T.unsafe(nil)); end

  # The source of the transaction name.
  #
  # @return [Symbol]
  def source; end

  # These are high cardinality and thus bad
  #
  # @return [Boolean]
  def source_low_quality?; end

  # Start the profiler.
  #
  # @return [void]
  def start_profiler!; end

  # @return [Hash]
  def to_hash; end

  protected

  def init_span_recorder(limit = T.unsafe(nil)); end

  private

  def generate_transaction_description; end
  def populate_head_baggage; end

  class << self
    # @deprecated Use Sentry::PropagationContext.extract_sentry_trace instead.
    # @return [Array, nil]
    def extract_sentry_trace(sentry_trace); end

    # Initalizes a Transaction instance with a Sentry trace string from another transaction (usually from an external request).
    #
    # The original transaction will become the parent of the new Transaction instance. And they will share the same `trace_id`.
    #
    # The child transaction will also store the parent's sampling decision in its `parent_sampled` attribute.
    #
    # @deprecated use Sentry.continue_trace instead.
    # @param sentry_trace [String] the trace string from the previous transaction.
    # @param baggage [String, nil] the incoming baggage header string.
    # @param hub [Hub] the hub that'll be responsible for sending this transaction when it's finished.
    # @param options [Hash] the options you want to use to initialize a Transaction instance.
    # @return [Transaction, nil]
    def from_sentry_trace(sentry_trace, baggage: T.unsafe(nil), hub: T.unsafe(nil), **options); end
  end
end

Sentry::Transaction::MESSAGE_PREFIX = T.let(T.unsafe(nil), String)

# @deprecated Use Sentry::PropagationContext::SENTRY_TRACE_REGEXP instead.
Sentry::Transaction::SENTRY_TRACE_REGEXP = T.let(T.unsafe(nil), Regexp)

# https://develop.sentry.dev/sdk/event-payloads/transaction/#transaction-annotations
Sentry::Transaction::SOURCES = T.let(T.unsafe(nil), Array)

class Sentry::Transaction::SpanRecorder
  # @return [SpanRecorder] a new instance of SpanRecorder
  def initialize(max_length); end

  def add(span); end

  # Returns the value of attribute max_length.
  def max_length; end

  # Returns the value of attribute spans.
  def spans; end
end

Sentry::Transaction::UNLABELD_NAME = T.let(T.unsafe(nil), String)

# TransactionEvent represents events that carry transaction data (type: "transaction").
class Sentry::TransactionEvent < ::Sentry::Event
  # @return [TransactionEvent] a new instance of TransactionEvent
  def initialize(transaction:, **options); end

  # @return [Hash]
  def measurements; end

  # @return [Hash]
  def measurements=(_arg0); end

  # @return [Hash, nil]
  def metrics_summary; end

  # @return [Hash, nil]
  def metrics_summary=(_arg0); end

  # @return [Hash, nil]
  def profile; end

  # @return [Hash, nil]
  def profile=(_arg0); end

  # @return [<Array[Span]>]
  def spans; end

  # @return [<Array[Span]>]
  def spans=(_arg0); end

  # @return [Float, nil]
  def start_timestamp; end

  # Sets the event's start_timestamp.
  #
  # @param time [Time, Float]
  # @return [void]
  def start_timestamp=(time); end

  # @return [Hash]
  def to_hash; end

  private

  def populate_profile(transaction); end
end

Sentry::TransactionEvent::TYPE = T.let(T.unsafe(nil), String)

class Sentry::Transport
  include ::Sentry::LoggingHelper

  # @return [Transport] a new instance of Transport
  def initialize(configuration); end

  # @return [Boolean]
  def any_rate_limited?; end

  # Returns the value of attribute discarded_events.
  def discarded_events; end

  def envelope_from_event(event); end
  def flush; end

  # @return [Boolean]
  def is_rate_limited?(data_category); end

  # Returns the value of attribute last_client_report_sent.
  def last_client_report_sent; end

  # @deprecated Use Sentry.logger to retrieve the current logger instead.
  def logger; end

  # Returns the value of attribute rate_limits.
  def rate_limits; end

  def record_lost_event(reason, data_category); end

  # @raise [NotImplementedError]
  def send_data(data, options = T.unsafe(nil)); end

  def send_envelope(envelope); end
  def send_event(event); end
  def serialize_envelope(envelope); end

  private

  def fetch_pending_client_report(force: T.unsafe(nil)); end
  def reject_rate_limited_items(envelope); end
end

Sentry::Transport::CLIENT_REPORT_INTERVAL = T.let(T.unsafe(nil), Integer)

# https://develop.sentry.dev/sdk/client-reports/#envelope-item-payload
Sentry::Transport::CLIENT_REPORT_REASONS = T.let(T.unsafe(nil), Array)

class Sentry::Transport::Configuration
  # @return [Configuration] a new instance of Configuration
  def initialize; end

  # The encoding to use to compress the request body.
  # Default value is `Sentry::HTTPTransport::GZIP_ENCODING`.
  #
  # @return [String]
  def encoding; end

  # The encoding to use to compress the request body.
  # Default value is `Sentry::HTTPTransport::GZIP_ENCODING`.
  #
  # @return [String]
  def encoding=(_arg0); end

  # The timeout in seconds to read data from Sentry, in seconds.
  # Default value is 1.
  #
  # @return [Integer]
  def open_timeout; end

  # The timeout in seconds to read data from Sentry, in seconds.
  # Default value is 1.
  #
  # @return [Integer]
  def open_timeout=(_arg0); end

  # The proxy configuration to use to connect to Sentry.
  # Accepts either a URI formatted string, URI, or a hash with the `uri`,
  # `user`, and `password` keys.
  #
  # If you're using the default transport (`Sentry::HTTPTransport`),
  # proxy settings will also automatically be read from tne environment
  # variables (`HTTP_PROXY`, `HTTPS_PROXY`, `NO_PROXY`).
  #
  # @example
  #   # setup proxy using a string:
  #   config.transport.proxy = "https://user:password@proxyhost:8080"
  #
  #   # setup proxy using a URI:
  #   config.transport.proxy = URI("https://user:password@proxyhost:8080")
  #
  #   # setup proxy using a hash:
  #   config.transport.proxy = {
  #   uri: URI("https://proxyhost:8080"),
  #   user: "user",
  #   password: "password"
  #   }
  # @return [String, URI, Hash, nil]
  def proxy; end

  # The proxy configuration to use to connect to Sentry.
  # Accepts either a URI formatted string, URI, or a hash with the `uri`,
  # `user`, and `password` keys.
  #
  # If you're using the default transport (`Sentry::HTTPTransport`),
  # proxy settings will also automatically be read from tne environment
  # variables (`HTTP_PROXY`, `HTTPS_PROXY`, `NO_PROXY`).
  #
  # @example
  #   # setup proxy using a string:
  #   config.transport.proxy = "https://user:password@proxyhost:8080"
  #
  #   # setup proxy using a URI:
  #   config.transport.proxy = URI("https://user:password@proxyhost:8080")
  #
  #   # setup proxy using a hash:
  #   config.transport.proxy = {
  #   uri: URI("https://proxyhost:8080"),
  #   user: "user",
  #   password: "password"
  #   }
  # @return [String, URI, Hash, nil]
  def proxy=(_arg0); end

  # The SSL configuration to use to connect to Sentry.
  # You can either pass a `Hash` containing `ca_file` and `verification` keys,
  # or you can set those options directly on the `Sentry::HTTPTransport::Configuration` object:
  #
  # @example
  #   config.transport.ssl =  {
  #   ca_file: "/path/to/ca_file",
  #   verification: true
  #   end
  # @return [Hash, nil]
  def ssl; end

  # The SSL configuration to use to connect to Sentry.
  # You can either pass a `Hash` containing `ca_file` and `verification` keys,
  # or you can set those options directly on the `Sentry::HTTPTransport::Configuration` object:
  #
  # @example
  #   config.transport.ssl =  {
  #   ca_file: "/path/to/ca_file",
  #   verification: true
  #   end
  # @return [Hash, nil]
  def ssl=(_arg0); end

  # The path to the CA file to use to verify the SSL connection.
  # Default value is `nil`.
  #
  # @return [String, nil]
  def ssl_ca_file; end

  # The path to the CA file to use to verify the SSL connection.
  # Default value is `nil`.
  #
  # @return [String, nil]
  def ssl_ca_file=(_arg0); end

  # Whether to verify that the peer certificate is valid in SSL connections.
  # Default value is `true`.
  #
  # @return [Boolean]
  def ssl_verification; end

  # Whether to verify that the peer certificate is valid in SSL connections.
  # Default value is `true`.
  #
  # @return [Boolean]
  def ssl_verification=(_arg0); end

  # The timeout in seconds to open a connection to Sentry, in seconds.
  # Default value is 2.
  #
  # @return [Integer]
  def timeout; end

  # The timeout in seconds to open a connection to Sentry, in seconds.
  # Default value is 2.
  #
  # @return [Integer]
  def timeout=(_arg0); end

  # The class to use as a transport to connect to Sentry.
  # If this option not set, it will return `nil`, and Sentry will use
  # `Sentry::HTTPTransport` by default.
  #
  # @return [Class, nil]
  def transport_class; end

  def transport_class=(klass); end
end

Sentry::Transport::PROTOCOL_VERSION = T.let(T.unsafe(nil), String)
Sentry::Transport::USER_AGENT = T.let(T.unsafe(nil), String)
module Sentry::Utils; end

module Sentry::Utils::EncodingHelper
  class << self
    def encode_to_utf_8(value); end

    # @return [Boolean]
    def valid_utf_8?(value); end
  end
end

module Sentry::Utils::ExceptionCauseChain
  class << self
    def exception_to_array(exception); end
  end
end

class Sentry::Utils::RealIp
  # @return [RealIp] a new instance of RealIp
  def initialize(remote_addr: T.unsafe(nil), client_ip: T.unsafe(nil), real_ip: T.unsafe(nil), forwarded_for: T.unsafe(nil), trusted_proxies: T.unsafe(nil)); end

  def calculate_ip; end

  # Returns the value of attribute ip.
  def ip; end

  protected

  def filter_trusted_proxy_addresses(ips); end
  def ips_from(header); end
end

Sentry::Utils::RealIp::LOCAL_ADDRESSES = T.let(T.unsafe(nil), Array)

module Sentry::Utils::RequestId
  class << self
    # Request ID based on ActionDispatch::RequestId
    def read_from(env); end
  end
end

Sentry::Utils::RequestId::REQUEST_ID_HEADERS = T.let(T.unsafe(nil), Array)
Sentry::VERSION = T.let(T.unsafe(nil), String)
