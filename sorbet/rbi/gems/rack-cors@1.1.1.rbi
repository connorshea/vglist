# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rack-cors` gem.
# Please instead update this file by running `bin/tapioca gem rack-cors`.

# The Rack main module, serving as a namespace for all core Rack
# modules and classes.
#
# All modules meant for use in your application are <tt>autoload</tt>ed here,
# so it should be enough just to <tt>require 'rack'</tt> in your code.
module Rack
  class << self
    # Return the Rack release as a dotted string.
    def release; end

    # Return the Rack protocol version as a dotted string.
    def version; end
  end
end

Rack::CACHE_CONTROL = T.let(T.unsafe(nil), String)
Rack::CONTENT_LENGTH = T.let(T.unsafe(nil), String)
Rack::CONTENT_TYPE = T.let(T.unsafe(nil), String)

class Rack::Cors
  # @return [Cors] a new instance of Cors
  def initialize(app, opts = T.unsafe(nil), &block); end

  def allow(&block); end
  def call(env); end

  # @return [Boolean]
  def debug?; end

  protected

  def all_resources; end
  def debug(env, message = T.unsafe(nil), &block); end
  def evaluate_path(env); end
  def match_resource(path, env); end
  def process_cors(env, path); end
  def process_preflight(env, path); end
  def resource_for_path(path_info); end
  def select_logger(env); end
end

# All CORS routes need to accept CORS simple headers at all times
# {https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Headers}
Rack::Cors::CORS_SIMPLE_HEADERS = T.let(T.unsafe(nil), Array)

Rack::Cors::DEFAULT_VARY_HEADERS = T.let(T.unsafe(nil), Array)
Rack::Cors::ENV_KEY = T.let(T.unsafe(nil), String)
Rack::Cors::HTTP_ACCESS_CONTROL_REQUEST_HEADERS = T.let(T.unsafe(nil), String)
Rack::Cors::HTTP_ACCESS_CONTROL_REQUEST_METHOD = T.let(T.unsafe(nil), String)
Rack::Cors::HTTP_ORIGIN = T.let(T.unsafe(nil), String)
Rack::Cors::HTTP_X_ORIGIN = T.let(T.unsafe(nil), String)
Rack::Cors::OPTIONS = T.let(T.unsafe(nil), String)
Rack::Cors::PATH_INFO = T.let(T.unsafe(nil), String)
Rack::Cors::RACK_CORS = T.let(T.unsafe(nil), String)
Rack::Cors::RACK_LOGGER = T.let(T.unsafe(nil), String)
Rack::Cors::REQUEST_METHOD = T.let(T.unsafe(nil), String)

class Rack::Cors::Resource
  # @raise [CorsMisconfigurationError]
  # @return [Resource] a new instance of Resource
  def initialize(public_resource, path, opts = T.unsafe(nil)); end

  # Returns the value of attribute credentials.
  def credentials; end

  # Sets the attribute credentials
  #
  # @param value the value to set the attribute credentials to.
  def credentials=(_arg0); end

  # Returns the value of attribute expose.
  def expose; end

  # Sets the attribute expose
  #
  # @param value the value to set the attribute expose to.
  def expose=(_arg0); end

  # Returns the value of attribute headers.
  def headers; end

  # Sets the attribute headers
  #
  # @param value the value to set the attribute headers to.
  def headers=(_arg0); end

  # Returns the value of attribute if_proc.
  def if_proc; end

  # Sets the attribute if_proc
  #
  # @param value the value to set the attribute if_proc to.
  def if_proc=(_arg0); end

  # @return [Boolean]
  def match?(path, env); end

  # @return [Boolean]
  def matches_path?(path); end

  # Returns the value of attribute max_age.
  def max_age; end

  # Sets the attribute max_age
  #
  # @param value the value to set the attribute max_age to.
  def max_age=(_arg0); end

  # Returns the value of attribute methods.
  def methods; end

  # Sets the attribute methods
  #
  # @param value the value to set the attribute methods to.
  def methods=(_arg0); end

  # Returns the value of attribute path.
  def path; end

  # Sets the attribute path
  #
  # @param value the value to set the attribute path to.
  def path=(_arg0); end

  # Returns the value of attribute pattern.
  def pattern; end

  # Sets the attribute pattern
  #
  # @param value the value to set the attribute pattern to.
  def pattern=(_arg0); end

  def process_preflight(env, result); end
  def to_headers(env); end

  # Returns the value of attribute vary_headers.
  def vary_headers; end

  # Sets the attribute vary_headers
  #
  # @param value the value to set the attribute vary_headers to.
  def vary_headers=(_arg0); end

  protected

  # @return [Boolean]
  def allow_headers?(request_headers); end

  def compile(path); end
  def ensure_enum(v); end
  def origin_for_response_header(origin); end

  # @return [Boolean]
  def public_resource?; end

  def to_preflight_headers(env); end
end

class Rack::Cors::Resource::CorsMisconfigurationError < ::StandardError
  def message; end
end

class Rack::Cors::Resources
  # @return [Resources] a new instance of Resources
  def initialize; end

  # @return [Boolean]
  def allow_origin?(source, env = T.unsafe(nil)); end

  def match_resource(path, env); end
  def origins(*args, &blk); end

  # @return [Boolean]
  def public_resources?; end

  def resource(path, opts = T.unsafe(nil)); end
  def resource_for_path(path); end

  # Returns the value of attribute resources.
  def resources; end
end

class Rack::Cors::Result
  def append_header(headers); end

  # Returns the value of attribute hit.
  def hit; end

  # Sets the attribute hit
  #
  # @param value the value to set the attribute hit to.
  def hit=(_arg0); end

  # @return [Boolean]
  def hit?; end

  def miss(reason); end

  # Returns the value of attribute miss_reason.
  def miss_reason; end

  # Sets the attribute miss_reason
  #
  # @param value the value to set the attribute miss_reason to.
  def miss_reason=(_arg0); end

  # Returns the value of attribute preflight.
  def preflight; end

  # Sets the attribute preflight
  #
  # @param value the value to set the attribute preflight to.
  def preflight=(_arg0); end

  # @return [Boolean]
  def preflight?; end

  class << self
    def hit(env); end
    def miss(env, reason); end
    def preflight(env); end
  end
end

Rack::Cors::Result::HEADER_KEY = T.let(T.unsafe(nil), String)
Rack::Cors::Result::MISS_DENY_HEADER = T.let(T.unsafe(nil), String)
Rack::Cors::Result::MISS_DENY_METHOD = T.let(T.unsafe(nil), String)
Rack::Cors::Result::MISS_NO_METHOD = T.let(T.unsafe(nil), String)
Rack::Cors::Result::MISS_NO_ORIGIN = T.let(T.unsafe(nil), String)
Rack::Cors::Result::MISS_NO_PATH = T.let(T.unsafe(nil), String)
Rack::Cors::VARY = T.let(T.unsafe(nil), String)
Rack::DELETE = T.let(T.unsafe(nil), String)
Rack::ETAG = T.let(T.unsafe(nil), String)
Rack::EXPIRES = T.let(T.unsafe(nil), String)
Rack::File = Rack::Files

# HTTP method verbs
Rack::GET = T.let(T.unsafe(nil), String)

Rack::HEAD = T.let(T.unsafe(nil), String)
Rack::HTTPS = T.let(T.unsafe(nil), String)
Rack::HTTP_COOKIE = T.let(T.unsafe(nil), String)
Rack::HTTP_HOST = T.let(T.unsafe(nil), String)
Rack::HTTP_PORT = T.let(T.unsafe(nil), String)
Rack::HTTP_VERSION = T.let(T.unsafe(nil), String)
Rack::LINK = T.let(T.unsafe(nil), String)
Rack::MockSession = Rack::Test::Session
Rack::OPTIONS = T.let(T.unsafe(nil), String)
Rack::PATCH = T.let(T.unsafe(nil), String)
Rack::PATH_INFO = T.let(T.unsafe(nil), String)
Rack::POST = T.let(T.unsafe(nil), String)
Rack::PUT = T.let(T.unsafe(nil), String)
Rack::QUERY_STRING = T.let(T.unsafe(nil), String)
Rack::RACK_ERRORS = T.let(T.unsafe(nil), String)
Rack::RACK_HIJACK = T.let(T.unsafe(nil), String)
Rack::RACK_HIJACK_IO = T.let(T.unsafe(nil), String)
Rack::RACK_INPUT = T.let(T.unsafe(nil), String)
Rack::RACK_IS_HIJACK = T.let(T.unsafe(nil), String)
Rack::RACK_LOGGER = T.let(T.unsafe(nil), String)
Rack::RACK_METHODOVERRIDE_ORIGINAL_METHOD = T.let(T.unsafe(nil), String)
Rack::RACK_MULTIPART_BUFFER_SIZE = T.let(T.unsafe(nil), String)
Rack::RACK_MULTIPART_TEMPFILE_FACTORY = T.let(T.unsafe(nil), String)
Rack::RACK_MULTIPROCESS = T.let(T.unsafe(nil), String)
Rack::RACK_MULTITHREAD = T.let(T.unsafe(nil), String)
Rack::RACK_RECURSIVE_INCLUDE = T.let(T.unsafe(nil), String)
Rack::RACK_REQUEST_COOKIE_HASH = T.let(T.unsafe(nil), String)
Rack::RACK_REQUEST_COOKIE_STRING = T.let(T.unsafe(nil), String)
Rack::RACK_REQUEST_FORM_HASH = T.let(T.unsafe(nil), String)
Rack::RACK_REQUEST_FORM_INPUT = T.let(T.unsafe(nil), String)
Rack::RACK_REQUEST_FORM_VARS = T.let(T.unsafe(nil), String)
Rack::RACK_REQUEST_QUERY_HASH = T.let(T.unsafe(nil), String)
Rack::RACK_REQUEST_QUERY_STRING = T.let(T.unsafe(nil), String)
Rack::RACK_RUNONCE = T.let(T.unsafe(nil), String)
Rack::RACK_SESSION = T.let(T.unsafe(nil), String)
Rack::RACK_SESSION_OPTIONS = T.let(T.unsafe(nil), String)
Rack::RACK_SESSION_UNPACKED_COOKIE_DATA = T.let(T.unsafe(nil), String)
Rack::RACK_SHOWSTATUS_DETAIL = T.let(T.unsafe(nil), String)
Rack::RACK_TEMPFILES = T.let(T.unsafe(nil), String)
Rack::RACK_URL_SCHEME = T.let(T.unsafe(nil), String)

# Rack environment variables
Rack::RACK_VERSION = T.let(T.unsafe(nil), String)

Rack::RELEASE = T.let(T.unsafe(nil), String)
Rack::REQUEST_METHOD = T.let(T.unsafe(nil), String)
Rack::REQUEST_PATH = T.let(T.unsafe(nil), String)
Rack::SCRIPT_NAME = T.let(T.unsafe(nil), String)
Rack::SERVER_NAME = T.let(T.unsafe(nil), String)
Rack::SERVER_PORT = T.let(T.unsafe(nil), String)
Rack::SERVER_PROTOCOL = T.let(T.unsafe(nil), String)
Rack::SET_COOKIE = T.let(T.unsafe(nil), String)
Rack::TRACE = T.let(T.unsafe(nil), String)
Rack::TRANSFER_ENCODING = T.let(T.unsafe(nil), String)
Rack::UNLINK = T.let(T.unsafe(nil), String)

# The Rack protocol version number implemented.
Rack::VERSION = T.let(T.unsafe(nil), Array)
