# This is an autogenerated file for dynamic methods in Game
# Please rerun bundle exec rake rails_rbi:models[Game] to regenerate.

# typed: strong
module Game::ActiveRelation_WhereNot
  sig { params(opts: T.untyped, rest: T.untyped).returns(T.self_type) }
  def not(opts, *rest); end
end

module Game::CustomFinderMethods
  sig { params(limit: Integer).returns(T::Array[Game]) }
  def first_n(limit); end

  sig { params(limit: Integer).returns(T::Array[Game]) }
  def last_n(limit); end

  sig { params(args: T::Array[T.any(Integer, String)]).returns(T::Array[Game]) }
  def find_n(*args); end

  sig { params(id: T.nilable(Integer)).returns(T.nilable(Game)) }
  def find_by_id(id); end

  sig { params(id: Integer).returns(Game) }
  def find_by_id!(id); end
end

class Game < ApplicationRecord
  include Game::GeneratedAttributeMethods
  include Game::GeneratedAssociationMethods
  extend Game::CustomFinderMethods
  extend PgSearch::Model::ClassMethods
  extend Game::QueryMethodsReturningRelation
  RelationType = T.type_alias { T.any(Game::ActiveRecord_Relation, Game::ActiveRecord_Associations_CollectionProxy, Game::ActiveRecord_AssociationRelation) }

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def self.by_engine(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def self.by_genre(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def self.by_year(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def self.highest_avg_rating(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def self.least_recently_updated(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def self.most_favorites(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def self.most_owners(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def self.newest(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def self.oldest(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def self.on_platform(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def self.recently_released(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def self.recently_updated(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def self.with_attached_cover(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_game_purchases; end

  sig { returns(T::Boolean) }
  def self.after_add_for_game_purchases?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_game_purchases=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_game_purchases; end

  sig { returns(T::Boolean) }
  def self.after_remove_for_game_purchases?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_game_purchases=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_game_purchases; end

  sig { returns(T::Boolean) }
  def self.before_add_for_game_purchases?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_game_purchases=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_game_purchases; end

  sig { returns(T::Boolean) }
  def self.before_remove_for_game_purchases?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_game_purchases=(val); end

  sig { returns(T.untyped) }
  def after_add_for_game_purchases; end

  sig { returns(T::Boolean) }
  def after_add_for_game_purchases?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_game_purchases=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_game_purchases; end

  sig { returns(T::Boolean) }
  def after_remove_for_game_purchases?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_game_purchases=(val); end

  sig { returns(T.untyped) }
  def before_add_for_game_purchases; end

  sig { returns(T::Boolean) }
  def before_add_for_game_purchases?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_game_purchases=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_game_purchases; end

  sig { returns(T::Boolean) }
  def before_remove_for_game_purchases?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_game_purchases=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_game_purchases(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_game_purchases(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_purchasers; end

  sig { returns(T::Boolean) }
  def self.after_add_for_purchasers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_purchasers=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_purchasers; end

  sig { returns(T::Boolean) }
  def self.after_remove_for_purchasers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_purchasers=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_purchasers; end

  sig { returns(T::Boolean) }
  def self.before_add_for_purchasers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_purchasers=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_purchasers; end

  sig { returns(T::Boolean) }
  def self.before_remove_for_purchasers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_purchasers=(val); end

  sig { returns(T.untyped) }
  def after_add_for_purchasers; end

  sig { returns(T::Boolean) }
  def after_add_for_purchasers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_purchasers=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_purchasers; end

  sig { returns(T::Boolean) }
  def after_remove_for_purchasers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_purchasers=(val); end

  sig { returns(T.untyped) }
  def before_add_for_purchasers; end

  sig { returns(T::Boolean) }
  def before_add_for_purchasers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_purchasers=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_purchasers; end

  sig { returns(T::Boolean) }
  def before_remove_for_purchasers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_purchasers=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_purchasers(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_purchasers(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_game_developers; end

  sig { returns(T::Boolean) }
  def self.after_add_for_game_developers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_game_developers=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_game_developers; end

  sig { returns(T::Boolean) }
  def self.after_remove_for_game_developers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_game_developers=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_game_developers; end

  sig { returns(T::Boolean) }
  def self.before_add_for_game_developers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_game_developers=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_game_developers; end

  sig { returns(T::Boolean) }
  def self.before_remove_for_game_developers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_game_developers=(val); end

  sig { returns(T.untyped) }
  def after_add_for_game_developers; end

  sig { returns(T::Boolean) }
  def after_add_for_game_developers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_game_developers=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_game_developers; end

  sig { returns(T::Boolean) }
  def after_remove_for_game_developers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_game_developers=(val); end

  sig { returns(T.untyped) }
  def before_add_for_game_developers; end

  sig { returns(T::Boolean) }
  def before_add_for_game_developers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_game_developers=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_game_developers; end

  sig { returns(T::Boolean) }
  def before_remove_for_game_developers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_game_developers=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_game_developers(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_game_developers(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_developers; end

  sig { returns(T::Boolean) }
  def self.after_add_for_developers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_developers=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_developers; end

  sig { returns(T::Boolean) }
  def self.after_remove_for_developers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_developers=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_developers; end

  sig { returns(T::Boolean) }
  def self.before_add_for_developers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_developers=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_developers; end

  sig { returns(T::Boolean) }
  def self.before_remove_for_developers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_developers=(val); end

  sig { returns(T.untyped) }
  def after_add_for_developers; end

  sig { returns(T::Boolean) }
  def after_add_for_developers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_developers=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_developers; end

  sig { returns(T::Boolean) }
  def after_remove_for_developers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_developers=(val); end

  sig { returns(T.untyped) }
  def before_add_for_developers; end

  sig { returns(T::Boolean) }
  def before_add_for_developers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_developers=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_developers; end

  sig { returns(T::Boolean) }
  def before_remove_for_developers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_developers=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_developers(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_developers(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_game_publishers; end

  sig { returns(T::Boolean) }
  def self.after_add_for_game_publishers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_game_publishers=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_game_publishers; end

  sig { returns(T::Boolean) }
  def self.after_remove_for_game_publishers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_game_publishers=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_game_publishers; end

  sig { returns(T::Boolean) }
  def self.before_add_for_game_publishers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_game_publishers=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_game_publishers; end

  sig { returns(T::Boolean) }
  def self.before_remove_for_game_publishers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_game_publishers=(val); end

  sig { returns(T.untyped) }
  def after_add_for_game_publishers; end

  sig { returns(T::Boolean) }
  def after_add_for_game_publishers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_game_publishers=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_game_publishers; end

  sig { returns(T::Boolean) }
  def after_remove_for_game_publishers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_game_publishers=(val); end

  sig { returns(T.untyped) }
  def before_add_for_game_publishers; end

  sig { returns(T::Boolean) }
  def before_add_for_game_publishers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_game_publishers=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_game_publishers; end

  sig { returns(T::Boolean) }
  def before_remove_for_game_publishers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_game_publishers=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_game_publishers(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_game_publishers(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_publishers; end

  sig { returns(T::Boolean) }
  def self.after_add_for_publishers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_publishers=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_publishers; end

  sig { returns(T::Boolean) }
  def self.after_remove_for_publishers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_publishers=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_publishers; end

  sig { returns(T::Boolean) }
  def self.before_add_for_publishers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_publishers=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_publishers; end

  sig { returns(T::Boolean) }
  def self.before_remove_for_publishers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_publishers=(val); end

  sig { returns(T.untyped) }
  def after_add_for_publishers; end

  sig { returns(T::Boolean) }
  def after_add_for_publishers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_publishers=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_publishers; end

  sig { returns(T::Boolean) }
  def after_remove_for_publishers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_publishers=(val); end

  sig { returns(T.untyped) }
  def before_add_for_publishers; end

  sig { returns(T::Boolean) }
  def before_add_for_publishers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_publishers=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_publishers; end

  sig { returns(T::Boolean) }
  def before_remove_for_publishers?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_publishers=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_publishers(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_publishers(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_game_platforms; end

  sig { returns(T::Boolean) }
  def self.after_add_for_game_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_game_platforms=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_game_platforms; end

  sig { returns(T::Boolean) }
  def self.after_remove_for_game_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_game_platforms=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_game_platforms; end

  sig { returns(T::Boolean) }
  def self.before_add_for_game_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_game_platforms=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_game_platforms; end

  sig { returns(T::Boolean) }
  def self.before_remove_for_game_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_game_platforms=(val); end

  sig { returns(T.untyped) }
  def after_add_for_game_platforms; end

  sig { returns(T::Boolean) }
  def after_add_for_game_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_game_platforms=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_game_platforms; end

  sig { returns(T::Boolean) }
  def after_remove_for_game_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_game_platforms=(val); end

  sig { returns(T.untyped) }
  def before_add_for_game_platforms; end

  sig { returns(T::Boolean) }
  def before_add_for_game_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_game_platforms=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_game_platforms; end

  sig { returns(T::Boolean) }
  def before_remove_for_game_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_game_platforms=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_game_platforms(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_game_platforms(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_platforms; end

  sig { returns(T::Boolean) }
  def self.after_add_for_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_platforms=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_platforms; end

  sig { returns(T::Boolean) }
  def self.after_remove_for_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_platforms=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_platforms; end

  sig { returns(T::Boolean) }
  def self.before_add_for_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_platforms=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_platforms; end

  sig { returns(T::Boolean) }
  def self.before_remove_for_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_platforms=(val); end

  sig { returns(T.untyped) }
  def after_add_for_platforms; end

  sig { returns(T::Boolean) }
  def after_add_for_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_platforms=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_platforms; end

  sig { returns(T::Boolean) }
  def after_remove_for_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_platforms=(val); end

  sig { returns(T.untyped) }
  def before_add_for_platforms; end

  sig { returns(T::Boolean) }
  def before_add_for_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_platforms=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_platforms; end

  sig { returns(T::Boolean) }
  def before_remove_for_platforms?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_platforms=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_platforms(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_platforms(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_game_genres; end

  sig { returns(T::Boolean) }
  def self.after_add_for_game_genres?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_game_genres=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_game_genres; end

  sig { returns(T::Boolean) }
  def self.after_remove_for_game_genres?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_game_genres=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_game_genres; end

  sig { returns(T::Boolean) }
  def self.before_add_for_game_genres?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_game_genres=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_game_genres; end

  sig { returns(T::Boolean) }
  def self.before_remove_for_game_genres?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_game_genres=(val); end

  sig { returns(T.untyped) }
  def after_add_for_game_genres; end

  sig { returns(T::Boolean) }
  def after_add_for_game_genres?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_game_genres=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_game_genres; end

  sig { returns(T::Boolean) }
  def after_remove_for_game_genres?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_game_genres=(val); end

  sig { returns(T.untyped) }
  def before_add_for_game_genres; end

  sig { returns(T::Boolean) }
  def before_add_for_game_genres?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_game_genres=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_game_genres; end

  sig { returns(T::Boolean) }
  def before_remove_for_game_genres?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_game_genres=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_game_genres(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_game_genres(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_genres; end

  sig { returns(T::Boolean) }
  def self.after_add_for_genres?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_genres=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_genres; end

  sig { returns(T::Boolean) }
  def self.after_remove_for_genres?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_genres=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_genres; end

  sig { returns(T::Boolean) }
  def self.before_add_for_genres?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_genres=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_genres; end

  sig { returns(T::Boolean) }
  def self.before_remove_for_genres?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_genres=(val); end

  sig { returns(T.untyped) }
  def after_add_for_genres; end

  sig { returns(T::Boolean) }
  def after_add_for_genres?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_genres=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_genres; end

  sig { returns(T::Boolean) }
  def after_remove_for_genres?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_genres=(val); end

  sig { returns(T.untyped) }
  def before_add_for_genres; end

  sig { returns(T::Boolean) }
  def before_add_for_genres?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_genres=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_genres; end

  sig { returns(T::Boolean) }
  def before_remove_for_genres?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_genres=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_genres(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_genres(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_game_engines; end

  sig { returns(T::Boolean) }
  def self.after_add_for_game_engines?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_game_engines=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_game_engines; end

  sig { returns(T::Boolean) }
  def self.after_remove_for_game_engines?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_game_engines=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_game_engines; end

  sig { returns(T::Boolean) }
  def self.before_add_for_game_engines?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_game_engines=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_game_engines; end

  sig { returns(T::Boolean) }
  def self.before_remove_for_game_engines?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_game_engines=(val); end

  sig { returns(T.untyped) }
  def after_add_for_game_engines; end

  sig { returns(T::Boolean) }
  def after_add_for_game_engines?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_game_engines=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_game_engines; end

  sig { returns(T::Boolean) }
  def after_remove_for_game_engines?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_game_engines=(val); end

  sig { returns(T.untyped) }
  def before_add_for_game_engines; end

  sig { returns(T::Boolean) }
  def before_add_for_game_engines?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_game_engines=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_game_engines; end

  sig { returns(T::Boolean) }
  def before_remove_for_game_engines?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_game_engines=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_game_engines(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_game_engines(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_engines; end

  sig { returns(T::Boolean) }
  def self.after_add_for_engines?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_engines=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_engines; end

  sig { returns(T::Boolean) }
  def self.after_remove_for_engines?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_engines=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_engines; end

  sig { returns(T::Boolean) }
  def self.before_add_for_engines?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_engines=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_engines; end

  sig { returns(T::Boolean) }
  def self.before_remove_for_engines?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_engines=(val); end

  sig { returns(T.untyped) }
  def after_add_for_engines; end

  sig { returns(T::Boolean) }
  def after_add_for_engines?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_engines=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_engines; end

  sig { returns(T::Boolean) }
  def after_remove_for_engines?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_engines=(val); end

  sig { returns(T.untyped) }
  def before_add_for_engines; end

  sig { returns(T::Boolean) }
  def before_add_for_engines?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_engines=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_engines; end

  sig { returns(T::Boolean) }
  def before_remove_for_engines?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_engines=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_engines(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_engines(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_steam_app_ids; end

  sig { returns(T::Boolean) }
  def self.after_add_for_steam_app_ids?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_steam_app_ids=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_steam_app_ids; end

  sig { returns(T::Boolean) }
  def self.after_remove_for_steam_app_ids?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_steam_app_ids=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_steam_app_ids; end

  sig { returns(T::Boolean) }
  def self.before_add_for_steam_app_ids?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_steam_app_ids=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_steam_app_ids; end

  sig { returns(T::Boolean) }
  def self.before_remove_for_steam_app_ids?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_steam_app_ids=(val); end

  sig { returns(T.untyped) }
  def after_add_for_steam_app_ids; end

  sig { returns(T::Boolean) }
  def after_add_for_steam_app_ids?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_steam_app_ids=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_steam_app_ids; end

  sig { returns(T::Boolean) }
  def after_remove_for_steam_app_ids?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_steam_app_ids=(val); end

  sig { returns(T.untyped) }
  def before_add_for_steam_app_ids; end

  sig { returns(T::Boolean) }
  def before_add_for_steam_app_ids?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_steam_app_ids=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_steam_app_ids; end

  sig { returns(T::Boolean) }
  def before_remove_for_steam_app_ids?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_steam_app_ids=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_steam_app_ids(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_steam_app_ids(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_favorites; end

  sig { returns(T::Boolean) }
  def self.after_add_for_favorites?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_favorites=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_favorites; end

  sig { returns(T::Boolean) }
  def self.after_remove_for_favorites?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_favorites=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_favorites; end

  sig { returns(T::Boolean) }
  def self.before_add_for_favorites?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_favorites=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_favorites; end

  sig { returns(T::Boolean) }
  def self.before_remove_for_favorites?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_favorites=(val); end

  sig { returns(T.untyped) }
  def after_add_for_favorites; end

  sig { returns(T::Boolean) }
  def after_add_for_favorites?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_favorites=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_favorites; end

  sig { returns(T::Boolean) }
  def after_remove_for_favorites?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_favorites=(val); end

  sig { returns(T.untyped) }
  def before_add_for_favorites; end

  sig { returns(T::Boolean) }
  def before_add_for_favorites?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_favorites=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_favorites; end

  sig { returns(T::Boolean) }
  def before_remove_for_favorites?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_favorites=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_favorites(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_favorites(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_favoriters; end

  sig { returns(T::Boolean) }
  def self.after_add_for_favoriters?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_favoriters=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_favoriters; end

  sig { returns(T::Boolean) }
  def self.after_remove_for_favoriters?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_favoriters=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_favoriters; end

  sig { returns(T::Boolean) }
  def self.before_add_for_favoriters?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_favoriters=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_favoriters; end

  sig { returns(T::Boolean) }
  def self.before_remove_for_favoriters?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_favoriters=(val); end

  sig { returns(T.untyped) }
  def after_add_for_favoriters; end

  sig { returns(T::Boolean) }
  def after_add_for_favoriters?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_favoriters=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_favoriters; end

  sig { returns(T::Boolean) }
  def after_remove_for_favoriters?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_favoriters=(val); end

  sig { returns(T.untyped) }
  def before_add_for_favoriters; end

  sig { returns(T::Boolean) }
  def before_add_for_favoriters?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_favoriters=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_favoriters; end

  sig { returns(T::Boolean) }
  def before_remove_for_favoriters?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_favoriters=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_favoriters(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_favoriters(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_series; end

  sig { returns(T::Boolean) }
  def self.after_add_for_series?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_series=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_series; end

  sig { returns(T::Boolean) }
  def self.after_remove_for_series?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_series=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_series; end

  sig { returns(T::Boolean) }
  def self.before_add_for_series?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_series=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_series; end

  sig { returns(T::Boolean) }
  def self.before_remove_for_series?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_series=(val); end

  sig { returns(T.untyped) }
  def after_add_for_series; end

  sig { returns(T::Boolean) }
  def after_add_for_series?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_series=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_series; end

  sig { returns(T::Boolean) }
  def after_remove_for_series?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_series=(val); end

  sig { returns(T.untyped) }
  def before_add_for_series; end

  sig { returns(T::Boolean) }
  def before_add_for_series?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_series=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_series; end

  sig { returns(T::Boolean) }
  def before_remove_for_series?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_series=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_series(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_series(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_cover_attachment; end

  sig { returns(T::Boolean) }
  def self.after_add_for_cover_attachment?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_cover_attachment=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_cover_attachment; end

  sig { returns(T::Boolean) }
  def self.after_remove_for_cover_attachment?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_cover_attachment=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_cover_attachment; end

  sig { returns(T::Boolean) }
  def self.before_add_for_cover_attachment?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_cover_attachment=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_cover_attachment; end

  sig { returns(T::Boolean) }
  def self.before_remove_for_cover_attachment?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_cover_attachment=(val); end

  sig { returns(T.untyped) }
  def after_add_for_cover_attachment; end

  sig { returns(T::Boolean) }
  def after_add_for_cover_attachment?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_cover_attachment=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_cover_attachment; end

  sig { returns(T::Boolean) }
  def after_remove_for_cover_attachment?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_cover_attachment=(val); end

  sig { returns(T.untyped) }
  def before_add_for_cover_attachment; end

  sig { returns(T::Boolean) }
  def before_add_for_cover_attachment?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_cover_attachment=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_cover_attachment; end

  sig { returns(T::Boolean) }
  def before_remove_for_cover_attachment?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_cover_attachment=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_cover_attachment(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_cover_attachment(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_cover_blob; end

  sig { returns(T::Boolean) }
  def self.after_add_for_cover_blob?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_cover_blob=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_cover_blob; end

  sig { returns(T::Boolean) }
  def self.after_remove_for_cover_blob?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_cover_blob=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_cover_blob; end

  sig { returns(T::Boolean) }
  def self.before_add_for_cover_blob?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_cover_blob=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_cover_blob; end

  sig { returns(T::Boolean) }
  def self.before_remove_for_cover_blob?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_cover_blob=(val); end

  sig { returns(T.untyped) }
  def after_add_for_cover_blob; end

  sig { returns(T::Boolean) }
  def after_add_for_cover_blob?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_cover_blob=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_cover_blob; end

  sig { returns(T::Boolean) }
  def after_remove_for_cover_blob?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_cover_blob=(val); end

  sig { returns(T.untyped) }
  def before_add_for_cover_blob; end

  sig { returns(T::Boolean) }
  def before_add_for_cover_blob?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_cover_blob=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_cover_blob; end

  sig { returns(T::Boolean) }
  def before_remove_for_cover_blob?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_cover_blob=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_cover_blob(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_cover_blob(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_versions; end

  sig { returns(T::Boolean) }
  def self.after_add_for_versions?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_versions=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_versions; end

  sig { returns(T::Boolean) }
  def self.after_remove_for_versions?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_versions=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_versions; end

  sig { returns(T::Boolean) }
  def self.before_add_for_versions?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_versions=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_versions; end

  sig { returns(T::Boolean) }
  def self.before_remove_for_versions?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_versions=(val); end

  sig { returns(T.untyped) }
  def after_add_for_versions; end

  sig { returns(T::Boolean) }
  def after_add_for_versions?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_versions=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_versions; end

  sig { returns(T::Boolean) }
  def after_remove_for_versions?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_versions=(val); end

  sig { returns(T.untyped) }
  def before_add_for_versions; end

  sig { returns(T::Boolean) }
  def before_add_for_versions?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_versions=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_versions; end

  sig { returns(T::Boolean) }
  def before_remove_for_versions?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_versions=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_versions(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_versions(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_pg_search_document; end

  sig { returns(T::Boolean) }
  def self.after_add_for_pg_search_document?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_pg_search_document=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_pg_search_document; end

  sig { returns(T::Boolean) }
  def self.after_remove_for_pg_search_document?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_pg_search_document=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_pg_search_document; end

  sig { returns(T::Boolean) }
  def self.before_add_for_pg_search_document?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_pg_search_document=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_pg_search_document; end

  sig { returns(T::Boolean) }
  def self.before_remove_for_pg_search_document?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_pg_search_document=(val); end

  sig { returns(T.untyped) }
  def after_add_for_pg_search_document; end

  sig { returns(T::Boolean) }
  def after_add_for_pg_search_document?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_pg_search_document=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_pg_search_document; end

  sig { returns(T::Boolean) }
  def after_remove_for_pg_search_document?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_pg_search_document=(val); end

  sig { returns(T.untyped) }
  def before_add_for_pg_search_document; end

  sig { returns(T::Boolean) }
  def before_add_for_pg_search_document?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_pg_search_document=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_pg_search_document; end

  sig { returns(T::Boolean) }
  def before_remove_for_pg_search_document?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_pg_search_document=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_pg_search_document(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_pg_search_document(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def self.search(*args); end

  sig { params(num: T.nilable(Integer)).returns(Game::ActiveRecord_Relation) }
  def self.page(num = nil); end

  sig { params(num: Integer, max_per_page: T.nilable(Integer)).returns(Game::ActiveRecord_Relation) }
  def self.per(num, max_per_page = nil); end

  sig { params(num: Integer).returns(Game::ActiveRecord_Relation) }
  def self.padding(num); end

  sig { returns(Integer) }
  def self.default_per_page; end
end

class Game::ActiveRecord_Relation < ActiveRecord::Relation
  include Game::ActiveRelation_WhereNot
  include Game::CustomFinderMethods
  include Game::QueryMethodsReturningRelation
  Elem = type_member(fixed: Game)

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def by_engine(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def by_genre(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def by_year(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def highest_avg_rating(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def least_recently_updated(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def most_favorites(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def most_owners(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def newest(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def oldest(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def on_platform(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def recently_released(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def recently_updated(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def with_attached_cover(*args); end

  sig { params(num: T.nilable(Integer)).returns(Game::ActiveRecord_Relation) }
  def page(num = nil); end

  sig { params(num: Integer, max_per_page: T.nilable(Integer)).returns(Game::ActiveRecord_Relation) }
  def per(num, max_per_page = nil); end

  sig { params(num: Integer).returns(Game::ActiveRecord_Relation) }
  def padding(num); end

  sig { returns(T::Boolean) }
  def last_page?; end
end

class Game::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  include Game::ActiveRelation_WhereNot
  include Game::CustomFinderMethods
  include Game::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: Game)

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def by_engine(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def by_genre(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def by_year(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def highest_avg_rating(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def least_recently_updated(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def most_favorites(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def most_owners(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def newest(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def oldest(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def on_platform(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def recently_released(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def recently_updated(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def with_attached_cover(*args); end

  sig { params(num: T.nilable(Integer)).returns(Game::ActiveRecord_AssociationRelation) }
  def page(num = nil); end

  sig { params(num: Integer, max_per_page: T.nilable(Integer)).returns(Game::ActiveRecord_AssociationRelation) }
  def per(num, max_per_page = nil); end

  sig { params(num: Integer).returns(Game::ActiveRecord_AssociationRelation) }
  def padding(num); end

  sig { returns(T::Boolean) }
  def last_page?; end
end

class Game::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Game::CustomFinderMethods
  include Game::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: Game)

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def by_engine(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def by_genre(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def by_year(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def highest_avg_rating(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def least_recently_updated(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def most_favorites(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def most_owners(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def newest(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def oldest(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def on_platform(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def recently_released(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def recently_updated(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def with_attached_cover(*args); end

  sig { params(records: T.any(Game, T::Array[Game])).returns(T.self_type) }
  def <<(*records); end

  sig { params(records: T.any(Game, T::Array[Game])).returns(T.self_type) }
  def append(*records); end

  sig { params(records: T.any(Game, T::Array[Game])).returns(T.self_type) }
  def push(*records); end

  sig { params(records: T.any(Game, T::Array[Game])).returns(T.self_type) }
  def concat(*records); end

  sig { params(num: T.nilable(Integer)).returns(Game::ActiveRecord_AssociationRelation) }
  def page(num = nil); end

  sig { params(num: Integer, max_per_page: T.nilable(Integer)).returns(Game::ActiveRecord_AssociationRelation) }
  def per(num, max_per_page = nil); end

  sig { params(num: Integer).returns(Game::ActiveRecord_AssociationRelation) }
  def padding(num); end

  sig { returns(T::Boolean) }
  def last_page?; end
end

module Game::QueryMethodsReturningRelation
  sig { returns(Game::ActiveRecord_Relation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Game::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_Relation) }
  def only(*args); end

  sig { params(block: T.proc.params(e: Game).returns(T::Boolean)).returns(T::Array[Game]) }
  def select(&block); end

  sig { params(args: T.any(String, Symbol, T::Array[T.any(String, Symbol)])).returns(Game::ActiveRecord_Relation) }
  def select_columns(*args); end

  sig { params(args: Symbol).returns(Game::ActiveRecord_Relation) }
  def where_missing(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: Game::ActiveRecord_Relation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end

module Game::QueryMethodsReturningAssociationRelation
  sig { returns(Game::ActiveRecord_AssociationRelation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Game::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Game::ActiveRecord_AssociationRelation) }
  def only(*args); end

  sig { params(block: T.proc.params(e: Game).returns(T::Boolean)).returns(T::Array[Game]) }
  def select(&block); end

  sig { params(args: T.any(String, Symbol, T::Array[T.any(String, Symbol)])).returns(Game::ActiveRecord_AssociationRelation) }
  def select_columns(*args); end

  sig { params(args: Symbol).returns(Game::ActiveRecord_AssociationRelation) }
  def where_missing(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Game::ActiveRecord_AssociationRelation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: Game::ActiveRecord_AssociationRelation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end

module Game::GeneratedAttributeMethods
  sig { returns(T.nilable(Float)) }
  def avg_rating; end

  sig { params(value: T.nilable(T.any(Numeric, ActiveSupport::Duration))).void }
  def avg_rating=(value); end

  sig { returns(T::Boolean) }
  def avg_rating?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def created_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(T.nilable(String)) }
  def epic_games_store_id; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def epic_games_store_id=(value); end

  sig { returns(T::Boolean) }
  def epic_games_store_id?; end

  sig { returns(T.nilable(String)) }
  def giantbomb_id; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def giantbomb_id=(value); end

  sig { returns(T::Boolean) }
  def giantbomb_id?; end

  sig { returns(T.nilable(String)) }
  def gog_id; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def gog_id=(value); end

  sig { returns(T::Boolean) }
  def gog_id?; end

  sig { returns(Integer) }
  def id; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T.nilable(String)) }
  def igdb_id; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def igdb_id=(value); end

  sig { returns(T::Boolean) }
  def igdb_id?; end

  sig { returns(T.nilable(String)) }
  def mobygames_id; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def mobygames_id=(value); end

  sig { returns(T::Boolean) }
  def mobygames_id?; end

  sig { returns(String) }
  def name; end

  sig { params(value: T.any(String, Symbol)).void }
  def name=(value); end

  sig { returns(T::Boolean) }
  def name?; end

  sig { returns(T.nilable(String)) }
  def pcgamingwiki_id; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def pcgamingwiki_id=(value); end

  sig { returns(T::Boolean) }
  def pcgamingwiki_id?; end

  sig { returns(T.nilable(Date)) }
  def release_date; end

  sig { params(value: T.nilable(Date)).void }
  def release_date=(value); end

  sig { returns(T::Boolean) }
  def release_date?; end

  sig { returns(T.nilable(Integer)) }
  def series_id; end

  sig { params(value: T.nilable(T.any(Numeric, ActiveSupport::Duration))).void }
  def series_id=(value); end

  sig { returns(T::Boolean) }
  def series_id?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def updated_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def updated_at=(value); end

  sig { returns(T::Boolean) }
  def updated_at?; end

  sig { returns(T.nilable(Integer)) }
  def wikidata_id; end

  sig { params(value: T.nilable(T.any(Numeric, ActiveSupport::Duration))).void }
  def wikidata_id=(value); end

  sig { returns(T::Boolean) }
  def wikidata_id?; end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def saved_change_to_id?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_id(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def will_save_change_to_id?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_in_database(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_was(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_id!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def saved_change_to_name?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_name(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def name_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def will_save_change_to_name?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def name_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def name_in_database(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def name_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def name_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def name_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def name_was(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def name_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def name_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_name!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def name_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def name_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def saved_change_to_created_at?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_created_at(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def will_save_change_to_created_at?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_in_database(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_was(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_created_at!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def saved_change_to_updated_at?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_updated_at(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def updated_at_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def will_save_change_to_updated_at?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def updated_at_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def updated_at_in_database(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def updated_at_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def updated_at_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def updated_at_was(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def updated_at_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_updated_at!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def updated_at_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def saved_change_to_series_id?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_series_id(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def series_id_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def will_save_change_to_series_id?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def series_id_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def series_id_in_database(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def series_id_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def series_id_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def series_id_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def series_id_was(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def series_id_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def series_id_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_series_id!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def series_id_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def series_id_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def saved_change_to_wikidata_id?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_wikidata_id(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def wikidata_id_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def will_save_change_to_wikidata_id?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def wikidata_id_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def wikidata_id_in_database(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def wikidata_id_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def wikidata_id_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def wikidata_id_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def wikidata_id_was(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def wikidata_id_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def wikidata_id_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_wikidata_id!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def wikidata_id_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def wikidata_id_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def saved_change_to_pcgamingwiki_id?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_pcgamingwiki_id(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def pcgamingwiki_id_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def will_save_change_to_pcgamingwiki_id?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def pcgamingwiki_id_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def pcgamingwiki_id_in_database(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def pcgamingwiki_id_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def pcgamingwiki_id_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def pcgamingwiki_id_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def pcgamingwiki_id_was(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def pcgamingwiki_id_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def pcgamingwiki_id_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_pcgamingwiki_id!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def pcgamingwiki_id_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def pcgamingwiki_id_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def saved_change_to_mobygames_id?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_mobygames_id(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def mobygames_id_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def will_save_change_to_mobygames_id?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def mobygames_id_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def mobygames_id_in_database(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def mobygames_id_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def mobygames_id_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def mobygames_id_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def mobygames_id_was(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def mobygames_id_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def mobygames_id_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_mobygames_id!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def mobygames_id_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def mobygames_id_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def saved_change_to_release_date?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_release_date(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def release_date_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def will_save_change_to_release_date?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def release_date_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def release_date_in_database(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def release_date_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def release_date_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def release_date_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def release_date_was(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def release_date_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def release_date_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_release_date!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def release_date_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def release_date_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def saved_change_to_giantbomb_id?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_giantbomb_id(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def giantbomb_id_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def will_save_change_to_giantbomb_id?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def giantbomb_id_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def giantbomb_id_in_database(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def giantbomb_id_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def giantbomb_id_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def giantbomb_id_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def giantbomb_id_was(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def giantbomb_id_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def giantbomb_id_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_giantbomb_id!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def giantbomb_id_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def giantbomb_id_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def saved_change_to_epic_games_store_id?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_epic_games_store_id(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def epic_games_store_id_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def will_save_change_to_epic_games_store_id?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def epic_games_store_id_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def epic_games_store_id_in_database(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def epic_games_store_id_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def epic_games_store_id_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def epic_games_store_id_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def epic_games_store_id_was(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def epic_games_store_id_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def epic_games_store_id_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_epic_games_store_id!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def epic_games_store_id_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def epic_games_store_id_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def saved_change_to_gog_id?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_gog_id(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def gog_id_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def will_save_change_to_gog_id?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def gog_id_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def gog_id_in_database(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def gog_id_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def gog_id_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def gog_id_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def gog_id_was(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def gog_id_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def gog_id_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_gog_id!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def gog_id_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def gog_id_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def saved_change_to_avg_rating?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_avg_rating(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def avg_rating_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def will_save_change_to_avg_rating?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def avg_rating_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def avg_rating_in_database(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def avg_rating_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def avg_rating_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def avg_rating_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def avg_rating_was(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def avg_rating_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def avg_rating_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_avg_rating!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def avg_rating_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def avg_rating_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def saved_change_to_igdb_id?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_igdb_id(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def igdb_id_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def will_save_change_to_igdb_id?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def igdb_id_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def igdb_id_in_database(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def igdb_id_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def igdb_id_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def igdb_id_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def igdb_id_was(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def igdb_id_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def igdb_id_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_igdb_id!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def igdb_id_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def igdb_id_came_from_user?(*args); end
end

module Game::GeneratedAssociationMethods
  sig { returns(T.nilable(::ActiveStorage::Attachment)) }
  def cover_attachment; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::ActiveStorage::Attachment).void)).returns(::ActiveStorage::Attachment) }
  def build_cover_attachment(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::ActiveStorage::Attachment).void)).returns(::ActiveStorage::Attachment) }
  def create_cover_attachment(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::ActiveStorage::Attachment).void)).returns(::ActiveStorage::Attachment) }
  def create_cover_attachment!(*args, &block); end

  sig { params(value: T.nilable(::ActiveStorage::Attachment)).void }
  def cover_attachment=(value); end

  sig { returns(T.nilable(::ActiveStorage::Attachment)) }
  def reload_cover_attachment; end

  sig { returns(T.nilable(::ActiveStorage::Blob)) }
  def cover_blob; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::ActiveStorage::Blob).void)).returns(::ActiveStorage::Blob) }
  def build_cover_blob(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::ActiveStorage::Blob).void)).returns(::ActiveStorage::Blob) }
  def create_cover_blob(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::ActiveStorage::Blob).void)).returns(::ActiveStorage::Blob) }
  def create_cover_blob!(*args, &block); end

  sig { params(value: T.nilable(::ActiveStorage::Blob)).void }
  def cover_blob=(value); end

  sig { returns(T.nilable(::ActiveStorage::Blob)) }
  def reload_cover_blob; end

  sig { returns(::Company::ActiveRecord_Associations_CollectionProxy) }
  def developers; end

  sig { returns(T::Array[Integer]) }
  def developer_ids; end

  sig { params(value: T::Enumerable[::Company]).void }
  def developers=(value); end

  sig { returns(::Engine::ActiveRecord_Associations_CollectionProxy) }
  def engines; end

  sig { returns(T::Array[Integer]) }
  def engine_ids; end

  sig { params(value: T::Enumerable[::Engine]).void }
  def engines=(value); end

  sig { returns(::User::ActiveRecord_Associations_CollectionProxy) }
  def favoriters; end

  sig { returns(T::Array[Integer]) }
  def favoriter_ids; end

  sig { params(value: T::Enumerable[::User]).void }
  def favoriters=(value); end

  sig { returns(::FavoriteGame::ActiveRecord_Associations_CollectionProxy) }
  def favorites; end

  sig { returns(T::Array[Integer]) }
  def favorite_ids; end

  sig { params(value: T::Enumerable[::FavoriteGame]).void }
  def favorites=(value); end

  sig { returns(::GameDeveloper::ActiveRecord_Associations_CollectionProxy) }
  def game_developers; end

  sig { returns(T::Array[Integer]) }
  def game_developer_ids; end

  sig { params(value: T::Enumerable[::GameDeveloper]).void }
  def game_developers=(value); end

  sig { returns(::GameEngine::ActiveRecord_Associations_CollectionProxy) }
  def game_engines; end

  sig { returns(T::Array[Integer]) }
  def game_engine_ids; end

  sig { params(value: T::Enumerable[::GameEngine]).void }
  def game_engines=(value); end

  sig { returns(::GameGenre::ActiveRecord_Associations_CollectionProxy) }
  def game_genres; end

  sig { returns(T::Array[Integer]) }
  def game_genre_ids; end

  sig { params(value: T::Enumerable[::GameGenre]).void }
  def game_genres=(value); end

  sig { returns(::GamePlatform::ActiveRecord_Associations_CollectionProxy) }
  def game_platforms; end

  sig { returns(T::Array[Integer]) }
  def game_platform_ids; end

  sig { params(value: T::Enumerable[::GamePlatform]).void }
  def game_platforms=(value); end

  sig { returns(::GamePublisher::ActiveRecord_Associations_CollectionProxy) }
  def game_publishers; end

  sig { returns(T::Array[Integer]) }
  def game_publisher_ids; end

  sig { params(value: T::Enumerable[::GamePublisher]).void }
  def game_publishers=(value); end

  sig { returns(::GamePurchase::ActiveRecord_Associations_CollectionProxy) }
  def game_purchases; end

  sig { returns(T::Array[Integer]) }
  def game_purchase_ids; end

  sig { params(value: T::Enumerable[::GamePurchase]).void }
  def game_purchases=(value); end

  sig { returns(::Genre::ActiveRecord_Associations_CollectionProxy) }
  def genres; end

  sig { returns(T::Array[Integer]) }
  def genre_ids; end

  sig { params(value: T::Enumerable[::Genre]).void }
  def genres=(value); end

  sig { returns(T.untyped) }
  def pg_search_document; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: T.untyped).void)).returns(T.untyped) }
  def build_pg_search_document(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: T.untyped).void)).returns(T.untyped) }
  def create_pg_search_document(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: T.untyped).void)).returns(T.untyped) }
  def create_pg_search_document!(*args, &block); end

  sig { params(value: T.untyped).void }
  def pg_search_document=(value); end

  sig { returns(T.untyped) }
  def reload_pg_search_document; end

  sig { returns(::Platform::ActiveRecord_Associations_CollectionProxy) }
  def platforms; end

  sig { returns(T::Array[Integer]) }
  def platform_ids; end

  sig { params(value: T::Enumerable[::Platform]).void }
  def platforms=(value); end

  sig { returns(::Company::ActiveRecord_Associations_CollectionProxy) }
  def publishers; end

  sig { returns(T::Array[Integer]) }
  def publisher_ids; end

  sig { params(value: T::Enumerable[::Company]).void }
  def publishers=(value); end

  sig { returns(::User::ActiveRecord_Associations_CollectionProxy) }
  def purchasers; end

  sig { returns(T::Array[Integer]) }
  def purchaser_ids; end

  sig { params(value: T::Enumerable[::User]).void }
  def purchasers=(value); end

  sig { returns(T.nilable(::Series)) }
  def series; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Series).void)).returns(::Series) }
  def build_series(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Series).void)).returns(::Series) }
  def create_series(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Series).void)).returns(::Series) }
  def create_series!(*args, &block); end

  sig { params(value: T.nilable(::Series)).void }
  def series=(value); end

  sig { returns(T.nilable(::Series)) }
  def reload_series; end

  sig { returns(::SteamAppId::ActiveRecord_Associations_CollectionProxy) }
  def steam_app_ids; end

  sig { returns(T::Array[Integer]) }
  def steam_app_id_ids; end

  sig { params(value: T::Enumerable[::SteamAppId]).void }
  def steam_app_ids=(value); end

  sig { returns(::Versions::GameVersion::ActiveRecord_Associations_CollectionProxy) }
  def versions; end

  sig { returns(T::Array[Integer]) }
  def version_ids; end

  sig { params(value: T::Enumerable[::Versions::GameVersion]).void }
  def versions=(value); end

  sig { returns(T.nilable(ActiveStorage::Attached::One)) }
  def cover; end

  sig { params(attachable: T.untyped).returns(T.untyped) }
  def cover=(attachable); end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def game_purchase_ids=(ids); end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def purchaser_ids=(ids); end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def game_developer_ids=(ids); end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def developer_ids=(ids); end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def game_publisher_ids=(ids); end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def publisher_ids=(ids); end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def game_platform_ids=(ids); end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def platform_ids=(ids); end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def game_genre_ids=(ids); end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def genre_ids=(ids); end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def game_engine_ids=(ids); end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def engine_ids=(ids); end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def steam_app_id_ids=(ids); end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def favorite_ids=(ids); end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def favoriter_ids=(ids); end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def series_ids=(ids); end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def cover_attachment_ids=(ids); end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def cover_blob_ids=(ids); end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def version_ids=(ids); end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def pg_search_document_ids=(ids); end
end
