# This is an autogenerated file for dynamic methods in ActiveStorage::Blob
# Please rerun bundle exec rake rails_rbi:models[ActiveStorage::Blob] to regenerate.

# typed: strong
module ActiveStorage::Blob::ActiveRelation_WhereNot
  sig { params(opts: T.untyped, rest: T.untyped).returns(T.self_type) }
  def not(opts, *rest); end
end

module ActiveStorage::Blob::GeneratedSerializedAttributeMethods
  sig { returns(T.nilable(T.any(T::Array[T.untyped], T::Boolean, Float, T::Hash[T.untyped, T.untyped], Integer, String))) }
  def metadata; end

  sig { params(value: T.nilable(T.any(T::Array[T.untyped], T::Boolean, Float, T::Hash[T.untyped, T.untyped], Integer, String))).void }
  def metadata=(value); end

  sig { returns(T::Boolean) }
  def metadata?; end
end

module ActiveStorage::Blob::CustomFinderMethods
  sig { params(limit: Integer).returns(T::Array[ActiveStorage::Blob]) }
  def first_n(limit); end

  sig { params(limit: Integer).returns(T::Array[ActiveStorage::Blob]) }
  def last_n(limit); end

  sig { params(args: T::Array[T.any(Integer, String)]).returns(T::Array[ActiveStorage::Blob]) }
  def find_n(*args); end

  sig { params(id: T.nilable(Integer)).returns(T.nilable(ActiveStorage::Blob)) }
  def find_by_id(id); end

  sig { params(id: Integer).returns(ActiveStorage::Blob) }
  def find_by_id!(id); end
end

class ActiveStorage::Blob < ActiveStorage::Record
  include ActiveStorage::Blob::GeneratedSerializedAttributeMethods
  include ActiveStorage::Blob::GeneratedAttributeMethods
  include ActiveStorage::Blob::GeneratedAssociationMethods
  extend ActiveStorage::Blob::CustomFinderMethods
  extend ActiveStorage::Blob::QueryMethodsReturningRelation
  RelationType = T.type_alias { T.any(ActiveStorage::Blob::ActiveRecord_Relation, ActiveStorage::Blob::ActiveRecord_Associations_CollectionProxy, ActiveStorage::Blob::ActiveRecord_AssociationRelation) }

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def self.unattached(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def self.with_attached_preview_image(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_variant_records; end

  sig { returns(T::Boolean) }
  def self.after_add_for_variant_records?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_variant_records=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_variant_records; end

  sig { returns(T::Boolean) }
  def self.after_remove_for_variant_records?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_variant_records=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_variant_records; end

  sig { returns(T::Boolean) }
  def self.before_add_for_variant_records?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_variant_records=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_variant_records; end

  sig { returns(T::Boolean) }
  def self.before_remove_for_variant_records?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_variant_records=(val); end

  sig { returns(T.untyped) }
  def after_add_for_variant_records; end

  sig { returns(T::Boolean) }
  def after_add_for_variant_records?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_variant_records=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_variant_records; end

  sig { returns(T::Boolean) }
  def after_remove_for_variant_records?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_variant_records=(val); end

  sig { returns(T.untyped) }
  def before_add_for_variant_records; end

  sig { returns(T::Boolean) }
  def before_add_for_variant_records?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_variant_records=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_variant_records; end

  sig { returns(T::Boolean) }
  def before_remove_for_variant_records?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_variant_records=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_variant_records(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_variant_records(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_preview_image_attachment; end

  sig { returns(T::Boolean) }
  def self.after_add_for_preview_image_attachment?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_preview_image_attachment=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_preview_image_attachment; end

  sig { returns(T::Boolean) }
  def self.after_remove_for_preview_image_attachment?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_preview_image_attachment=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_preview_image_attachment; end

  sig { returns(T::Boolean) }
  def self.before_add_for_preview_image_attachment?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_preview_image_attachment=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_preview_image_attachment; end

  sig { returns(T::Boolean) }
  def self.before_remove_for_preview_image_attachment?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_preview_image_attachment=(val); end

  sig { returns(T.untyped) }
  def after_add_for_preview_image_attachment; end

  sig { returns(T::Boolean) }
  def after_add_for_preview_image_attachment?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_preview_image_attachment=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_preview_image_attachment; end

  sig { returns(T::Boolean) }
  def after_remove_for_preview_image_attachment?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_preview_image_attachment=(val); end

  sig { returns(T.untyped) }
  def before_add_for_preview_image_attachment; end

  sig { returns(T::Boolean) }
  def before_add_for_preview_image_attachment?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_preview_image_attachment=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_preview_image_attachment; end

  sig { returns(T::Boolean) }
  def before_remove_for_preview_image_attachment?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_preview_image_attachment=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_preview_image_attachment(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_preview_image_attachment(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_preview_image_blob; end

  sig { returns(T::Boolean) }
  def self.after_add_for_preview_image_blob?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_preview_image_blob=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_preview_image_blob; end

  sig { returns(T::Boolean) }
  def self.after_remove_for_preview_image_blob?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_preview_image_blob=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_preview_image_blob; end

  sig { returns(T::Boolean) }
  def self.before_add_for_preview_image_blob?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_preview_image_blob=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_preview_image_blob; end

  sig { returns(T::Boolean) }
  def self.before_remove_for_preview_image_blob?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_preview_image_blob=(val); end

  sig { returns(T.untyped) }
  def after_add_for_preview_image_blob; end

  sig { returns(T::Boolean) }
  def after_add_for_preview_image_blob?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_preview_image_blob=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_preview_image_blob; end

  sig { returns(T::Boolean) }
  def after_remove_for_preview_image_blob?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_preview_image_blob=(val); end

  sig { returns(T.untyped) }
  def before_add_for_preview_image_blob; end

  sig { returns(T::Boolean) }
  def before_add_for_preview_image_blob?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_preview_image_blob=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_preview_image_blob; end

  sig { returns(T::Boolean) }
  def before_remove_for_preview_image_blob?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_preview_image_blob=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_preview_image_blob(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_preview_image_blob(*args); end

  sig { returns(T.untyped) }
  def self.after_add_for_attachments; end

  sig { returns(T::Boolean) }
  def self.after_add_for_attachments?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_add_for_attachments=(val); end

  sig { returns(T.untyped) }
  def self.after_remove_for_attachments; end

  sig { returns(T::Boolean) }
  def self.after_remove_for_attachments?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.after_remove_for_attachments=(val); end

  sig { returns(T.untyped) }
  def self.before_add_for_attachments; end

  sig { returns(T::Boolean) }
  def self.before_add_for_attachments?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_add_for_attachments=(val); end

  sig { returns(T.untyped) }
  def self.before_remove_for_attachments; end

  sig { returns(T::Boolean) }
  def self.before_remove_for_attachments?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def self.before_remove_for_attachments=(val); end

  sig { returns(T.untyped) }
  def after_add_for_attachments; end

  sig { returns(T::Boolean) }
  def after_add_for_attachments?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_add_for_attachments=(val); end

  sig { returns(T.untyped) }
  def after_remove_for_attachments; end

  sig { returns(T::Boolean) }
  def after_remove_for_attachments?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def after_remove_for_attachments=(val); end

  sig { returns(T.untyped) }
  def before_add_for_attachments; end

  sig { returns(T::Boolean) }
  def before_add_for_attachments?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_add_for_attachments=(val); end

  sig { returns(T.untyped) }
  def before_remove_for_attachments; end

  sig { returns(T::Boolean) }
  def before_remove_for_attachments?; end

  sig { params(val: T.untyped).returns(T.untyped) }
  def before_remove_for_attachments=(val); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def autosave_associated_records_for_attachments(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def validate_associated_records_for_attachments(*args); end

  sig { params(num: T.nilable(Integer)).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def self.page(num = nil); end

  sig { params(num: Integer, max_per_page: T.nilable(Integer)).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def self.per(num, max_per_page = nil); end

  sig { params(num: Integer).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def self.padding(num); end

  sig { returns(Integer) }
  def self.default_per_page; end
end

class ActiveStorage::Blob::ActiveRecord_Relation < ActiveRecord::Relation
  include ActiveStorage::Blob::ActiveRelation_WhereNot
  include ActiveStorage::Blob::CustomFinderMethods
  include ActiveStorage::Blob::QueryMethodsReturningRelation
  Elem = type_member(fixed: ActiveStorage::Blob)

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def unattached(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def with_attached_preview_image(*args); end

  sig { params(num: T.nilable(Integer)).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def page(num = nil); end

  sig { params(num: Integer, max_per_page: T.nilable(Integer)).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def per(num, max_per_page = nil); end

  sig { params(num: Integer).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def padding(num); end

  sig { returns(T::Boolean) }
  def last_page?; end
end

class ActiveStorage::Blob::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  include ActiveStorage::Blob::ActiveRelation_WhereNot
  include ActiveStorage::Blob::CustomFinderMethods
  include ActiveStorage::Blob::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: ActiveStorage::Blob)

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def unattached(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def with_attached_preview_image(*args); end

  sig { params(num: T.nilable(Integer)).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def page(num = nil); end

  sig { params(num: Integer, max_per_page: T.nilable(Integer)).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def per(num, max_per_page = nil); end

  sig { params(num: Integer).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def padding(num); end

  sig { returns(T::Boolean) }
  def last_page?; end
end

class ActiveStorage::Blob::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include ActiveStorage::Blob::CustomFinderMethods
  include ActiveStorage::Blob::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: ActiveStorage::Blob)

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def unattached(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def with_attached_preview_image(*args); end

  sig { params(records: T.any(ActiveStorage::Blob, T::Array[ActiveStorage::Blob])).returns(T.self_type) }
  def <<(*records); end

  sig { params(records: T.any(ActiveStorage::Blob, T::Array[ActiveStorage::Blob])).returns(T.self_type) }
  def append(*records); end

  sig { params(records: T.any(ActiveStorage::Blob, T::Array[ActiveStorage::Blob])).returns(T.self_type) }
  def push(*records); end

  sig { params(records: T.any(ActiveStorage::Blob, T::Array[ActiveStorage::Blob])).returns(T.self_type) }
  def concat(*records); end

  sig { params(num: T.nilable(Integer)).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def page(num = nil); end

  sig { params(num: Integer, max_per_page: T.nilable(Integer)).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def per(num, max_per_page = nil); end

  sig { params(num: Integer).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def padding(num); end

  sig { returns(T::Boolean) }
  def last_page?; end
end

module ActiveStorage::Blob::QueryMethodsReturningRelation
  sig { returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def only(*args); end

  sig { params(block: T.proc.params(e: ActiveStorage::Blob).returns(T::Boolean)).returns(T::Array[ActiveStorage::Blob]) }
  def select(&block); end

  sig { params(args: T.any(String, Symbol, T::Array[T.any(String, Symbol)])).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def select_columns(*args); end

  sig { params(args: Symbol).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def where_missing(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: ActiveStorage::Blob::ActiveRecord_Relation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end

module ActiveStorage::Blob::QueryMethodsReturningAssociationRelation
  sig { returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(ActiveStorage::Blob::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def only(*args); end

  sig { params(block: T.proc.params(e: ActiveStorage::Blob).returns(T::Boolean)).returns(T::Array[ActiveStorage::Blob]) }
  def select(&block); end

  sig { params(args: T.any(String, Symbol, T::Array[T.any(String, Symbol)])).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def select_columns(*args); end

  sig { params(args: Symbol).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def where_missing(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(ActiveStorage::Blob::ActiveRecord_AssociationRelation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: ActiveStorage::Blob::ActiveRecord_AssociationRelation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end

module ActiveStorage::Blob::GeneratedAttributeMethods
  sig { returns(Integer) }
  def byte_size; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def byte_size=(value); end

  sig { returns(T::Boolean) }
  def byte_size?; end

  sig { returns(T.nilable(String)) }
  def checksum; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def checksum=(value); end

  sig { returns(T::Boolean) }
  def checksum?; end

  sig { returns(T.nilable(String)) }
  def content_type; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def content_type=(value); end

  sig { returns(T::Boolean) }
  def content_type?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def created_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(String) }
  def filename; end

  sig { params(value: T.any(String, Symbol)).void }
  def filename=(value); end

  sig { returns(T::Boolean) }
  def filename?; end

  sig { returns(Integer) }
  def id; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(String) }
  def key; end

  sig { params(value: T.any(String, Symbol)).void }
  def key=(value); end

  sig { returns(T::Boolean) }
  def key?; end

  sig { returns(String) }
  def service_name; end

  sig { params(value: T.any(String, Symbol)).void }
  def service_name=(value); end

  sig { returns(T::Boolean) }
  def service_name?; end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def saved_change_to_id?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_id(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def will_save_change_to_id?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_in_database(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_was(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_id!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def id_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def saved_change_to_key?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_key(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def key_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def will_save_change_to_key?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def key_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def key_in_database(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def key_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def key_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def key_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def key_was(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def key_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def key_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_key!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def key_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def key_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def saved_change_to_filename?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_filename(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def filename_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def will_save_change_to_filename?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def filename_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def filename_in_database(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def filename_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def filename_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def filename_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def filename_was(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def filename_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def filename_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_filename!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def filename_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def filename_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def saved_change_to_content_type?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_content_type(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def content_type_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def will_save_change_to_content_type?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def content_type_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def content_type_in_database(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def content_type_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def content_type_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def content_type_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def content_type_was(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def content_type_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def content_type_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_content_type!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def content_type_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def content_type_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def saved_change_to_metadata?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_metadata(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def metadata_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def will_save_change_to_metadata?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def metadata_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def metadata_in_database(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def metadata_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def metadata_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def metadata_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def metadata_was(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def metadata_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def metadata_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_metadata!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def metadata_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def metadata_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def saved_change_to_byte_size?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_byte_size(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def byte_size_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def will_save_change_to_byte_size?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def byte_size_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def byte_size_in_database(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def byte_size_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def byte_size_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def byte_size_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def byte_size_was(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def byte_size_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def byte_size_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_byte_size!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def byte_size_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def byte_size_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def saved_change_to_checksum?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_checksum(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def checksum_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def will_save_change_to_checksum?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def checksum_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def checksum_in_database(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def checksum_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def checksum_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def checksum_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def checksum_was(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def checksum_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def checksum_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_checksum!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def checksum_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def checksum_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def saved_change_to_created_at?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_created_at(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def will_save_change_to_created_at?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_in_database(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_was(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_created_at!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def created_at_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at_came_from_user?(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def saved_change_to_service_name?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def saved_change_to_service_name(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def service_name_before_last_save(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def will_save_change_to_service_name?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def service_name_change_to_be_saved(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def service_name_in_database(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def service_name_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def service_name_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def service_name_will_change!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def service_name_was(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def service_name_previously_changed?(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def service_name_previous_change(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def restore_service_name!(*args); end

  sig { params(args: T.untyped).returns(T.untyped) }
  def service_name_before_type_cast(*args); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def service_name_came_from_user?(*args); end
end

module ActiveStorage::Blob::GeneratedAssociationMethods
  sig { returns(::ActiveStorage::Attachment::ActiveRecord_Associations_CollectionProxy) }
  def attachments; end

  sig { returns(T::Array[Integer]) }
  def attachment_ids; end

  sig { params(value: T::Enumerable[::ActiveStorage::Attachment]).void }
  def attachments=(value); end

  sig { returns(T.nilable(::ActiveStorage::Attachment)) }
  def preview_image_attachment; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::ActiveStorage::Attachment).void)).returns(::ActiveStorage::Attachment) }
  def build_preview_image_attachment(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::ActiveStorage::Attachment).void)).returns(::ActiveStorage::Attachment) }
  def create_preview_image_attachment(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::ActiveStorage::Attachment).void)).returns(::ActiveStorage::Attachment) }
  def create_preview_image_attachment!(*args, &block); end

  sig { params(value: T.nilable(::ActiveStorage::Attachment)).void }
  def preview_image_attachment=(value); end

  sig { returns(T.nilable(::ActiveStorage::Attachment)) }
  def reload_preview_image_attachment; end

  sig { returns(T.nilable(::ActiveStorage::Blob)) }
  def preview_image_blob; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::ActiveStorage::Blob).void)).returns(::ActiveStorage::Blob) }
  def build_preview_image_blob(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::ActiveStorage::Blob).void)).returns(::ActiveStorage::Blob) }
  def create_preview_image_blob(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::ActiveStorage::Blob).void)).returns(::ActiveStorage::Blob) }
  def create_preview_image_blob!(*args, &block); end

  sig { params(value: T.nilable(::ActiveStorage::Blob)).void }
  def preview_image_blob=(value); end

  sig { returns(T.nilable(::ActiveStorage::Blob)) }
  def reload_preview_image_blob; end

  sig { returns(::ActiveStorage::VariantRecord::ActiveRecord_Associations_CollectionProxy) }
  def variant_records; end

  sig { returns(T::Array[Integer]) }
  def variant_record_ids; end

  sig { params(value: T::Enumerable[::ActiveStorage::VariantRecord]).void }
  def variant_records=(value); end

  sig { returns(T.nilable(ActiveStorage::Attached::One)) }
  def preview_image; end

  sig { params(attachable: T.untyped).returns(T.untyped) }
  def preview_image=(attachable); end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def variant_record_ids=(ids); end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def preview_image_attachment_ids=(ids); end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def preview_image_blob_ids=(ids); end

  sig { params(ids: T.untyped).returns(T.untyped) }
  def attachment_ids=(ids); end
end
