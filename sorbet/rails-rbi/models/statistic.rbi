# This is an autogenerated file for dynamic methods in Statistic
# Please rerun bundle exec rake rails_rbi:models[Statistic] to regenerate.

# typed: strong
module Statistic::ActiveRelation_WhereNot
  sig { params(opts: T.untyped, rest: T.untyped).returns(T.self_type) }
  def not(opts, *rest); end
end

module Statistic::GeneratedAttributeMethods
  sig { returns(Integer) }
  def banned_users; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def banned_users=(value); end

  sig { returns(T::Boolean) }
  def banned_users?; end

  sig { returns(Integer) }
  def companies; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def companies=(value); end

  sig { returns(T::Boolean) }
  def companies?; end

  sig { returns(T.nilable(Integer)) }
  def company_versions; end

  sig { params(value: T.nilable(T.any(Numeric, ActiveSupport::Duration))).void }
  def company_versions=(value); end

  sig { returns(T::Boolean) }
  def company_versions?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def created_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(T.nilable(Integer)) }
  def engine_versions; end

  sig { params(value: T.nilable(T.any(Numeric, ActiveSupport::Duration))).void }
  def engine_versions=(value); end

  sig { returns(T::Boolean) }
  def engine_versions?; end

  sig { returns(Integer) }
  def engines; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def engines=(value); end

  sig { returns(T::Boolean) }
  def engines?; end

  sig { returns(Integer) }
  def epic_games_store_ids; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def epic_games_store_ids=(value); end

  sig { returns(T::Boolean) }
  def epic_games_store_ids?; end

  sig { returns(Integer) }
  def events; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def events=(value); end

  sig { returns(T::Boolean) }
  def events?; end

  sig { returns(Integer) }
  def game_purchases; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def game_purchases=(value); end

  sig { returns(T::Boolean) }
  def game_purchases?; end

  sig { returns(T.nilable(Integer)) }
  def game_versions; end

  sig { params(value: T.nilable(T.any(Numeric, ActiveSupport::Duration))).void }
  def game_versions=(value); end

  sig { returns(T::Boolean) }
  def game_versions?; end

  sig { returns(Integer) }
  def games; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def games=(value); end

  sig { returns(T::Boolean) }
  def games?; end

  sig { returns(Integer) }
  def games_with_covers; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def games_with_covers=(value); end

  sig { returns(T::Boolean) }
  def games_with_covers?; end

  sig { returns(Integer) }
  def games_with_release_dates; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def games_with_release_dates=(value); end

  sig { returns(T::Boolean) }
  def games_with_release_dates?; end

  sig { returns(T.nilable(Integer)) }
  def genre_versions; end

  sig { params(value: T.nilable(T.any(Numeric, ActiveSupport::Duration))).void }
  def genre_versions=(value); end

  sig { returns(T::Boolean) }
  def genre_versions?; end

  sig { returns(Integer) }
  def genres; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def genres=(value); end

  sig { returns(T::Boolean) }
  def genres?; end

  sig { returns(Integer) }
  def giantbomb_ids; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def giantbomb_ids=(value); end

  sig { returns(T::Boolean) }
  def giantbomb_ids?; end

  sig { returns(Integer) }
  def gog_ids; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def gog_ids=(value); end

  sig { returns(T::Boolean) }
  def gog_ids?; end

  sig { returns(Integer) }
  def id; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T.nilable(Integer)) }
  def igdb_ids; end

  sig { params(value: T.nilable(T.any(Numeric, ActiveSupport::Duration))).void }
  def igdb_ids=(value); end

  sig { returns(T::Boolean) }
  def igdb_ids?; end

  sig { returns(Integer) }
  def mobygames_ids; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def mobygames_ids=(value); end

  sig { returns(T::Boolean) }
  def mobygames_ids?; end

  sig { returns(Integer) }
  def pcgamingwiki_ids; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def pcgamingwiki_ids=(value); end

  sig { returns(T::Boolean) }
  def pcgamingwiki_ids?; end

  sig { returns(T.nilable(Integer)) }
  def platform_versions; end

  sig { params(value: T.nilable(T.any(Numeric, ActiveSupport::Duration))).void }
  def platform_versions=(value); end

  sig { returns(T::Boolean) }
  def platform_versions?; end

  sig { returns(Integer) }
  def platforms; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def platforms=(value); end

  sig { returns(T::Boolean) }
  def platforms?; end

  sig { returns(Integer) }
  def relationships; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def relationships=(value); end

  sig { returns(T::Boolean) }
  def relationships?; end

  sig { returns(Integer) }
  def series; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def series=(value); end

  sig { returns(T::Boolean) }
  def series?; end

  sig { returns(T.nilable(Integer)) }
  def series_versions; end

  sig { params(value: T.nilable(T.any(Numeric, ActiveSupport::Duration))).void }
  def series_versions=(value); end

  sig { returns(T::Boolean) }
  def series_versions?; end

  sig { returns(Integer) }
  def steam_app_ids; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def steam_app_ids=(value); end

  sig { returns(T::Boolean) }
  def steam_app_ids?; end

  sig { returns(Integer) }
  def stores; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def stores=(value); end

  sig { returns(T::Boolean) }
  def stores?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def updated_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def updated_at=(value); end

  sig { returns(T::Boolean) }
  def updated_at?; end

  sig { returns(Integer) }
  def users; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def users=(value); end

  sig { returns(T::Boolean) }
  def users?; end

  sig { returns(Integer) }
  def wikidata_ids; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def wikidata_ids=(value); end

  sig { returns(T::Boolean) }
  def wikidata_ids?; end
end

module Statistic::CustomFinderMethods
  sig { params(limit: Integer).returns(T::Array[Statistic]) }
  def first_n(limit); end

  sig { params(limit: Integer).returns(T::Array[Statistic]) }
  def last_n(limit); end

  sig { params(args: T::Array[T.any(Integer, String)]).returns(T::Array[Statistic]) }
  def find_n(*args); end

  sig { params(id: T.nilable(Integer)).returns(T.nilable(Statistic)) }
  def find_by_id(id); end

  sig { params(id: Integer).returns(Statistic) }
  def find_by_id!(id); end
end

class Statistic < ApplicationRecord
  include Statistic::GeneratedAttributeMethods
  extend Statistic::CustomFinderMethods
  extend Statistic::QueryMethodsReturningRelation
  RelationType = T.type_alias { T.any(Statistic::ActiveRecord_Relation, Statistic::ActiveRecord_Associations_CollectionProxy, Statistic::ActiveRecord_AssociationRelation) }

  sig { params(num: T.nilable(Integer)).returns(Statistic::ActiveRecord_Relation) }
  def self.page(num = nil); end

  sig { params(num: Integer, max_per_page: T.nilable(Integer)).returns(Statistic::ActiveRecord_Relation) }
  def self.per(num, max_per_page = nil); end

  sig { params(num: Integer).returns(Statistic::ActiveRecord_Relation) }
  def self.padding(num); end

  sig { returns(Integer) }
  def self.default_per_page; end
end

module Statistic::QueryMethodsReturningRelation
  sig { returns(Statistic::ActiveRecord_Relation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Statistic::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_Relation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_Relation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_Relation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_Relation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_Relation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_Relation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_Relation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_Relation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_Relation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_Relation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_Relation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_Relation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_Relation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_Relation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_Relation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_Relation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_Relation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_Relation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_Relation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_Relation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_Relation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_Relation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_Relation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_Relation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_Relation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_Relation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_Relation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_Relation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_Relation) }
  def only(*args); end

  sig { params(block: T.proc.params(e: Statistic).returns(T::Boolean)).returns(T::Array[Statistic]) }
  def select(&block); end

  sig { params(args: T.any(String, Symbol, T::Array[T.any(String, Symbol)])).returns(Statistic::ActiveRecord_Relation) }
  def select_columns(*args); end

  sig { params(args: Symbol).returns(Statistic::ActiveRecord_Relation) }
  def where_missing(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Statistic::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: Statistic::ActiveRecord_Relation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end

module Statistic::QueryMethodsReturningAssociationRelation
  sig { returns(Statistic::ActiveRecord_AssociationRelation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Statistic::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_AssociationRelation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_AssociationRelation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_AssociationRelation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_AssociationRelation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_AssociationRelation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_AssociationRelation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_AssociationRelation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_AssociationRelation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_AssociationRelation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_AssociationRelation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_AssociationRelation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_AssociationRelation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_AssociationRelation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_AssociationRelation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_AssociationRelation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_AssociationRelation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_AssociationRelation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_AssociationRelation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_AssociationRelation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_AssociationRelation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_AssociationRelation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_AssociationRelation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_AssociationRelation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_AssociationRelation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_AssociationRelation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_AssociationRelation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_AssociationRelation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_AssociationRelation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Statistic::ActiveRecord_AssociationRelation) }
  def only(*args); end

  sig { params(block: T.proc.params(e: Statistic).returns(T::Boolean)).returns(T::Array[Statistic]) }
  def select(&block); end

  sig { params(args: T.any(String, Symbol, T::Array[T.any(String, Symbol)])).returns(Statistic::ActiveRecord_AssociationRelation) }
  def select_columns(*args); end

  sig { params(args: Symbol).returns(Statistic::ActiveRecord_AssociationRelation) }
  def where_missing(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Statistic::ActiveRecord_AssociationRelation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: Statistic::ActiveRecord_AssociationRelation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end

class Statistic::ActiveRecord_Relation < ActiveRecord::Relation
  include Statistic::ActiveRelation_WhereNot
  include Statistic::CustomFinderMethods
  include Statistic::QueryMethodsReturningRelation
  Elem = type_member(fixed: Statistic)

  sig { params(num: T.nilable(Integer)).returns(Statistic::ActiveRecord_Relation) }
  def page(num = nil); end

  sig { params(num: Integer, max_per_page: T.nilable(Integer)).returns(Statistic::ActiveRecord_Relation) }
  def per(num, max_per_page = nil); end

  sig { params(num: Integer).returns(Statistic::ActiveRecord_Relation) }
  def padding(num); end

  sig { returns(T::Boolean) }
  def last_page?; end
end

class Statistic::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  include Statistic::ActiveRelation_WhereNot
  include Statistic::CustomFinderMethods
  include Statistic::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: Statistic)

  sig { params(num: T.nilable(Integer)).returns(Statistic::ActiveRecord_AssociationRelation) }
  def page(num = nil); end

  sig { params(num: Integer, max_per_page: T.nilable(Integer)).returns(Statistic::ActiveRecord_AssociationRelation) }
  def per(num, max_per_page = nil); end

  sig { params(num: Integer).returns(Statistic::ActiveRecord_AssociationRelation) }
  def padding(num); end

  sig { returns(T::Boolean) }
  def last_page?; end
end

class Statistic::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Statistic::CustomFinderMethods
  include Statistic::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: Statistic)

  sig { params(records: T.any(Statistic, T::Array[Statistic])).returns(T.self_type) }
  def <<(*records); end

  sig { params(records: T.any(Statistic, T::Array[Statistic])).returns(T.self_type) }
  def append(*records); end

  sig { params(records: T.any(Statistic, T::Array[Statistic])).returns(T.self_type) }
  def push(*records); end

  sig { params(records: T.any(Statistic, T::Array[Statistic])).returns(T.self_type) }
  def concat(*records); end

  sig { params(num: T.nilable(Integer)).returns(Statistic::ActiveRecord_AssociationRelation) }
  def page(num = nil); end

  sig { params(num: Integer, max_per_page: T.nilable(Integer)).returns(Statistic::ActiveRecord_AssociationRelation) }
  def per(num, max_per_page = nil); end

  sig { params(num: Integer).returns(Statistic::ActiveRecord_AssociationRelation) }
  def padding(num); end

  sig { returns(T::Boolean) }
  def last_page?; end
end
